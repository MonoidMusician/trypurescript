// Generated by psc-bundle 0.9.1
var PS = {};
(function(exports) {
    "use strict";

  // module Data.Functor

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  var composeFlipped = function (dictSemigroupoid) {
      return function (f) {
          return function (g) {
              return compose(dictSemigroupoid)(g)(f);
          };
      };
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["composeFlipped"] = composeFlipped;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (__superclass_Control$dotSemigroupoid$dotSemigroupoid_0, id) {
      this["__superclass_Control.Semigroupoid.Semigroupoid_0"] = __superclass_Control$dotSemigroupoid$dotSemigroupoid_0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Category = PS["Control.Category"];        
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  var apply = function (f) {
      return function (x) {
          return f(x);
      };
  };
  exports["apply"] = apply;
  exports["applyFlipped"] = applyFlipped;
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["on"] = on;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  // module Data.Unit

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  // module Data.Show

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g,
      function (c, i) { // jshint ignore:line
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var showBoolean = new Show(function (v) {
      if (v) {
          return "true";
      };
      if (!v) {
          return "false";
      };
      throw new Error("Failed pattern match at Data.Show line 13, column 3 - line 14, column 3: " + [ v.constructor.name ]);
  });
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showBoolean"] = showBoolean;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showChar"] = showChar;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];        
  var showUnit = new Data_Show.Show(function (v) {
      return "unit";
  });
  exports["showUnit"] = showUnit;
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["voidLeft"] = voidLeft;
  exports["voidRight"] = voidRight;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
    "use strict";

  // module Data.Semigroup

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Data_Show = PS["Data.Show"];        
  var Void = function (x) {
      return x;
  };
  var absurd = function (a) {
      var spin = function (__copy_v) {
          var v = __copy_v;
          tco: while (true) {
              var __tco_v = v;
              v = __tco_v;
              continue tco;
          };
      };
      return spin(a);
  };
  var showVoid = new Data_Show.Show(absurd);
  exports["absurd"] = absurd;
  exports["showVoid"] = showVoid;
})(PS["Data.Void"] = PS["Data.Void"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  };
  var semigroupVoid = new Semigroup(function (v) {
      return Data_Void.absurd;
  });
  var semigroupUnit = new Semigroup(function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  });
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  var semigroupFn = function (dictSemigroup) {
      return new Semigroup(function (f) {
          return function (g) {
              return function (x) {
                  return append(dictSemigroup)(f(x))(g(x));
              };
          };
      });
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupUnit"] = semigroupUnit;
  exports["semigroupVoid"] = semigroupVoid;
  exports["semigroupFn"] = semigroupFn;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Alt = function (__superclass_Data$dotFunctor$dotFunctor_0, alt) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.alt = alt;
  };
  var altArray = new Alt(function () {
      return Data_Functor.functorArray;
  }, Data_Semigroup.append(Data_Semigroup.semigroupArray));
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
  exports["altArray"] = altArray;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
    "use strict";

  // module Control.Apply

  exports.arrayApply = function (fs) {
    return function (xs) {
      var result = [];
      var n = 0;
      for (var i = 0, l = fs.length; i < l; i++) {
        for (var j = 0, k = xs.length; j < k; j++) {
          result[n++] = fs[i](xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Apply = function (__superclass_Data$dotFunctor$dotFunctor_0, apply) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.apply = apply;
  };
  var applyFn = new Apply(function () {
      return Data_Functor.functorFn;
  }, function (f) {
      return function (g) {
          return function (x) {
              return f(x)(g(x));
          };
      };
  });
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(f)(a))(b);
              };
          };
      };
  };
  var lift3 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(f)(a))(b))(c);
                  };
              };
          };
      };
  };
  var lift4 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(f)(a))(b))(c))(d);
                      };
                  };
              };
          };
      };
  };
  var lift5 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return apply(dictApply)(apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(f)(a))(b))(c))(d))(e);
                          };
                      };
                  };
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
  exports["lift3"] = lift3;
  exports["lift4"] = lift4;
  exports["lift5"] = lift5;
  exports["applyFn"] = applyFn;
  exports["applyArray"] = applyArray;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (__superclass_Control$dotApply$dotApply_0, pure) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 63, column 1 - line 63, column 19: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 58, column 1 - line 58, column 16: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  };
  var applicativeFn = new Applicative(function () {
      return Control_Apply.applyFn;
  }, function (x) {
      return function (v) {
          return x;
      };
  });
  var applicativeArray = new Applicative(function () {
      return Control_Apply.applyArray;
  }, function (x) {
      return [ x ];
  });
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["unless"] = unless;
  exports["when"] = when;
  exports["applicativeFn"] = applicativeFn;
  exports["applicativeArray"] = applicativeArray;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];        
  var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
      this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
      this.empty = empty;
  };
  var plusArray = new Plus(function () {
      return Control_Alt.altArray;
  }, [  ]);
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
  exports["plusArray"] = plusArray;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];        
  var Alternative = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotPlus$dotPlus_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
  };
  var alternativeArray = new Alternative(function () {
      return Control_Applicative.applicativeArray;
  }, function () {
      return Control_Plus.plusArray;
  });
  exports["Alternative"] = Alternative;
  exports["alternativeArray"] = alternativeArray;
})(PS["Control.Alternative"] = PS["Control.Alternative"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Category = PS["Control.Category"];        
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var rmap = function (dictBifunctor) {
      return bimap(dictBifunctor)(Control_Category.id(Control_Category.categoryFn));
  };
  exports["Bifunctor"] = Bifunctor;
  exports["bimap"] = bimap;
  exports["lmap"] = lmap;
  exports["rmap"] = rmap;
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Control_Category = PS["Control.Category"];        
  var Biapply = function (__superclass_Data$dotBifunctor$dotBifunctor_0, biapply) {
      this["__superclass_Data.Bifunctor.Bifunctor_0"] = __superclass_Data$dotBifunctor$dotBifunctor_0;
      this.biapply = biapply;
  };
  var biapply = function (dict) {
      return dict.biapply;
  };
  var biapplyFirst = function (dictBiapply) {
      return function (a) {
          return function (b) {
              return biapply(dictBiapply)(Control_Category.id(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(Data_Function["const"](Control_Category.id(Control_Category.categoryFn))))(a))(b);
          };
      };
  };
  var biapplySecond = function (dictBiapply) {
      return function (a) {
          return function (b) {
              return biapply(dictBiapply)(Control_Category.id(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(Data_Function["const"])(Data_Function["const"]))(a))(b);
          };
      };
  };
  var bilift2 = function (dictBiapply) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return function (b) {
                      return biapply(dictBiapply)(Control_Category.id(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(f)(g))(a))(b);
                  };
              };
          };
      };
  };
  var bilift3 = function (dictBiapply) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return function (b) {
                      return function (c) {
                          return biapply(dictBiapply)(biapply(dictBiapply)(Control_Category.id(Control_Category.categoryFn)(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(f)(g))(a))(b))(c);
                      };
                  };
              };
          };
      };
  };
  exports["Biapply"] = Biapply;
  exports["biapply"] = biapply;
  exports["biapplyFirst"] = biapplyFirst;
  exports["biapplySecond"] = biapplySecond;
  exports["bilift2"] = bilift2;
  exports["bilift3"] = bilift3;
})(PS["Control.Biapply"] = PS["Control.Biapply"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Biapply = PS["Control.Biapply"];        
  var Biapplicative = function (__superclass_Control$dotBiapply$dotBiapply_0, bipure) {
      this["__superclass_Control.Biapply.Biapply_0"] = __superclass_Control$dotBiapply$dotBiapply_0;
      this.bipure = bipure;
  };
  var bipure = function (dict) {
      return dict.bipure;
  };
  exports["Biapplicative"] = Biapplicative;
  exports["bipure"] = bipure;
})(PS["Control.Biapplicative"] = PS["Control.Biapplicative"] || {});
(function(exports) {
    "use strict";

  // module Control.Bind

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Bind = function (__superclass_Control$dotApply$dotApply_0, bind) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.bind = bind;
  };
  var bindFn = new Bind(function () {
      return Control_Apply.applyFn;
  }, function (m) {
      return function (f) {
          return function (x) {
              return f(m(x))(x);
          };
      };
  });
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  };
  var ifM = function (dictBind) {
      return function (cond) {
          return function (t) {
              return function (f) {
                  return bind(dictBind)(cond)(function (cond$prime) {
                      if (cond$prime) {
                          return t;
                      };
                      if (!cond$prime) {
                          return f;
                      };
                      throw new Error("Failed pattern match at Control.Bind line 103, column 35 - line 103, column 56: " + [ cond$prime.constructor.name ]);
                  });
              };
          };
      };
  };
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["composeKleisli"] = composeKleisli;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["ifM"] = ifM;
  exports["join"] = join;
  exports["bindFn"] = bindFn;
  exports["bindArray"] = bindArray;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Extend = function (__superclass_Data$dotFunctor$dotFunctor_0, extend) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.extend = extend;
  };
  var extendFn = function (dictSemigroup) {
      return new Extend(function () {
          return Data_Functor.functorFn;
      }, function (f) {
          return function (g) {
              return function (w) {
                  return f(function (w$prime) {
                      return g(Data_Semigroup.append(dictSemigroup)(w)(w$prime));
                  });
              };
          };
      });
  };
  var extend = function (dict) {
      return dict.extend;
  };
  var extendFlipped = function (dictExtend) {
      return function (w) {
          return function (f) {
              return extend(dictExtend)(f)(w);
          };
      };
  };
  var duplicate = function (dictExtend) {
      return extend(dictExtend)(Control_Category.id(Control_Category.categoryFn));
  };
  var composeCoKleisliFlipped = function (dictExtend) {
      return function (f) {
          return function (g) {
              return function (w) {
                  return f(extend(dictExtend)(g)(w));
              };
          };
      };
  };
  var composeCoKleisli = function (dictExtend) {
      return function (f) {
          return function (g) {
              return function (w) {
                  return g(extend(dictExtend)(f)(w));
              };
          };
      };
  };
  exports["Extend"] = Extend;
  exports["composeCoKleisli"] = composeCoKleisli;
  exports["composeCoKleisliFlipped"] = composeCoKleisliFlipped;
  exports["duplicate"] = duplicate;
  exports["extend"] = extend;
  exports["extendFlipped"] = extendFlipped;
  exports["extendFn"] = extendFn;
})(PS["Control.Extend"] = PS["Control.Extend"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor = PS["Data.Functor"];        
  var Comonad = function (__superclass_Control$dotExtend$dotExtend_0, extract) {
      this["__superclass_Control.Extend.Extend_0"] = __superclass_Control$dotExtend$dotExtend_0;
      this.extract = extract;
  };
  var extract = function (dict) {
      return dict.extract;
  };
  exports["Comonad"] = Comonad;
  exports["extract"] = extract;
})(PS["Control.Comonad"] = PS["Control.Comonad"] || {});
(function(exports) {
    "use strict";

  // module Control.Monad.Eff

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };

  exports.untilE = function (f) {
    return function () {
      while (!f());
      return {};
    };
  };

  exports.whileE = function (f) {
    return function (a) {
      return function () {
        while (f()) {
          a();
        }
        return {};
      };
    };
  };

  exports.forE = function (lo) {
    return function (hi) {
      return function (f) {
        return function () {
          for (var i = lo; i < hi; i++) {
            f(i)();
          }
        };
      };
    };
  };

  exports.foreachE = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];        
  var Monad = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotBind$dotBind_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Bind.Bind_1"] = __superclass_Control$dotBind$dotBind_1;
  };
  var monadFn = new Monad(function () {
      return Control_Applicative.applicativeFn;
  }, function () {
      return Control_Bind.bindFn;
  });
  var monadArray = new Monad(function () {
      return Control_Applicative.applicativeArray;
  }, function () {
      return Control_Bind.bindArray;
  });
  var liftM1 = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(a)(function (v) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(f(v));
              });
          };
      };
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f)(function (v) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
  exports["liftM1"] = liftM1;
  exports["monadFn"] = monadFn;
  exports["monadArray"] = monadArray;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["forE"] = $foreign.forE;
  exports["foreachE"] = $foreign.foreachE;
  exports["runPure"] = $foreign.runPure;
  exports["untilE"] = $foreign.untilE;
  exports["whileE"] = $foreign.whileE;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  // module Control.Monad.Eff.Unsafe

  exports.unsafeInterleaveEff = function (f) {
    return f;
  };
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var unsafePerformEff = function ($0) {
      return Control_Monad_Eff.runPure($foreign.unsafeInterleaveEff($0));
  };
  exports["unsafePerformEff"] = unsafePerformEff;
  exports["unsafeInterleaveEff"] = $foreign.unsafeInterleaveEff;
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.ST

  exports.newSTRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readSTRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifySTRef = function (ref) {
    return function (f) {
      return function () {
        /* jshint boss: true */
        return ref.value = f(ref.value);
      };
    };
  };

  exports.writeSTRef = function (ref) {
    return function (a) {
      return function () {
        /* jshint boss: true */
        return ref.value = a;
      };
    };
  };

  exports.runST = function (f) {
    return f;
  };
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Control.Monad.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var pureST = function (st) {
      return Control_Monad_Eff.runPure($foreign.runST(st));
  };
  exports["pureST"] = pureST;
  exports["modifySTRef"] = $foreign.modifySTRef;
  exports["newSTRef"] = $foreign.newSTRef;
  exports["readSTRef"] = $foreign.readSTRef;
  exports["runST"] = $foreign.runST;
  exports["writeSTRef"] = $foreign.writeSTRef;
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
    "use strict";

  // module Data.HeytingAlgebra

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Unit = PS["Data.Unit"];        
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var heytingAlgebraUnit = new HeytingAlgebra(function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  }, function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  }, Data_Unit.unit, function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  }, function (v) {
      return Data_Unit.unit;
  }, Data_Unit.unit);
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  var heytingAlgebraFunction = function (dictHeytingAlgebra) {
      return new HeytingAlgebra(function (f) {
          return function (g) {
              return function (a) {
                  return conj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (g) {
              return function (a) {
                  return disj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (v) {
          return ff(dictHeytingAlgebra);
      }, function (f) {
          return function (g) {
              return function (a) {
                  return implies(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (a) {
              return not(dictHeytingAlgebra)(f(a));
          };
      }, function (v) {
          return tt(dictHeytingAlgebra);
      });
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["not"] = not;
  exports["tt"] = tt;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
  exports["heytingAlgebraUnit"] = heytingAlgebraUnit;
  exports["heytingAlgebraFunction"] = heytingAlgebraFunction;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Unit = PS["Data.Unit"];        
  var BooleanAlgebra = function (__superclass_Data$dotHeytingAlgebra$dotHeytingAlgebra_0) {
      this["__superclass_Data.HeytingAlgebra.HeytingAlgebra_0"] = __superclass_Data$dotHeytingAlgebra$dotHeytingAlgebra_0;
  };
  var booleanAlgebraUnit = new BooleanAlgebra(function () {
      return Data_HeytingAlgebra.heytingAlgebraUnit;
  });
  var booleanAlgebraBoolean = new BooleanAlgebra(function () {
      return Data_HeytingAlgebra.heytingAlgebraBoolean;
  });
  exports["BooleanAlgebra"] = BooleanAlgebra;
  exports["booleanAlgebraBoolean"] = booleanAlgebraBoolean;
  exports["booleanAlgebraUnit"] = booleanAlgebraUnit;
})(PS["Data.BooleanAlgebra"] = PS["Data.BooleanAlgebra"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];        
  var Monoid = function (__superclass_Data$dotSemigroup$dotSemigroup_0, mempty) {
      this["__superclass_Data.Semigroup.Semigroup_0"] = __superclass_Data$dotSemigroup$dotSemigroup_0;
      this.mempty = mempty;
  };
  var monoidUnit = new Monoid(function () {
      return Data_Semigroup.semigroupUnit;
  }, Data_Unit.unit);
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidFn = function (dictMonoid) {
      return new Monoid(function () {
          return Data_Semigroup.semigroupFn(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]());
      }, Data_Function["const"](mempty(dictMonoid)));
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidUnit"] = monoidUnit;
  exports["monoidFn"] = monoidFn;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
    "use strict";

  // module Data.Bounded

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
    "use strict";

  // module Data.Ord

  exports.ordArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        var i = 0;
        var xlen = xs.length;
        var ylen = ys.length;
        while (i < xlen && i < ylen) {
          var x = xs[i];
          var y = ys[i];
          var o = f(x)(y);
          if (o !== 0) {
            return o;
          }
          i++;
        }
        if (xlen === ylen) {
          return 0;
        } else if (xlen > ylen) {
          return -1;
        } else {
          return 1;
        }
      };
    };
  };
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
    "use strict";

  // module Data.Eq

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.refIneq = function (r1) {
    return function (r2) {
      return r1 !== r2;
    };
  };

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };
  var eqVoid = new Eq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var eqUnit = new Eq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var eqString = new Eq($foreign.refEq);
  var eqNumber = new Eq($foreign.refEq);
  var eqInt = new Eq($foreign.refEq);
  var eqChar = new Eq($foreign.refEq);
  var eqBoolean = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  var eqArray = function (dictEq) {
      return new Eq($foreign.eqArrayImpl(eq(dictEq)));
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
  exports["eqUnit"] = eqUnit;
  exports["eqVoid"] = eqVoid;
  exports["eqArray"] = eqArray;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  // module Data.Ord.Unsafe

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x > y ? gt : eq;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var showOrdering = new Data_Show.Show(function (v) {
      if (v instanceof LT) {
          return "LT";
      };
      if (v instanceof GT) {
          return "GT";
      };
      if (v instanceof EQ) {
          return "EQ";
      };
      throw new Error("Failed pattern match at Data.Ordering line 27, column 3 - line 28, column 3: " + [ v.constructor.name ]);
  });
  var semigroupOrdering = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof LT) {
              return LT.value;
          };
          if (v instanceof GT) {
              return GT.value;
          };
          if (v instanceof EQ) {
              return v1;
          };
          throw new Error("Failed pattern match at Data.Ordering line 22, column 3 - line 22, column 19: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var invert = function (v) {
      if (v instanceof GT) {
          return LT.value;
      };
      if (v instanceof EQ) {
          return EQ.value;
      };
      if (v instanceof LT) {
          return GT.value;
      };
      throw new Error("Failed pattern match at Data.Ordering line 34, column 1 - line 34, column 15: " + [ v.constructor.name ]);
  };
  var eqOrdering = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return true;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return true;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return true;
          };
          return false;
      };
  });
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["invert"] = invert;
  exports["eqOrdering"] = eqOrdering;
  exports["semigroupOrdering"] = semigroupOrdering;
  exports["showOrdering"] = showOrdering;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  // module Data.Ring

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };

  exports.numSub = function (n1) {
    return function (n2) {
      return n1 - n2;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
    "use strict";

  // module Data.Semiring

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };
  var semiringUnit = new Semiring(function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  }, function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  }, Data_Unit.unit, Data_Unit.unit);
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["zero"] = zero;
  exports["semiringInt"] = semiringInt;
  exports["semiringNumber"] = semiringNumber;
  exports["semiringUnit"] = semiringUnit;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Ring = function (__superclass_Data$dotSemiring$dotSemiring_0, sub) {
      this["__superclass_Data.Semiring.Semiring_0"] = __superclass_Data$dotSemiring$dotSemiring_0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };
  var ringUnit = new Ring(function () {
      return Data_Semiring.semiringUnit;
  }, function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  });
  var ringNumber = new Ring(function () {
      return Data_Semiring.semiringNumber;
  }, $foreign.numSub);
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing["__superclass_Data.Semiring.Semiring_0"]()))(a);
      };
  };
  exports["Ring"] = Ring;
  exports["negate"] = negate;
  exports["sub"] = sub;
  exports["ringInt"] = ringInt;
  exports["ringNumber"] = ringNumber;
  exports["ringUnit"] = ringUnit;
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Data_Semiring = PS["Data.Semiring"];        
  var Ord = function (__superclass_Data$dotEq$dotEq_0, compare) {
      this["__superclass_Data.Eq.Eq_0"] = __superclass_Data$dotEq$dotEq_0;
      this.compare = compare;
  };
  var ordVoid = new Ord(function () {
      return Data_Eq.eqVoid;
  }, function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  });
  var ordUnit = new Ord(function () {
      return Data_Eq.eqUnit;
  }, function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  });
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordOrdering = new Ord(function () {
      return Data_Ordering.eqOrdering;
  }, function (v) {
      return function (v1) {
          if (v instanceof Data_Ordering.LT && v1 instanceof Data_Ordering.LT) {
              return Data_Ordering.EQ.value;
          };
          if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.EQ) {
              return Data_Ordering.EQ.value;
          };
          if (v instanceof Data_Ordering.GT && v1 instanceof Data_Ordering.GT) {
              return Data_Ordering.EQ.value;
          };
          if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.LT) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.GT) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          throw new Error("Failed pattern match at Data.Ord line 68, column 3 - line 68, column 21: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordBoolean = new Ord(function () {
      return Data_Eq.eqBoolean;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  var comparing = function (dictOrd) {
      return function (f) {
          return Data_Function.on(compare(dictOrd))(f);
      };
  };
  var greaterThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $22 = compare(dictOrd)(a1)(a2);
              if ($22 instanceof Data_Ordering.GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var greaterThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $23 = compare(dictOrd)(a1)(a2);
              if ($23 instanceof Data_Ordering.LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var signum = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $24 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing["__superclass_Data.Semiring.Semiring_0"]()));
              if ($24) {
                  return Data_Semiring.one(dictRing["__superclass_Data.Semiring.Semiring_0"]());
              };
              if (!$24) {
                  return Data_Ring.negate(dictRing)(Data_Semiring.one(dictRing["__superclass_Data.Semiring.Semiring_0"]()));
              };
              throw new Error("Failed pattern match at Data.Ord line 163, column 12 - line 163, column 46: " + [ $24.constructor.name ]);
          };
      };
  };
  var lessThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $25 = compare(dictOrd)(a1)(a2);
              if ($25 instanceof Data_Ordering.LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var lessThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $26 = compare(dictOrd)(a1)(a2);
              if ($26 instanceof Data_Ordering.GT) {
                  return false;
              };
              return true;
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var $27 = compare(dictOrd)(x)(y);
              if ($27 instanceof Data_Ordering.LT) {
                  return y;
              };
              if ($27 instanceof Data_Ordering.EQ) {
                  return x;
              };
              if ($27 instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord line 122, column 3 - line 125, column 12: " + [ $27.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var $28 = compare(dictOrd)(x)(y);
              if ($28 instanceof Data_Ordering.LT) {
                  return x;
              };
              if ($28 instanceof Data_Ordering.EQ) {
                  return x;
              };
              if ($28 instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 113, column 3 - line 116, column 12: " + [ $28.constructor.name ]);
          };
      };
  };
  var ordArray = function (dictOrd) {
      return new Ord(function () {
          return Data_Eq.eqArray(dictOrd["__superclass_Data.Eq.Eq_0"]());
      }, (function () {
          var toDelta = function (x) {
              return function (y) {
                  var $29 = compare(dictOrd)(x)(y);
                  if ($29 instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if ($29 instanceof Data_Ordering.LT) {
                      return 1;
                  };
                  if ($29 instanceof Data_Ordering.GT) {
                      return -1;
                  };
                  throw new Error("Failed pattern match at Data.Ord line 60, column 7 - line 65, column 1: " + [ $29.constructor.name ]);
              };
          };
          return function (xs) {
              return function (ys) {
                  return compare(ordInt)(0)($foreign.ordArrayImpl(toDelta)(xs)(ys));
              };
          };
      })());
  };
  var clamp = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  return min(dictOrd)(hi)(max(dictOrd)(low)(x));
              };
          };
      };
  };
  var between = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  if (lessThan(dictOrd)(x)(low)) {
                      return false;
                  };
                  if (greaterThan(dictOrd)(x)(hi)) {
                      return false;
                  };
                  if (true) {
                      return true;
                  };
                  throw new Error("Failed pattern match at Data.Ord line 150, column 1 - line 153, column 16: " + [ low.constructor.name, hi.constructor.name, x.constructor.name ]);
              };
          };
      };
  };
  var abs = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $33 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing["__superclass_Data.Semiring.Semiring_0"]()));
              if ($33) {
                  return x;
              };
              if (!$33) {
                  return Data_Ring.negate(dictRing)(x);
              };
              throw new Error("Failed pattern match at Data.Ord line 158, column 9 - line 158, column 42: " + [ $33.constructor.name ]);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["abs"] = abs;
  exports["between"] = between;
  exports["clamp"] = clamp;
  exports["compare"] = compare;
  exports["comparing"] = comparing;
  exports["greaterThan"] = greaterThan;
  exports["greaterThanOrEq"] = greaterThanOrEq;
  exports["lessThan"] = lessThan;
  exports["lessThanOrEq"] = lessThanOrEq;
  exports["max"] = max;
  exports["min"] = min;
  exports["signum"] = signum;
  exports["ordBoolean"] = ordBoolean;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
  exports["ordUnit"] = ordUnit;
  exports["ordVoid"] = ordVoid;
  exports["ordArray"] = ordArray;
  exports["ordOrdering"] = ordOrdering;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Ordering = PS["Data.Ordering"];        
  var Bounded = function (__superclass_Data$dotOrd$dotOrd_0, bottom, top) {
      this["__superclass_Data.Ord.Ord_0"] = __superclass_Data$dotOrd$dotOrd_0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };
  var boundedUnit = new Bounded(function () {
      return Data_Ord.ordUnit;
  }, Data_Unit.unit, Data_Unit.unit);
  var boundedOrdering = new Bounded(function () {
      return Data_Ord.ordOrdering;
  }, Data_Ordering.LT.value, Data_Ordering.GT.value);
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var boundedBoolean = new Bounded(function () {
      return Data_Ord.ordBoolean;
  }, false, true);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedBoolean"] = boundedBoolean;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
  exports["boundedOrdering"] = boundedOrdering;
  exports["boundedUnit"] = boundedUnit;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Invariant = function (imap) {
      this.imap = imap;
  };
  var imapF = function (dictFunctor) {
      return function ($1) {
          return Data_Function["const"](Data_Functor.map(dictFunctor)($1));
      };
  };
  var invariantArray = new Invariant(imapF(Data_Functor.functorArray));
  var invariantFn = new Invariant(imapF(Data_Functor.functorFn));
  var imap = function (dict) {
      return dict.imap;
  };
  exports["Invariant"] = Invariant;
  exports["imap"] = imap;
  exports["imapF"] = imapF;
  exports["invariantFn"] = invariantFn;
  exports["invariantArray"] = invariantArray;
})(PS["Data.Functor.Invariant"] = PS["Data.Functor.Invariant"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];        
  var Conj = function (x) {
      return x;
  };
  var showConj = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Conj " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semiringConj = function (dictHeytingAlgebra) {
      return new Data_Semiring.Semiring(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra), Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var runConj = function (v) {
      return v;
  };
  var monoidConj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  var invariantConj = new Data_Functor_Invariant.Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var functorConj = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendConj = new Control_Extend.Extend(function () {
      return functorConj;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqConj = function (dictEq) {
      return new Data_Eq.Eq(function (v) {
          return function (v1) {
              return Data_Eq.eq(dictEq)(v)(v1);
          };
      });
  };
  var ordConj = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqConj(dictOrd["__superclass_Data.Eq.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Data_Ord.compare(dictOrd)(v)(v1);
          };
      });
  };
  var comonadConj = new Control_Comonad.Comonad(function () {
      return extendConj;
  }, runConj);
  var boundedConj = function (dictBounded) {
      return new Data_Bounded.Bounded(function () {
          return ordConj(dictBounded["__superclass_Data.Ord.Ord_0"]());
      }, Data_Bounded.bottom(dictBounded), Data_Bounded.top(dictBounded));
  };
  var applyConj = new Control_Apply.Apply(function () {
      return functorConj;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindConj = new Control_Bind.Bind(function () {
      return applyConj;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeConj = new Control_Applicative.Applicative(function () {
      return applyConj;
  }, Conj);
  var monadConj = new Control_Monad.Monad(function () {
      return applicativeConj;
  }, function () {
      return bindConj;
  });
  exports["Conj"] = Conj;
  exports["runConj"] = runConj;
  exports["eqConj"] = eqConj;
  exports["ordConj"] = ordConj;
  exports["boundedConj"] = boundedConj;
  exports["functorConj"] = functorConj;
  exports["invariantConj"] = invariantConj;
  exports["applyConj"] = applyConj;
  exports["applicativeConj"] = applicativeConj;
  exports["bindConj"] = bindConj;
  exports["monadConj"] = monadConj;
  exports["extendConj"] = extendConj;
  exports["comonadConj"] = comonadConj;
  exports["showConj"] = showConj;
  exports["semigroupConj"] = semigroupConj;
  exports["monoidConj"] = monoidConj;
  exports["semiringConj"] = semiringConj;
})(PS["Data.Monoid.Conj"] = PS["Data.Monoid.Conj"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];        
  var Disj = function (x) {
      return x;
  };
  var showDisj = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Disj " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semiringDisj = function (dictHeytingAlgebra) {
      return new Data_Semiring.Semiring(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra), Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var runDisj = function (v) {
      return v;
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  var functorDisj = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendDisj = new Control_Extend.Extend(function () {
      return functorDisj;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqDisj = function (dictEq) {
      return new Data_Eq.Eq(function (v) {
          return function (v1) {
              return Data_Eq.eq(dictEq)(v)(v1);
          };
      });
  };
  var ordDisj = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqDisj(dictOrd["__superclass_Data.Eq.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Data_Ord.compare(dictOrd)(v)(v1);
          };
      });
  };
  var comonadDisj = new Control_Comonad.Comonad(function () {
      return extendDisj;
  }, runDisj);
  var boundedDisj = function (dictBounded) {
      return new Data_Bounded.Bounded(function () {
          return ordDisj(dictBounded["__superclass_Data.Ord.Ord_0"]());
      }, Data_Bounded.bottom(dictBounded), Data_Bounded.top(dictBounded));
  };
  var applyDisj = new Control_Apply.Apply(function () {
      return functorDisj;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindDisj = new Control_Bind.Bind(function () {
      return applyDisj;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeDisj = new Control_Applicative.Applicative(function () {
      return applyDisj;
  }, Disj);
  var monadDisj = new Control_Monad.Monad(function () {
      return applicativeDisj;
  }, function () {
      return bindDisj;
  });
  exports["Disj"] = Disj;
  exports["runDisj"] = runDisj;
  exports["eqDisj"] = eqDisj;
  exports["ordDisj"] = ordDisj;
  exports["boundedDisj"] = boundedDisj;
  exports["functorDisj"] = functorDisj;
  exports["applyDisj"] = applyDisj;
  exports["applicativeDisj"] = applicativeDisj;
  exports["bindDisj"] = bindDisj;
  exports["monadDisj"] = monadDisj;
  exports["extendDisj"] = extendDisj;
  exports["comonadDisj"] = comonadDisj;
  exports["showDisj"] = showDisj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
  exports["semiringDisj"] = semiringDisj;
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var Dual = function (x) {
      return x;
  };
  var showDual = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Dual " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupDual = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Semigroup.append(dictSemigroup)(v1)(v);
          };
      });
  };
  var runDual = function (v) {
      return v;
  };
  var monoidDual = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDual(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]());
      }, Data_Monoid.mempty(dictMonoid));
  };
  var invariantDual = new Data_Functor_Invariant.Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var functorDual = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendDual = new Control_Extend.Extend(function () {
      return functorDual;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqDual = function (dictEq) {
      return new Data_Eq.Eq(function (v) {
          return function (v1) {
              return Data_Eq.eq(dictEq)(v)(v1);
          };
      });
  };
  var ordDual = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqDual(dictOrd["__superclass_Data.Eq.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Data_Ord.compare(dictOrd)(v)(v1);
          };
      });
  };
  var comonadDual = new Control_Comonad.Comonad(function () {
      return extendDual;
  }, runDual);
  var boundedDual = function (dictBounded) {
      return new Data_Bounded.Bounded(function () {
          return ordDual(dictBounded["__superclass_Data.Ord.Ord_0"]());
      }, Data_Bounded.bottom(dictBounded), Data_Bounded.top(dictBounded));
  };
  var applyDual = new Control_Apply.Apply(function () {
      return functorDual;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindDual = new Control_Bind.Bind(function () {
      return applyDual;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeDual = new Control_Applicative.Applicative(function () {
      return applyDual;
  }, Dual);
  var monadDual = new Control_Monad.Monad(function () {
      return applicativeDual;
  }, function () {
      return bindDual;
  });
  exports["Dual"] = Dual;
  exports["runDual"] = runDual;
  exports["eqDual"] = eqDual;
  exports["ordDual"] = ordDual;
  exports["boundedDual"] = boundedDual;
  exports["functorDual"] = functorDual;
  exports["invariantDual"] = invariantDual;
  exports["applyDual"] = applyDual;
  exports["applicativeDual"] = applicativeDual;
  exports["bindDual"] = bindDual;
  exports["monadDual"] = monadDual;
  exports["extendDual"] = extendDual;
  exports["comonadDual"] = comonadDual;
  exports["showDual"] = showDual;
  exports["semigroupDual"] = semigroupDual;
  exports["monoidDual"] = monoidDual;
})(PS["Data.Monoid.Dual"] = PS["Data.Monoid.Dual"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];        
  var Endo = function (x) {
      return x;
  };
  var semigroupEndo = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return function ($10) {
              return v(v1($10));
          };
      };
  });
  var runEndo = function (v) {
      return v;
  };
  var monoidEndo = new Data_Monoid.Monoid(function () {
      return semigroupEndo;
  }, Control_Category.id(Control_Category.categoryFn));
  var invariantEndo = new Data_Functor_Invariant.Invariant(function (ab) {
      return function (ba) {
          return function (v) {
              return function ($11) {
                  return ab(v(ba($11)));
              };
          };
      };
  });
  exports["Endo"] = Endo;
  exports["runEndo"] = runEndo;
  exports["invariantEndo"] = invariantEndo;
  exports["semigroupEndo"] = semigroupEndo;
  exports["monoidEndo"] = monoidEndo;
})(PS["Data.Monoid.Endo"] = PS["Data.Monoid.Endo"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Function = PS["Data.Function"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Bifoldable = function (bifoldMap, bifoldl, bifoldr) {
      this.bifoldMap = bifoldMap;
      this.bifoldl = bifoldl;
      this.bifoldr = bifoldr;
  };
  var bifoldr = function (dict) {
      return dict.bifoldr;
  };
  var bitraverse_ = function (dictBifoldable) {
      return function (dictApplicative) {
          return function (f) {
              return function (g) {
                  return bifoldr(dictBifoldable)(function ($18) {
                      return Control_Apply.applySecond(dictApplicative["__superclass_Control.Apply.Apply_0"]())(f($18));
                  })(function ($19) {
                      return Control_Apply.applySecond(dictApplicative["__superclass_Control.Apply.Apply_0"]())(g($19));
                  })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
              };
          };
      };
  };
  var bifor_ = function (dictBifoldable) {
      return function (dictApplicative) {
          return function (t) {
              return function (f) {
                  return function (g) {
                      return bitraverse_(dictBifoldable)(dictApplicative)(f)(g)(t);
                  };
              };
          };
      };
  };
  var bisequence_ = function (dictBifoldable) {
      return function (dictApplicative) {
          return bitraverse_(dictBifoldable)(dictApplicative)(Control_Category.id(Control_Category.categoryFn))(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var bifoldl = function (dict) {
      return dict.bifoldl;
  };
  var bifoldMapDefaultR = function (dictBifoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (g) {
                  return function (p) {
                      return bifoldr(dictBifoldable)(function ($20) {
                          return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f($20));
                      })(function ($21) {
                          return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(g($21));
                      })(Data_Monoid.mempty(dictMonoid))(p);
                  };
              };
          };
      };
  };
  var bifoldMapDefaultL = function (dictBifoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (g) {
                  return function (p) {
                      return bifoldl(dictBifoldable)(function (m) {
                          return function (a) {
                              return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(m)(f(a));
                          };
                      })(function (m) {
                          return function (b) {
                              return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(m)(g(b));
                          };
                      })(Data_Monoid.mempty(dictMonoid))(p);
                  };
              };
          };
      };
  };
  var bifoldMap = function (dict) {
      return dict.bifoldMap;
  };
  var bifoldlDefault = function (dictBifoldable) {
      return function (f) {
          return function (g) {
              return function (z) {
                  return function (p) {
                      return Data_Monoid_Endo.runEndo(Data_Monoid_Dual.runDual(bifoldMap(dictBifoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo))(function ($22) {
                          return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(f)($22)));
                      })(function ($23) {
                          return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(g)($23)));
                      })(p)))(z);
                  };
              };
          };
      };
  };
  var bifoldrDefault = function (dictBifoldable) {
      return function (f) {
          return function (g) {
              return function (z) {
                  return function (p) {
                      return Data_Monoid_Endo.runEndo(bifoldMap(dictBifoldable)(Data_Monoid_Endo.monoidEndo)(function ($24) {
                          return Data_Monoid_Endo.Endo(f($24));
                      })(function ($25) {
                          return Data_Monoid_Endo.Endo(g($25));
                      })(p))(z);
                  };
              };
          };
      };
  };
  var bifold = function (dictBifoldable) {
      return function (dictMonoid) {
          return bifoldMap(dictBifoldable)(dictMonoid)(Control_Category.id(Control_Category.categoryFn))(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var biany = function (dictBifoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function (q) {
                  return function ($26) {
                      return Data_Monoid_Disj.runDisj(bifoldMap(dictBifoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra["__superclass_Data.HeytingAlgebra.HeytingAlgebra_0"]()))(function ($27) {
                          return Data_Monoid_Disj.Disj(p($27));
                      })(function ($28) {
                          return Data_Monoid_Disj.Disj(q($28));
                      })($26));
                  };
              };
          };
      };
  };
  var biall = function (dictBifoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function (q) {
                  return function ($29) {
                      return Data_Monoid_Conj.runConj(bifoldMap(dictBifoldable)(Data_Monoid_Conj.monoidConj(dictBooleanAlgebra["__superclass_Data.HeytingAlgebra.HeytingAlgebra_0"]()))(function ($30) {
                          return Data_Monoid_Conj.Conj(p($30));
                      })(function ($31) {
                          return Data_Monoid_Conj.Conj(q($31));
                      })($29));
                  };
              };
          };
      };
  };
  exports["Bifoldable"] = Bifoldable;
  exports["biall"] = biall;
  exports["biany"] = biany;
  exports["bifold"] = bifold;
  exports["bifoldMap"] = bifoldMap;
  exports["bifoldMapDefaultL"] = bifoldMapDefaultL;
  exports["bifoldMapDefaultR"] = bifoldMapDefaultR;
  exports["bifoldl"] = bifoldl;
  exports["bifoldlDefault"] = bifoldlDefault;
  exports["bifoldr"] = bifoldr;
  exports["bifoldrDefault"] = bifoldrDefault;
  exports["bifor_"] = bifor_;
  exports["bisequence_"] = bisequence_;
  exports["bitraverse_"] = bitraverse_;
})(PS["Data.Bifoldable"] = PS["Data.Bifoldable"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];        
  var Bitraversable = function (__superclass_Data$dotBifoldable$dotBifoldable_1, __superclass_Data$dotBifunctor$dotBifunctor_0, bisequence, bitraverse) {
      this["__superclass_Data.Bifoldable.Bifoldable_1"] = __superclass_Data$dotBifoldable$dotBifoldable_1;
      this["__superclass_Data.Bifunctor.Bifunctor_0"] = __superclass_Data$dotBifunctor$dotBifunctor_0;
      this.bisequence = bisequence;
      this.bitraverse = bitraverse;
  };
  var bitraverse = function (dict) {
      return dict.bitraverse;
  };
  var bisequenceDefault = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (t) {
              return bitraverse(dictBitraversable)(dictApplicative)(Control_Category.id(Control_Category.categoryFn))(Control_Category.id(Control_Category.categoryFn))(t);
          };
      };
  };
  var bisequence = function (dict) {
      return dict.bisequence;
  };
  var bitraverseDefault = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (f) {
              return function (g) {
                  return function (t) {
                      return bisequence(dictBitraversable)(dictApplicative)(Data_Bifunctor.bimap(dictBitraversable["__superclass_Data.Bifunctor.Bifunctor_0"]())(f)(g)(t));
                  };
              };
          };
      };
  };
  var bifor = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (t) {
              return function (f) {
                  return function (g) {
                      return bitraverse(dictBitraversable)(dictApplicative)(f)(g)(t);
                  };
              };
          };
      };
  };
  exports["Bitraversable"] = Bitraversable;
  exports["bifor"] = bifor;
  exports["bisequence"] = bisequence;
  exports["bisequenceDefault"] = bisequenceDefault;
  exports["bitraverse"] = bitraverse;
  exports["bitraverseDefault"] = bitraverseDefault;
})(PS["Data.Bitraversable"] = PS["Data.Bitraversable"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var MonadZero = function (__superclass_Control$dotAlternative$dotAlternative_1, __superclass_Control$dotMonad$dotMonad_0) {
      this["__superclass_Control.Alternative.Alternative_1"] = __superclass_Control$dotAlternative$dotAlternative_1;
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
  };
  var monadZeroArray = new MonadZero(function () {
      return Control_Alternative.alternativeArray;
  }, function () {
      return Control_Monad.monadArray;
  });
  var guard = function (dictMonadZero) {
      return function (v) {
          if (v) {
              return Control_Applicative.pure((dictMonadZero["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Applicative.Applicative_0"]())(Data_Unit.unit);
          };
          if (!v) {
              return Control_Plus.empty((dictMonadZero["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Plus.Plus_1"]());
          };
          throw new Error("Failed pattern match at Control.MonadZero line 52, column 1 - line 52, column 23: " + [ v.constructor.name ]);
      };
  };
  exports["MonadZero"] = MonadZero;
  exports["guard"] = guard;
  exports["monadZeroArray"] = monadZeroArray;
})(PS["Control.MonadZero"] = PS["Control.MonadZero"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Category = PS["Control.Category"];        
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var showMaybe = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Just) {
              return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
          };
          if (v instanceof Nothing) {
              return "Nothing";
          };
          throw new Error("Failed pattern match at Data.Maybe line 220, column 3 - line 221, column 3: " + [ v.constructor.name ]);
      });
  };
  var semigroupMaybe = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              if (v instanceof Nothing) {
                  return v1;
              };
              if (v1 instanceof Nothing) {
                  return v;
              };
              if (v instanceof Just && v1 instanceof Just) {
                  return new Just(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Maybe line 186, column 3 - line 186, column 23: " + [ v.constructor.name, v1.constructor.name ]);
          };
      });
  };
  var monoidMaybe = function (dictSemigroup) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMaybe(dictSemigroup);
      }, Nothing.value);
  };
  var maybe$prime = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v(Data_Unit.unit);
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 245, column 1 - line 245, column 28: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 232, column 1 - line 232, column 22: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var invariantMaybe = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorMaybe));
  var fromMaybe$prime = function (a) {
      return maybe$prime(a)(Control_Category.id(Control_Category.categoryFn));
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.id(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar29) {
                  return $dollar29;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 283, column 1 - line 283, column 21: " + [ v.constructor.name ]);
          })());
      };
  };
  var extendMaybe = new Control_Extend.Extend(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v1 instanceof Nothing) {
              return Nothing.value;
          };
          return new Just(v(v1));
      };
  });
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (v) {
          return function (v1) {
              if (v instanceof Nothing && v1 instanceof Nothing) {
                  return true;
              };
              if (v instanceof Just && v1 instanceof Just) {
                  return Data_Eq.eq(dictEq)(v.value0)(v1.value0);
              };
              return false;
          };
      });
  };
  var ordMaybe = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqMaybe(dictOrd["__superclass_Data.Eq.Eq_0"]());
      }, function (v) {
          return function (v1) {
              if (v instanceof Just && v1 instanceof Just) {
                  return Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
              };
              if (v instanceof Nothing && v1 instanceof Nothing) {
                  return Data_Ordering.EQ.value;
              };
              if (v instanceof Nothing) {
                  return Data_Ordering.LT.value;
              };
              if (v1 instanceof Nothing) {
                  return Data_Ordering.GT.value;
              };
              throw new Error("Failed pattern match at Data.Maybe line 207, column 3 - line 207, column 42: " + [ v.constructor.name, v1.constructor.name ]);
          };
      });
  };
  var boundedMaybe = function (dictBounded) {
      return new Data_Bounded.Bounded(function () {
          return ordMaybe(dictBounded["__superclass_Data.Ord.Ord_0"]());
      }, Nothing.value, new Just(Data_Bounded.top(dictBounded)));
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 78, column 3 - line 78, column 31: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 137, column 3 - line 137, column 24: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  var monadMaybe = new Control_Monad.Monad(function () {
      return applicativeMaybe;
  }, function () {
      return bindMaybe;
  });
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nothing) {
              return v1;
          };
          return v;
      };
  });
  var plusMaybe = new Control_Plus.Plus(function () {
      return altMaybe;
  }, Nothing.value);
  var alternativeMaybe = new Control_Alternative.Alternative(function () {
      return applicativeMaybe;
  }, function () {
      return plusMaybe;
  });
  var monadZeroMaybe = new Control_MonadZero.MonadZero(function () {
      return alternativeMaybe;
  }, function () {
      return monadMaybe;
  });
  exports["Just"] = Just;
  exports["Nothing"] = Nothing;
  exports["fromJust"] = fromJust;
  exports["fromMaybe"] = fromMaybe;
  exports["fromMaybe'"] = fromMaybe$prime;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["maybe"] = maybe;
  exports["maybe'"] = maybe$prime;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;
  exports["plusMaybe"] = plusMaybe;
  exports["alternativeMaybe"] = alternativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["monadMaybe"] = monadMaybe;
  exports["monadZeroMaybe"] = monadZeroMaybe;
  exports["extendMaybe"] = extendMaybe;
  exports["invariantMaybe"] = invariantMaybe;
  exports["semigroupMaybe"] = semigroupMaybe;
  exports["monoidMaybe"] = monoidMaybe;
  exports["eqMaybe"] = eqMaybe;
  exports["ordMaybe"] = ordMaybe;
  exports["boundedMaybe"] = boundedMaybe;
  exports["showMaybe"] = showMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var First = function (x) {
      return x;
  };
  var showFirst = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "First (" + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
      });
  };
  var semigroupFirst = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Just) {
              return v;
          };
          return v1;
      };
  });
  var runFirst = function (v) {
      return v;
  };
  var monoidFirst = new Data_Monoid.Monoid(function () {
      return semigroupFirst;
  }, Data_Maybe.Nothing.value);
  var functorFirst = new Data_Functor.Functor(function (f) {
      return function (v) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(f)(v);
      };
  });
  var invariantFirst = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorFirst));
  var extendFirst = new Control_Extend.Extend(function () {
      return functorFirst;
  }, function (f) {
      return function (v) {
          return Control_Extend.extend(Data_Maybe.extendMaybe)(function ($34) {
              return f(First($34));
          })(v);
      };
  });
  var eqFirst = function (dictEq) {
      return new Data_Eq.Eq(function (v) {
          return function (v1) {
              return Data_Eq.eq(Data_Maybe.eqMaybe(dictEq))(v)(v1);
          };
      });
  };
  var ordFirst = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqFirst(dictOrd["__superclass_Data.Eq.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Data_Ord.compare(Data_Maybe.ordMaybe(dictOrd))(v)(v1);
          };
      });
  };
  var boundedFirst = function (dictBounded) {
      return new Data_Bounded.Bounded(function () {
          return ordFirst(dictBounded["__superclass_Data.Ord.Ord_0"]());
      }, Data_Bounded.bottom(Data_Maybe.boundedMaybe(dictBounded)), Data_Bounded.top(Data_Maybe.boundedMaybe(dictBounded)));
  };
  var applyFirst = new Control_Apply.Apply(function () {
      return functorFirst;
  }, function (v) {
      return function (v1) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(v)(v1);
      };
  });
  var bindFirst = new Control_Bind.Bind(function () {
      return applyFirst;
  }, function (v) {
      return function (f) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(v)(function ($35) {
              return runFirst(f($35));
          });
      };
  });
  var applicativeFirst = new Control_Applicative.Applicative(function () {
      return applyFirst;
  }, function ($36) {
      return First(Control_Applicative.pure(Data_Maybe.applicativeMaybe)($36));
  });
  var monadFirst = new Control_Monad.Monad(function () {
      return applicativeFirst;
  }, function () {
      return bindFirst;
  });
  exports["First"] = First;
  exports["runFirst"] = runFirst;
  exports["eqFirst"] = eqFirst;
  exports["ordFirst"] = ordFirst;
  exports["boundedFirst"] = boundedFirst;
  exports["functorFirst"] = functorFirst;
  exports["invariantFirst"] = invariantFirst;
  exports["applyFirst"] = applyFirst;
  exports["applicativeFirst"] = applicativeFirst;
  exports["bindFirst"] = bindFirst;
  exports["monadFirst"] = monadFirst;
  exports["extendFirst"] = extendFirst;
  exports["showFirst"] = showFirst;
  exports["semigroupFirst"] = semigroupFirst;
  exports["monoidFirst"] = monoidFirst;
})(PS["Data.Maybe.First"] = PS["Data.Maybe.First"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Last = function (x) {
      return x;
  };
  var showLast = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Last " + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
      });
  };
  var semigroupLast = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v1 instanceof Data_Maybe.Just) {
              return v1;
          };
          if (v1 instanceof Data_Maybe.Nothing) {
              return v;
          };
          throw new Error("Failed pattern match at Data.Maybe.Last line 67, column 3 - line 67, column 39: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var runLast = function (v) {
      return v;
  };
  var monoidLast = new Data_Monoid.Monoid(function () {
      return semigroupLast;
  }, Data_Maybe.Nothing.value);
  var functorLast = new Data_Functor.Functor(function (f) {
      return function (v) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(f)(v);
      };
  });
  var invariantLast = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorLast));
  var extendLast = new Control_Extend.Extend(function () {
      return functorLast;
  }, function (f) {
      return function (v) {
          return Control_Extend.extend(Data_Maybe.extendMaybe)(function ($34) {
              return f(Last($34));
          })(v);
      };
  });
  var eqLast = function (dictEq) {
      return new Data_Eq.Eq(function (v) {
          return function (v1) {
              return Data_Eq.eq(Data_Maybe.eqMaybe(dictEq))(v)(v1);
          };
      });
  };
  var ordLast = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqLast(dictOrd["__superclass_Data.Eq.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Data_Ord.compare(Data_Maybe.ordMaybe(dictOrd))(v)(v1);
          };
      });
  };
  var boundedLast = function (dictBounded) {
      return new Data_Bounded.Bounded(function () {
          return ordLast(dictBounded["__superclass_Data.Ord.Ord_0"]());
      }, Data_Bounded.bottom(Data_Maybe.boundedMaybe(dictBounded)), Data_Bounded.top(Data_Maybe.boundedMaybe(dictBounded)));
  };
  var applyLast = new Control_Apply.Apply(function () {
      return functorLast;
  }, function (v) {
      return function (v1) {
          return Control_Apply.apply(Data_Maybe.applyMaybe)(v)(v1);
      };
  });
  var bindLast = new Control_Bind.Bind(function () {
      return applyLast;
  }, function (v) {
      return function (f) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(v)(function ($35) {
              return runLast(f($35));
          });
      };
  });
  var applicativeLast = new Control_Applicative.Applicative(function () {
      return applyLast;
  }, function ($36) {
      return Last(Control_Applicative.pure(Data_Maybe.applicativeMaybe)($36));
  });
  var monadLast = new Control_Monad.Monad(function () {
      return applicativeLast;
  }, function () {
      return bindLast;
  });
  exports["Last"] = Last;
  exports["runLast"] = runLast;
  exports["eqLast"] = eqLast;
  exports["ordLast"] = ordLast;
  exports["boundedLast"] = boundedLast;
  exports["functorLast"] = functorLast;
  exports["invariantLast"] = invariantLast;
  exports["applyLast"] = applyLast;
  exports["applicativeLast"] = applicativeLast;
  exports["bindLast"] = bindLast;
  exports["monadLast"] = monadLast;
  exports["extendLast"] = extendLast;
  exports["showLast"] = showLast;
  exports["semigroupLast"] = semigroupLast;
  exports["monoidLast"] = monoidLast;
})(PS["Data.Maybe.Last"] = PS["Data.Maybe.Last"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];        
  var Additive = function (x) {
      return x;
  };
  var showAdditive = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Additive " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupAdditive = function (dictSemiring) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Semiring.add(dictSemiring)(v)(v1);
          };
      });
  };
  var runAdditive = function (v) {
      return v;
  };
  var monoidAdditive = function (dictSemiring) {
      return new Data_Monoid.Monoid(function () {
          return semigroupAdditive(dictSemiring);
      }, Data_Semiring.zero(dictSemiring));
  };
  var invariantAdditive = new Data_Functor_Invariant.Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var functorAdditive = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendAdditive = new Control_Extend.Extend(function () {
      return functorAdditive;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqAdditive = function (dictEq) {
      return new Data_Eq.Eq(function (v) {
          return function (v1) {
              return Data_Eq.eq(dictEq)(v)(v1);
          };
      });
  };
  var ordAdditive = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqAdditive(dictOrd["__superclass_Data.Eq.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Data_Ord.compare(dictOrd)(v)(v1);
          };
      });
  };
  var comonadAdditive = new Control_Comonad.Comonad(function () {
      return extendAdditive;
  }, runAdditive);
  var boundedAdditive = function (dictBounded) {
      return new Data_Bounded.Bounded(function () {
          return ordAdditive(dictBounded["__superclass_Data.Ord.Ord_0"]());
      }, Data_Bounded.bottom(dictBounded), Data_Bounded.top(dictBounded));
  };
  var applyAdditive = new Control_Apply.Apply(function () {
      return functorAdditive;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindAdditive = new Control_Bind.Bind(function () {
      return applyAdditive;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeAdditive = new Control_Applicative.Applicative(function () {
      return applyAdditive;
  }, Additive);
  var monadAdditive = new Control_Monad.Monad(function () {
      return applicativeAdditive;
  }, function () {
      return bindAdditive;
  });
  exports["Additive"] = Additive;
  exports["runAdditive"] = runAdditive;
  exports["eqAdditive"] = eqAdditive;
  exports["ordAdditive"] = ordAdditive;
  exports["boundedAdditive"] = boundedAdditive;
  exports["functorAdditive"] = functorAdditive;
  exports["invariantAdditive"] = invariantAdditive;
  exports["applyAdditive"] = applyAdditive;
  exports["applicativeAdditive"] = applicativeAdditive;
  exports["bindAdditive"] = bindAdditive;
  exports["monadAdditive"] = monadAdditive;
  exports["extendAdditive"] = extendAdditive;
  exports["comonadAdditive"] = comonadAdditive;
  exports["showAdditive"] = showAdditive;
  exports["semigroupAdditive"] = semigroupAdditive;
  exports["monoidAdditive"] = monoidAdditive;
})(PS["Data.Monoid.Additive"] = PS["Data.Monoid.Additive"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];        
  var Multiplicative = function (x) {
      return x;
  };
  var showMultiplicative = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Multiplicative " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semigroupMultiplicative = function (dictSemiring) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Semiring.mul(dictSemiring)(v)(v1);
          };
      });
  };
  var runMultiplicative = function (v) {
      return v;
  };
  var monoidMultiplicative = function (dictSemiring) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMultiplicative(dictSemiring);
      }, Data_Semiring.one(dictSemiring));
  };
  var invariantMultiplicative = new Data_Functor_Invariant.Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var functorMultiplicative = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendMultiplicative = new Control_Extend.Extend(function () {
      return functorMultiplicative;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqMultiplicative = function (dictEq) {
      return new Data_Eq.Eq(function (v) {
          return function (v1) {
              return Data_Eq.eq(dictEq)(v)(v1);
          };
      });
  };
  var ordMultiplicative = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqMultiplicative(dictOrd["__superclass_Data.Eq.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Data_Ord.compare(dictOrd)(v)(v1);
          };
      });
  };
  var comonadMultiplicative = new Control_Comonad.Comonad(function () {
      return extendMultiplicative;
  }, runMultiplicative);
  var boundedMultiplicative = function (dictBounded) {
      return new Data_Bounded.Bounded(function () {
          return ordMultiplicative(dictBounded["__superclass_Data.Ord.Ord_0"]());
      }, Data_Bounded.bottom(dictBounded), Data_Bounded.top(dictBounded));
  };
  var applyMultiplicative = new Control_Apply.Apply(function () {
      return functorMultiplicative;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindMultiplicative = new Control_Bind.Bind(function () {
      return applyMultiplicative;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeMultiplicative = new Control_Applicative.Applicative(function () {
      return applyMultiplicative;
  }, Multiplicative);
  var monadMultiplicative = new Control_Monad.Monad(function () {
      return applicativeMultiplicative;
  }, function () {
      return bindMultiplicative;
  });
  exports["Multiplicative"] = Multiplicative;
  exports["runMultiplicative"] = runMultiplicative;
  exports["eqMultiplicative"] = eqMultiplicative;
  exports["ordMultiplicative"] = ordMultiplicative;
  exports["boundedMultiplicative"] = boundedMultiplicative;
  exports["functorMultiplicative"] = functorMultiplicative;
  exports["invariantMultiplicative"] = invariantMultiplicative;
  exports["applyMultiplicative"] = applyMultiplicative;
  exports["applicativeMultiplicative"] = applicativeMultiplicative;
  exports["bindMultiplicative"] = bindMultiplicative;
  exports["monadMultiplicative"] = monadMultiplicative;
  exports["extendMultiplicative"] = extendMultiplicative;
  exports["comonadMultiplicative"] = comonadMultiplicative;
  exports["showMultiplicative"] = showMultiplicative;
  exports["semigroupMultiplicative"] = semigroupMultiplicative;
  exports["monoidMultiplicative"] = monoidMultiplicative;
})(PS["Data.Monoid.Multiplicative"] = PS["Data.Monoid.Multiplicative"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Plus = PS["Control.Plus"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var oneOf = function (dictFoldable) {
      return function (dictPlus) {
          return foldr(dictFoldable)(Control_Alt.alt(dictPlus["__superclass_Control.Alt.Alt_0"]()))(Control_Plus.empty(dictPlus));
      };
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($164) {
                  return Control_Apply.applySecond(dictApplicative["__superclass_Control.Apply.Apply_0"]())(f($164));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var sequence_ = function (dictApplicative) {
      return function (dictFoldable) {
          return traverse_(dictApplicative)(dictFoldable)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false, 
                                  acc: x
                              };
                          };
                          return {
                              init: false, 
                              acc: Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(v.acc)(Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true, 
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  };
  var maximumBy = function (dictFoldable) {
      return function (cmp) {
          var max$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $89 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.GT.value);
                          if ($89) {
                              return v.value0;
                          };
                          if (!$89) {
                              return v1;
                          };
                          throw new Error("Failed pattern match at Data.Foldable line 290, column 27 - line 290, column 57: " + [ $89.constructor.name ]);
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable line 289, column 3 - line 289, column 27: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(max$prime)(Data_Maybe.Nothing.value);
      };
  };
  var maximum = function (dictOrd) {
      return function (dictFoldable) {
          return maximumBy(dictFoldable)(Data_Ord.compare(dictOrd));
      };
  };
  var minimumBy = function (dictFoldable) {
      return function (cmp) {
          var min$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $93 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.LT.value);
                          if ($93) {
                              return v.value0;
                          };
                          if (!$93) {
                              return v1;
                          };
                          throw new Error("Failed pattern match at Data.Foldable line 303, column 27 - line 303, column 57: " + [ $93.constructor.name ]);
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable line 302, column 3 - line 302, column 27: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(min$prime)(Data_Maybe.Nothing.value);
      };
  };
  var minimum = function (dictOrd) {
      return function (dictFoldable) {
          return minimumBy(dictFoldable)(Data_Ord.compare(dictOrd));
      };
  };
  var product = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Data_Semiring.mul(dictSemiring))(Data_Semiring.one(dictSemiring));
      };
  };
  var sum = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring));
      };
  };
  var foldableMultiplicative = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 132, column 3 - line 132, column 30: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 130, column 3 - line 130, column 25: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable line 128, column 3 - line 128, column 25: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldableDual = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableDisj = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableConj = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableAdditive = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMapDefaultL = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldl(dictFoldable)(function (acc) {
                      return function (x) {
                          return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var foldableFirst = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return foldMap(foldableMaybe)(dictMonoid)(f)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldl(foldableMaybe)(f)(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldr(foldableMaybe)(f)(z)(v);
          };
      };
  });
  var foldableLast = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return foldMap(foldableMaybe)(dictMonoid)(f)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldl(foldableMaybe)(f)(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldr(foldableMaybe)(f)(z)(v);
          };
      };
  });
  var foldlDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Monoid_Endo.runEndo(Data_Monoid_Dual.runDual(foldMap(dictFoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo))(function ($165) {
                      return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Data_Function.flip(c)($165)));
                  })(xs)))(u);
              };
          };
      };
  };
  var foldrDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Monoid_Endo.runEndo(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo)(function ($166) {
                      return Data_Monoid_Endo.Endo(c($166));
                  })(xs))(u);
              };
          };
      };
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var any = function (dictFoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function ($167) {
                  return Data_Monoid_Disj.runDisj(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra["__superclass_Data.HeytingAlgebra.HeytingAlgebra_0"]()))(function ($168) {
                      return Data_Monoid_Disj.Disj(p($168));
                  })($167));
              };
          };
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          return function ($169) {
              return any(dictFoldable)(Data_BooleanAlgebra.booleanAlgebraBoolean)(Data_Eq.eq(dictEq)($169));
          };
      };
  };
  var notElem = function (dictFoldable) {
      return function (dictEq) {
          return function (x) {
              return function ($170) {
                  return !elem(dictFoldable)(dictEq)(x)($170);
              };
          };
      };
  };
  var or = function (dictFoldable) {
      return function (dictBooleanAlgebra) {
          return any(dictFoldable)(dictBooleanAlgebra)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var all = function (dictFoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function ($171) {
                  return Data_Monoid_Conj.runConj(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictBooleanAlgebra["__superclass_Data.HeytingAlgebra.HeytingAlgebra_0"]()))(function ($172) {
                      return Data_Monoid_Conj.Conj(p($172));
                  })($171));
              };
          };
      };
  };
  var and = function (dictFoldable) {
      return function (dictBooleanAlgebra) {
          return all(dictFoldable)(dictBooleanAlgebra)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Foldable"] = Foldable;
  exports["all"] = all;
  exports["and"] = and;
  exports["any"] = any;
  exports["elem"] = elem;
  exports["find"] = find;
  exports["fold"] = fold;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultL"] = foldMapDefaultL;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldlDefault"] = foldlDefault;
  exports["foldr"] = foldr;
  exports["foldrDefault"] = foldrDefault;
  exports["for_"] = for_;
  exports["intercalate"] = intercalate;
  exports["maximum"] = maximum;
  exports["maximumBy"] = maximumBy;
  exports["minimum"] = minimum;
  exports["minimumBy"] = minimumBy;
  exports["notElem"] = notElem;
  exports["oneOf"] = oneOf;
  exports["or"] = or;
  exports["product"] = product;
  exports["sequence_"] = sequence_;
  exports["sum"] = sum;
  exports["traverse_"] = traverse_;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
  exports["foldableFirst"] = foldableFirst;
  exports["foldableLast"] = foldableLast;
  exports["foldableAdditive"] = foldableAdditive;
  exports["foldableDual"] = foldableDual;
  exports["foldableDisj"] = foldableDisj;
  exports["foldableConj"] = foldableConj;
  exports["foldableMultiplicative"] = foldableMultiplicative;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  // module Data.Traversable

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function Cont(fn) {
      this.fn = fn;
    }

    var emptyList = {};

    var ConsCell = function (head, tail) {
      this.head = head;
      this.tail = tail;
    };

    function consList(x) {
      return function (xs) {
        return new ConsCell(x, xs);
      };
    }

    function listToArray(list) {
      var arr = [];
      while (list !== emptyList) {
        arr.push(list.head);
        list = list.tail;
      }
      return arr;
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            var buildFrom = function (x, ys) {
              return apply(map(consList)(f(x)))(ys);
            };

            var go = function (acc, currentLen, xs) {
              if (currentLen === 0) {
                return acc;
              } else {
                var last = xs[currentLen - 1];
                return new Cont(function () {
                  return go(buildFrom(last, acc), currentLen - 1, xs);
                });
              }
            };

            return function (array) {
              var result = go(pure(emptyList), array.length, array);
              while (result instanceof Cont) {
                result = result.fn();
              }

              return map(listToArray)(result);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];        
  var StateL = function (x) {
      return x;
  };
  var StateR = function (x) {
      return x;
  };
  var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Data$dotFunctor$dotFunctor_0, sequence, traverse) {
      this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  };
  var traversableMultiplicative = new Traversable(function () {
      return Data_Foldable.foldableMultiplicative;
  }, function () {
      return Data_Monoid_Multiplicative.functorMultiplicative;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Monoid_Multiplicative.Multiplicative)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
          };
      };
  });
  var traversableMaybe = new Traversable(function () {
      return Data_Foldable.foldableMaybe;
  }, function () {
      return Data_Maybe.functorMaybe;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Maybe.Just.create)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Traversable line 88, column 3 - line 88, column 35: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Maybe.Just.create)(v(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Traversable line 86, column 3 - line 86, column 37: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var traversableDual = new Traversable(function () {
      return Data_Foldable.foldableDual;
  }, function () {
      return Data_Monoid_Dual.functorDual;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Monoid_Dual.Dual)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Monoid_Dual.Dual)(f(v));
          };
      };
  });
  var traversableDisj = new Traversable(function () {
      return Data_Foldable.foldableDisj;
  }, function () {
      return Data_Monoid_Disj.functorDisj;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Monoid_Disj.Disj)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Monoid_Disj.Disj)(f(v));
          };
      };
  });
  var traversableConj = new Traversable(function () {
      return Data_Foldable.foldableConj;
  }, function () {
      return Data_Monoid_Conj.functorConj;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Monoid_Conj.Conj)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Monoid_Conj.Conj)(f(v));
          };
      };
  });
  var traversableAdditive = new Traversable(function () {
      return Data_Foldable.foldableAdditive;
  }, function () {
      return Data_Monoid_Additive.functorAdditive;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Monoid_Additive.Additive)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Monoid_Additive.Additive)(f(v));
          };
      };
  });
  var stateR = function (v) {
      return v;
  };
  var stateL = function (v) {
      return v;
  };
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return function (tma) {
              return traverse(dictTraversable)(dictApplicative)(Control_Category.id(Control_Category.categoryFn))(tma);
          };
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]()))(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  var traversableFirst = new Traversable(function () {
      return Data_Foldable.foldableFirst;
  }, function () {
      return Data_Maybe_First.functorFirst;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Maybe_First.First)(sequence(traversableMaybe)(dictApplicative)(v));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Maybe_First.First)(traverse(traversableMaybe)(dictApplicative)(f)(v));
          };
      };
  });
  var traversableLast = new Traversable(function () {
      return Data_Foldable.foldableLast;
  }, function () {
      return Data_Maybe_Last.functorLast;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Maybe_Last.Last)(sequence(traversableMaybe)(dictApplicative)(v));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Maybe_Last.Last)(traverse(traversableMaybe)(dictApplicative)(f)(v));
          };
      };
  });
  var traverseDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return function (f) {
              return function (ta) {
                  return sequence(dictTraversable)(dictApplicative)(Data_Functor.map(dictTraversable["__superclass_Data.Functor.Functor_0"]())(f)(ta));
              };
          };
      };
  };
  var functorStateR = new Data_Functor.Functor(function (f) {
      return function (k) {
          return function (s) {
              var $75 = stateR(k)(s);
              return {
                  accum: $75.accum, 
                  value: f($75.value)
              };
          };
      };
  });
  var functorStateL = new Data_Functor.Functor(function (f) {
      return function (k) {
          return function (s) {
              var $78 = stateL(k)(s);
              return {
                  accum: $78.accum, 
                  value: f($78.value)
              };
          };
      };
  });
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  var applyStateR = new Control_Apply.Apply(function () {
      return functorStateR;
  }, function (f) {
      return function (x) {
          return function (s) {
              var $81 = stateR(x)(s);
              var $82 = stateR(f)($81.accum);
              return {
                  accum: $82.accum, 
                  value: $82.value($81.value)
              };
          };
      };
  });
  var applyStateL = new Control_Apply.Apply(function () {
      return functorStateL;
  }, function (f) {
      return function (x) {
          return function (s) {
              var $87 = stateL(f)(s);
              var $88 = stateL(x)($87.accum);
              return {
                  accum: $88.accum, 
                  value: $87.value($88.value)
              };
          };
      };
  });
  var applicativeStateR = new Control_Applicative.Applicative(function () {
      return applyStateR;
  }, function (a) {
      return function (s) {
          return {
              accum: s, 
              value: a
          };
      };
  });
  var mapAccumR = function (dictTraversable) {
      return function (f) {
          return function (s0) {
              return function (xs) {
                  return stateR(traverse(dictTraversable)(applicativeStateR)(function (a) {
                      return function (s) {
                          return f(s)(a);
                      };
                  })(xs))(s0);
              };
          };
      };
  };
  var scanr = function (dictTraversable) {
      return function (f) {
          return function (b0) {
              return function (xs) {
                  return (mapAccumR(dictTraversable)(function (b) {
                      return function (a) {
                          var b$prime = f(a)(b);
                          return {
                              accum: b$prime, 
                              value: b$prime
                          };
                      };
                  })(b0)(xs)).value;
              };
          };
      };
  };
  var applicativeStateL = new Control_Applicative.Applicative(function () {
      return applyStateL;
  }, function (a) {
      return function (s) {
          return {
              accum: s, 
              value: a
          };
      };
  });
  var mapAccumL = function (dictTraversable) {
      return function (f) {
          return function (s0) {
              return function (xs) {
                  return stateL(traverse(dictTraversable)(applicativeStateL)(function (a) {
                      return function (s) {
                          return f(s)(a);
                      };
                  })(xs))(s0);
              };
          };
      };
  };
  var scanl = function (dictTraversable) {
      return function (f) {
          return function (b0) {
              return function (xs) {
                  return (mapAccumL(dictTraversable)(function (b) {
                      return function (a) {
                          var b$prime = f(b)(a);
                          return {
                              accum: b$prime, 
                              value: b$prime
                          };
                      };
                  })(b0)(xs)).value;
              };
          };
      };
  };
  exports["Traversable"] = Traversable;
  exports["for"] = $$for;
  exports["mapAccumL"] = mapAccumL;
  exports["mapAccumR"] = mapAccumR;
  exports["scanl"] = scanl;
  exports["scanr"] = scanr;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traverse"] = traverse;
  exports["traverseDefault"] = traverseDefault;
  exports["traversableArray"] = traversableArray;
  exports["traversableMaybe"] = traversableMaybe;
  exports["traversableFirst"] = traversableFirst;
  exports["traversableLast"] = traversableLast;
  exports["traversableAdditive"] = traversableAdditive;
  exports["traversableDual"] = traversableDual;
  exports["traversableConj"] = traversableConj;
  exports["traversableDisj"] = traversableDisj;
  exports["traversableMultiplicative"] = traversableMultiplicative;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];        
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var showEither = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              if (v instanceof Left) {
                  return "(Left " + (Data_Show.show(dictShow)(v.value0) + ")");
              };
              if (v instanceof Right) {
                  return "(Right " + (Data_Show.show(dictShow1)(v.value0) + ")");
              };
              throw new Error("Failed pattern match at Data.Either line 171, column 3 - line 172, column 3: " + [ v.constructor.name ]);
          });
      };
  };
  var functorEither = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 46, column 3 - line 46, column 26: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var invariantEither = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorEither));
  var fromRight = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar52) {
                  return $dollar52;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Right) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Either line 262, column 1 - line 262, column 23: " + [ v.constructor.name ]);
          })());
      };
  };
  var fromLeft = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar56) {
                  return $dollar56;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Left) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Either line 257, column 1 - line 257, column 22: " + [ v.constructor.name ]);
          })());
      };
  };
  var foldableEither = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Left) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Right) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 202, column 3 - line 202, column 31: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Left) {
                  return z;
              };
              if (v1 instanceof Right) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 200, column 3 - line 200, column 26: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Left) {
                  return z;
              };
              if (v1 instanceof Right) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Either line 198, column 3 - line 198, column 26: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var traversableEither = new Data_Traversable.Traversable(function () {
      return foldableEither;
  }, function () {
      return functorEither;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Left) {
              return Control_Applicative.pure(dictApplicative)(new Left(v.value0));
          };
          if (v instanceof Right) {
              return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Right.create)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Either line 216, column 3 - line 216, column 36: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Left) {
                  return Control_Applicative.pure(dictApplicative)(new Left(v1.value0));
              };
              if (v1 instanceof Right) {
                  return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Right.create)(v(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 214, column 3 - line 214, column 39: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var extendEither = new Control_Extend.Extend(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          return new Right(v(v1));
      };
  });
  var eqEither = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (v) {
              return function (v1) {
                  if (v instanceof Left && v1 instanceof Left) {
                      return Data_Eq.eq(dictEq)(v.value0)(v1.value0);
                  };
                  if (v instanceof Right && v1 instanceof Right) {
                      return Data_Eq.eq(dictEq1)(v.value0)(v1.value0);
                  };
                  return false;
              };
          });
      };
  };
  var ordEither = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqEither(dictOrd["__superclass_Data.Eq.Eq_0"]())(dictOrd1["__superclass_Data.Eq.Eq_0"]());
          }, function (v) {
              return function (v1) {
                  if (v instanceof Left && v1 instanceof Left) {
                      return Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                  };
                  if (v instanceof Right && v1 instanceof Right) {
                      return Data_Ord.compare(dictOrd1)(v.value0)(v1.value0);
                  };
                  if (v instanceof Left) {
                      return Data_Ordering.LT.value;
                  };
                  if (v1 instanceof Left) {
                      return Data_Ordering.GT.value;
                  };
                  throw new Error("Failed pattern match at Data.Either line 188, column 3 - line 188, column 48: " + [ v.constructor.name, v1.constructor.name ]);
              };
          });
      };
  };
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 243, column 1 - line 243, column 26: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isLeft = either(Data_Function["const"](true))(Data_Function["const"](false));
  var isRight = either(Data_Function["const"](false))(Data_Function["const"](true));
  var boundedEither = function (dictBounded) {
      return function (dictBounded1) {
          return new Data_Bounded.Bounded(function () {
              return ordEither(dictBounded["__superclass_Data.Ord.Ord_0"]())(dictBounded1["__superclass_Data.Ord.Ord_0"]());
          }, new Left(Data_Bounded.bottom(dictBounded)), new Right(Data_Bounded.top(dictBounded1)));
      };
  };
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 53, column 3 - line 53, column 34: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var bifoldableEither = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
      return function (v) {
          return function (v1) {
              return function (v2) {
                  if (v2 instanceof Left) {
                      return v(v2.value0);
                  };
                  if (v2 instanceof Right) {
                      return v1(v2.value0);
                  };
                  throw new Error("Failed pattern match at Data.Either line 210, column 3 - line 210, column 31: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
              };
          };
      };
  }, function (v) {
      return function (v1) {
          return function (z) {
              return function (v2) {
                  if (v2 instanceof Left) {
                      return v(z)(v2.value0);
                  };
                  if (v2 instanceof Right) {
                      return v1(z)(v2.value0);
                  };
                  throw new Error("Failed pattern match at Data.Either line 208, column 3 - line 208, column 33: " + [ v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name ]);
              };
          };
      };
  }, function (v) {
      return function (v1) {
          return function (z) {
              return function (v2) {
                  if (v2 instanceof Left) {
                      return v(v2.value0)(z);
                  };
                  if (v2 instanceof Right) {
                      return v1(v2.value0)(z);
                  };
                  throw new Error("Failed pattern match at Data.Either line 206, column 3 - line 206, column 33: " + [ v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name ]);
              };
          };
      };
  });
  var bitraversableEither = new Data_Bitraversable.Bitraversable(function () {
      return bifoldableEither;
  }, function () {
      return bifunctorEither;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Left) {
              return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Left.create)(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Right.create)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Either line 222, column 3 - line 222, column 35: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              return function (v2) {
                  if (v2 instanceof Left) {
                      return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Left.create)(v(v2.value0));
                  };
                  if (v2 instanceof Right) {
                      return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Right.create)(v1(v2.value0));
                  };
                  throw new Error("Failed pattern match at Data.Either line 220, column 3 - line 220, column 41: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
              };
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 89, column 3 - line 89, column 28: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var semigroupEither = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (x) {
          return function (y) {
              return Control_Apply.apply(applyEither)(Data_Functor.map(functorEither)(Data_Semigroup.append(dictSemigroup))(x))(y);
          };
      });
  };
  var semiringEither = function (dictSemiring) {
      return new Data_Semiring.Semiring(function (x) {
          return function (y) {
              return Control_Apply.apply(applyEither)(Data_Functor.map(functorEither)(Data_Semiring.add(dictSemiring))(x))(y);
          };
      }, function (x) {
          return function (y) {
              return Control_Apply.apply(applyEither)(Data_Functor.map(functorEither)(Data_Semiring.mul(dictSemiring))(x))(y);
          };
      }, new Right(Data_Semiring.one(dictSemiring)), new Right(Data_Semiring.zero(dictSemiring)));
  };
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  var monadEither = new Control_Monad.Monad(function () {
      return applicativeEither;
  }, function () {
      return bindEither;
  });
  var altEither = new Control_Alt.Alt(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return v1;
          };
          return v;
      };
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["fromLeft"] = fromLeft;
  exports["fromRight"] = fromRight;
  exports["isLeft"] = isLeft;
  exports["isRight"] = isRight;
  exports["functorEither"] = functorEither;
  exports["invariantEither"] = invariantEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["altEither"] = altEither;
  exports["bindEither"] = bindEither;
  exports["monadEither"] = monadEither;
  exports["extendEither"] = extendEither;
  exports["showEither"] = showEither;
  exports["eqEither"] = eqEither;
  exports["ordEither"] = ordEither;
  exports["boundedEither"] = boundedEither;
  exports["foldableEither"] = foldableEither;
  exports["bifoldableEither"] = bifoldableEither;
  exports["traversableEither"] = traversableEither;
  exports["bitraversableEither"] = bitraversableEither;
  exports["semiringEither"] = semiringEither;
  exports["semigroupEither"] = semigroupEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var CommutativeRing = function (__superclass_Data$dotRing$dotRing_0) {
      this["__superclass_Data.Ring.Ring_0"] = __superclass_Data$dotRing$dotRing_0;
  };
  var commutativeRingUnit = new CommutativeRing(function () {
      return Data_Ring.ringUnit;
  });
  var commutativeRingNumber = new CommutativeRing(function () {
      return Data_Ring.ringNumber;
  });
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["CommutativeRing"] = CommutativeRing;
  exports["commutativeRingInt"] = commutativeRingInt;
  exports["commutativeRingNumber"] = commutativeRingNumber;
  exports["commutativeRingUnit"] = commutativeRingUnit;
})(PS["Data.CommutativeRing"] = PS["Data.CommutativeRing"] || {});
(function(exports) {
    "use strict";

  // module Data.EuclideanRing

  exports.intDegree = function (x) {
    return Math.abs(x);
  };

  exports.intDiv = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x / y | 0;
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      return x % y;
    };
  };

  exports.numDiv = function (n1) {
    return function (n2) {
      return n1 / n2;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.EuclideanRing"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var EuclideanRing = function (__superclass_Data$dotCommutativeRing$dotCommutativeRing_0, degree, div, mod) {
      this["__superclass_Data.CommutativeRing.CommutativeRing_0"] = __superclass_Data$dotCommutativeRing$dotCommutativeRing_0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  };
  var euclideanRingUnit = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingUnit;
  }, function (v) {
      return 1;
  }, function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  }, function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  });
  var euclideanRingNumber = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingNumber;
  }, function (v) {
      return 1;
  }, $foreign.numDiv, function (v) {
      return function (v1) {
          return 0.0;
      };
  });
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  var degree = function (dict) {
      return dict.degree;
  };
  exports["EuclideanRing"] = EuclideanRing;
  exports["degree"] = degree;
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
  exports["euclideanRingNumber"] = euclideanRingNumber;
  exports["euclideanRingUnit"] = euclideanRingUnit;
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Field = function (__superclass_Data$dotEuclideanRing$dotEuclideanRing_0) {
      this["__superclass_Data.EuclideanRing.EuclideanRing_0"] = __superclass_Data$dotEuclideanRing$dotEuclideanRing_0;
  };
  var fieldUnit = new Field(function () {
      return Data_EuclideanRing.euclideanRingUnit;
  });
  var fieldNumber = new Field(function () {
      return Data_EuclideanRing.euclideanRingNumber;
  });
  exports["Field"] = Field;
  exports["fieldNumber"] = fieldNumber;
  exports["fieldUnit"] = fieldUnit;
})(PS["Data.Field"] = PS["Data.Field"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];        
  var Identity = function (x) {
      return x;
  };
  var showIdentity = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Identity " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semiringIdentity = function (dictSemiring) {
      return new Data_Semiring.Semiring(function (v) {
          return function (v1) {
              return Data_Semiring.add(dictSemiring)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Data_Semiring.mul(dictSemiring)(v)(v1);
          };
      }, Data_Semiring.one(dictSemiring), Data_Semiring.zero(dictSemiring));
  };
  var semigroupIdenity = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Semigroup.append(dictSemigroup)(v)(v1);
          };
      });
  };
  var runIdentity = function (v) {
      return v;
  };
  var ringIdentity = function (dictRing) {
      return new Data_Ring.Ring(function () {
          return semiringIdentity(dictRing["__superclass_Data.Semiring.Semiring_0"]());
      }, function (v) {
          return function (v1) {
              return Data_Ring.sub(dictRing)(v)(v1);
          };
      });
  };
  var monoidIdentity = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupIdenity(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]());
      }, Data_Monoid.mempty(dictMonoid));
  };
  var heytingAlgebraIdentity = function (dictHeytingAlgebra) {
      return new Data_HeytingAlgebra.HeytingAlgebra(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra), function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.implies(dictHeytingAlgebra)(v)(v1);
          };
      }, function (v) {
          return Data_HeytingAlgebra.not(dictHeytingAlgebra)(v);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var invariantIdentity = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorIdentity));
  var foldableIdentity = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var traversableIdentity = new Data_Traversable.Traversable(function () {
      return foldableIdentity;
  }, function () {
      return functorIdentity;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Identity)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Identity)(f(v));
          };
      };
  });
  var extendIdentity = new Control_Extend.Extend(function () {
      return functorIdentity;
  }, function (f) {
      return function (m) {
          return f(m);
      };
  });
  var eqIdentity = function (dictEq) {
      return new Data_Eq.Eq(function (v) {
          return function (v1) {
              return Data_Eq.eq(dictEq)(v)(v1);
          };
      });
  };
  var ordIdentity = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqIdentity(dictOrd["__superclass_Data.Eq.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Data_Ord.compare(dictOrd)(v)(v1);
          };
      });
  };
  var comonadIdentity = new Control_Comonad.Comonad(function () {
      return extendIdentity;
  }, function (v) {
      return v;
  });
  var commutativeRingIdentity = function (dictCommutativeRing) {
      return new Data_CommutativeRing.CommutativeRing(function () {
          return ringIdentity(dictCommutativeRing["__superclass_Data.Ring.Ring_0"]());
      });
  };
  var euclideanRingIdentity = function (dictEuclideanRing) {
      return new Data_EuclideanRing.EuclideanRing(function () {
          return commutativeRingIdentity(dictEuclideanRing["__superclass_Data.CommutativeRing.CommutativeRing_0"]());
      }, function (v) {
          return Data_EuclideanRing.degree(dictEuclideanRing)(v);
      }, function (v) {
          return function (v1) {
              return Data_EuclideanRing.div(dictEuclideanRing)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Data_EuclideanRing.mod(dictEuclideanRing)(v)(v1);
          };
      });
  };
  var fieldIdentity = function (dictField) {
      return new Data_Field.Field(function () {
          return euclideanRingIdentity(dictField["__superclass_Data.EuclideanRing.EuclideanRing_0"]());
      });
  };
  var boundedIdentity = function (dictBounded) {
      return new Data_Bounded.Bounded(function () {
          return ordIdentity(dictBounded["__superclass_Data.Ord.Ord_0"]());
      }, Data_Bounded.bottom(dictBounded), Data_Bounded.top(dictBounded));
  };
  var booleanAlgebraIdentity = function (dictBooleanAlgebra) {
      return new Data_BooleanAlgebra.BooleanAlgebra(function () {
          return heytingAlgebraIdentity(dictBooleanAlgebra["__superclass_Data.HeytingAlgebra.HeytingAlgebra_0"]());
      });
  };
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["runIdentity"] = runIdentity;
  exports["eqIdentity"] = eqIdentity;
  exports["ordIdentity"] = ordIdentity;
  exports["boundedIdentity"] = boundedIdentity;
  exports["heytingAlgebraIdentity"] = heytingAlgebraIdentity;
  exports["booleanAlgebraIdentity"] = booleanAlgebraIdentity;
  exports["semigroupIdenity"] = semigroupIdenity;
  exports["monoidIdentity"] = monoidIdentity;
  exports["semiringIdentity"] = semiringIdentity;
  exports["euclideanRingIdentity"] = euclideanRingIdentity;
  exports["ringIdentity"] = ringIdentity;
  exports["commutativeRingIdentity"] = commutativeRingIdentity;
  exports["fieldIdentity"] = fieldIdentity;
  exports["showIdentity"] = showIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["invariantIdentity"] = invariantIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
  exports["extendIdentity"] = extendIdentity;
  exports["comonadIdentity"] = comonadIdentity;
  exports["foldableIdentity"] = foldableIdentity;
  exports["traversableIdentity"] = traversableIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
    "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Partial"];       
  var crash = function (dictPartial) {
      return $foreign.crashWith(dictPartial)("Partial.crash: partial function");
  };
  exports["crash"] = crash;
  exports["crashWith"] = $foreign.crashWith;
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];        
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith(dictPartial)(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
  exports["unsafePartial"] = $foreign.unsafePartial;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var MonadRec = function (__superclass_Control$dotMonad$dotMonad_0, tailRecM) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRecM2 = function (dictMonadRec) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return tailRecM(dictMonadRec)(function (o) {
                      return f(o.a)(o.b);
                  })({
                      a: a, 
                      b: b
                  });
              };
          };
      };
  };
  var tailRecM3 = function (dictMonadRec) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return tailRecM(dictMonadRec)(function (o) {
                          return f(o.a)(o.b)(o.c);
                      })({
                          a: a, 
                          b: b, 
                          c: c
                      });
                  };
              };
          };
      };
  };
  var tailRecEff = function (f) {
      return function (a) {
          var f$prime = function ($26) {
              return Control_Monad_Eff_Unsafe.unsafeInterleaveEff(f($26));
          };
          return function __do() {
              var v = f$prime(a)();
              var v1 = {
                  value: v
              };
              (function () {
                  while (!(function __do() {
                      var v2 = v1.value;
                      if (v2 instanceof Data_Either.Left) {
                          var v3 = f$prime(v2.value0)();
                          v1.value = v3;
                          return false;
                      };
                      if (v2 instanceof Data_Either.Right) {
                          return true;
                      };
                      throw new Error("Failed pattern match at Control.Monad.Rec.Class line 103, column 5 - line 108, column 27: " + [ v2.constructor.name ]);
                  })()) {

                  };
                  return {};
              })();
              return Data_Function.apply(Partial_Unsafe.unsafePartial)(function (dictPartial) {
                  return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Either.fromRight(dictPartial))(Control_Monad_ST.readSTRef(v1));
              })();
          };
      };
  };
  var tailRec = function (f) {
      return function (a) {
          var go = function (__copy_v) {
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Data_Either.Left) {
                      var __tco_v = f(v.value0);
                      v = __tco_v;
                      continue tco;
                  };
                  if (v instanceof Data_Either.Right) {
                      return v.value0;
                  };
                  throw new Error("Failed pattern match at Control.Monad.Rec.Class line 78, column 1 - line 81, column 19: " + [ v.constructor.name ]);
              };
          };
          return go(f(a));
      };
  };
  var monadRecIdentity = new MonadRec(function () {
      return Data_Identity.monadIdentity;
  }, function (f) {
      return function ($27) {
          return Data_Identity.Identity(tailRec(function ($28) {
              return Data_Identity.runIdentity(f($28));
          })($27));
      };
  });
  var monadRecEither = new MonadRec(function () {
      return Data_Either.monadEither;
  }, function (f) {
      return function (a0) {
          var g = function (v) {
              if (v instanceof Data_Either.Left) {
                  return new Data_Either.Right(new Data_Either.Left(v.value0));
              };
              if (v instanceof Data_Either.Right && v.value0 instanceof Data_Either.Left) {
                  return new Data_Either.Left(f(v.value0.value0));
              };
              if (v instanceof Data_Either.Right && v.value0 instanceof Data_Either.Right) {
                  return new Data_Either.Right(new Data_Either.Right(v.value0.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class line 92, column 7 - line 92, column 34: " + [ v.constructor.name ]);
          };
          return tailRec(g)(f(a0));
      };
  });
  var monadRecEff = new MonadRec(function () {
      return Control_Monad_Eff.monadEff;
  }, tailRecEff);
  var forever = function (dictMonadRec) {
      return function (ma) {
          return tailRecM(dictMonadRec)(function (u) {
              return Data_Functor.voidRight((((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(new Data_Either.Left(u))(ma);
          })(Data_Unit.unit);
      };
  };
  exports["MonadRec"] = MonadRec;
  exports["forever"] = forever;
  exports["tailRec"] = tailRec;
  exports["tailRecM"] = tailRecM;
  exports["tailRecM2"] = tailRecM2;
  exports["tailRecM3"] = tailRecM3;
  exports["monadRecIdentity"] = monadRecIdentity;
  exports["monadRecEff"] = monadRecEff;
  exports["monadRecEither"] = monadRecEither;
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];        
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["MonadTrans"] = MonadTrans;
  exports["lift"] = lift;
})(PS["Control.Monad.Trans"] = PS["Control.Monad.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Data_Unit = PS["Data.Unit"];        
  var Lazy = function (defer) {
      this.defer = defer;
  };
  var defer = function (dict) {
      return dict.defer;
  };
  var fix = function (dictLazy) {
      return function (f) {
          return defer(dictLazy)(function (v) {
              return f(fix(dictLazy)(f));
          });
      };
  };
  exports["Lazy"] = Lazy;
  exports["defer"] = defer;
  exports["fix"] = fix;
})(PS["Control.Lazy"] = PS["Control.Lazy"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];        
  var MonadPlus = function (__superclass_Control$dotMonadZero$dotMonadZero_0) {
      this["__superclass_Control.MonadZero.MonadZero_0"] = __superclass_Control$dotMonadZero$dotMonadZero_0;
  };
  var monadPlusArray = new MonadPlus(function () {
      return Control_MonadZero.monadZeroArray;
  });
  exports["MonadPlus"] = MonadPlus;
  exports["monadPlusArray"] = monadPlusArray;
})(PS["Control.MonadPlus"] = PS["Control.MonadPlus"] || {});
(function(exports) {
    "use strict";

  // module Data.Generic

  exports.zipAll = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        for (var i = 0; i < l; i++) {
          if (!f(xs[i])(ys[i])) {
            return false;
          }
        }
        return true;
      };
    };
  };

  exports.zipCompare = function (f) {
    return function (xs) {
      return function (ys) {
        var i = 0;
        var xlen = xs.length;
        var ylen = ys.length;
        while (i < xlen && i < ylen) {
          var o = f(xs[i])(ys[i]);
          if (o !== 0) {
            return o;
          }
          i++;
        }
        if (xlen === ylen) {
          return 0;
        } else if (xlen > ylen) {
          return -1;
        } else {
          return 1;
        }
      };
    };
  };
})(PS["Data.Generic"] = PS["Data.Generic"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = [];
      for (var i = start, n = 0; i !== end; i += step) {
        result[n++] = i;
      }
      result[n] = i;
      return result;
    };
  };

  exports.fromFoldableImpl = (function () {
    // jshint maxparams: 2
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      while (list !== emptyList) {
        result[count++] = list.head;
        list = list.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports.findLastIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = xs.length - 1; i >= 0; i--) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._insertAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i > l.length) return nothing;
            var l1 = l.slice();
            l1.splice(i, 0, a);
            return just(l1);
          };
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  exports.partition = function (f) {
    return function (xs) {
      var yes = [];
      var no  = [];
      for (var i = 0; i < xs.length; i++) {
        var x = xs[i];
        if (f(x))
          yes.push(x);
        else
          no.push(x);
      }
      return { yes: yes, no: no };
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      // jshint maxparams: 2
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.take = function (n) {
    return function (l) {
      return n < 1 ? [] : l.slice(0, n);
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var swap = function (v) {
      return new Tuple(v.value1, v.value0);
  };
  var snd = function (v) {
      return v.value1;
  };
  var showTuple = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(Tuple " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var semiringTuple = function (dictSemiring) {
      return function (dictSemiring1) {
          return new Data_Semiring.Semiring(function (v) {
              return function (v1) {
                  return new Tuple(Data_Semiring.add(dictSemiring)(v.value0)(v1.value0), Data_Semiring.add(dictSemiring1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return function (v1) {
                  return new Tuple(Data_Semiring.mul(dictSemiring)(v.value0)(v1.value0), Data_Semiring.mul(dictSemiring1)(v.value1)(v1.value1));
              };
          }, new Tuple(Data_Semiring.one(dictSemiring), Data_Semiring.one(dictSemiring1)), new Tuple(Data_Semiring.zero(dictSemiring), Data_Semiring.zero(dictSemiring1)));
      };
  };
  var semigroupoidTuple = new Control_Semigroupoid.Semigroupoid(function (v) {
      return function (v1) {
          return new Tuple(v1.value0, v.value1);
      };
  });
  var semigroupTuple = function (dictSemigroup) {
      return function (dictSemigroup1) {
          return new Data_Semigroup.Semigroup(function (v) {
              return function (v1) {
                  return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var ringTuple = function (dictRing) {
      return function (dictRing1) {
          return new Data_Ring.Ring(function () {
              return semiringTuple(dictRing["__superclass_Data.Semiring.Semiring_0"]())(dictRing1["__superclass_Data.Semiring.Semiring_0"]());
          }, function (v) {
              return function (v1) {
                  return new Tuple(Data_Ring.sub(dictRing)(v.value0)(v1.value0), Data_Ring.sub(dictRing1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var monoidTuple = function (dictMonoid) {
      return function (dictMonoid1) {
          return new Data_Monoid.Monoid(function () {
              return semigroupTuple(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(dictMonoid1["__superclass_Data.Semigroup.Semigroup_0"]());
          }, new Tuple(Data_Monoid.mempty(dictMonoid), Data_Monoid.mempty(dictMonoid1)));
      };
  };
  var lookup = function (dictFoldable) {
      return function (dictEq) {
          return function (a) {
              return function (f) {
                  return Data_Function.apply(Data_Maybe_First.runFirst)(Data_Foldable.foldMap(dictFoldable)(Data_Maybe_First.monoidFirst)(function (v) {
                      var $127 = Data_Eq.eq(dictEq)(a)(v.value0);
                      if ($127) {
                          return new Data_Maybe.Just(v.value1);
                      };
                      if (!$127) {
                          return Data_Maybe.Nothing.value;
                      };
                      throw new Error("Failed pattern match at Data.Tuple line 189, column 58 - line 189, column 93: " + [ $127.constructor.name ]);
                  })(f));
              };
          };
      };
  };
  var heytingAlgebraTuple = function (dictHeytingAlgebra) {
      return function (dictHeytingAlgebra1) {
          return new Data_HeytingAlgebra.HeytingAlgebra(function (v) {
              return function (v1) {
                  return new Tuple(Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.conj(dictHeytingAlgebra1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return function (v1) {
                  return new Tuple(Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.disj(dictHeytingAlgebra1)(v.value1)(v1.value1));
              };
          }, new Tuple(Data_HeytingAlgebra.ff(dictHeytingAlgebra), Data_HeytingAlgebra.ff(dictHeytingAlgebra1)), function (v) {
              return function (v1) {
                  return new Tuple(Data_HeytingAlgebra.implies(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.implies(dictHeytingAlgebra1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return new Tuple(Data_HeytingAlgebra.not(dictHeytingAlgebra)(v.value0), Data_HeytingAlgebra.not(dictHeytingAlgebra1)(v.value1));
          }, new Tuple(Data_HeytingAlgebra.tt(dictHeytingAlgebra), Data_HeytingAlgebra.tt(dictHeytingAlgebra1)));
      };
  };
  var functorTuple = new Data_Functor.Functor(function (f) {
      return function (v) {
          return new Tuple(v.value0, f(v.value1));
      };
  });
  var invariantTuple = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorTuple));
  var fst = function (v) {
      return v.value0;
  };
  var lazyTuple = function (dictLazy) {
      return function (dictLazy1) {
          return new Control_Lazy.Lazy(function (f) {
              return new Tuple(Data_Function.apply(Control_Lazy.defer(dictLazy))(function (v) {
                  return fst(f(Data_Unit.unit));
              }), Data_Function.apply(Control_Lazy.defer(dictLazy1))(function (v) {
                  return snd(f(Data_Unit.unit));
              }));
          });
      };
  };
  var foldableTuple = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v.value1);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v.value1);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v.value1)(z);
          };
      };
  });
  var traversableTuple = new Data_Traversable.Traversable(function () {
      return foldableTuple;
  }, function () {
      return functorTuple;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Tuple.create(v.value0))(v.value1);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Tuple.create(v.value0))(f(v.value1));
          };
      };
  });
  var extendTuple = new Control_Extend.Extend(function () {
      return functorTuple;
  }, function (f) {
      return function (v) {
          return new Tuple(v.value0, f(v));
      };
  });
  var eqTuple = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (v) {
              return function (v1) {
                  return Data_Eq.eq(dictEq)(v.value0)(v1.value0) && Data_Eq.eq(dictEq1)(v.value1)(v1.value1);
              };
          });
      };
  };
  var ordTuple = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqTuple(dictOrd["__superclass_Data.Eq.Eq_0"]())(dictOrd1["__superclass_Data.Eq.Eq_0"]());
          }, function (v) {
              return function (v1) {
                  var $193 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                  if ($193 instanceof Data_Ordering.EQ) {
                      return Data_Ord.compare(dictOrd1)(v.value1)(v1.value1);
                  };
                  return $193;
              };
          });
      };
  };
  var curry = function (f) {
      return function (a) {
          return function (b) {
              return f(new Tuple(a, b));
          };
      };
  };
  var comonadTuple = new Control_Comonad.Comonad(function () {
      return extendTuple;
  }, snd);
  var commutativeRingTuple = function (dictCommutativeRing) {
      return function (dictCommutativeRing1) {
          return new Data_CommutativeRing.CommutativeRing(function () {
              return ringTuple(dictCommutativeRing["__superclass_Data.Ring.Ring_0"]())(dictCommutativeRing1["__superclass_Data.Ring.Ring_0"]());
          });
      };
  };
  var boundedTuple = function (dictBounded) {
      return function (dictBounded1) {
          return new Data_Bounded.Bounded(function () {
              return ordTuple(dictBounded["__superclass_Data.Ord.Ord_0"]())(dictBounded1["__superclass_Data.Ord.Ord_0"]());
          }, new Tuple(Data_Bounded.bottom(dictBounded), Data_Bounded.bottom(dictBounded1)), new Tuple(Data_Bounded.top(dictBounded), Data_Bounded.top(dictBounded1)));
      };
  };
  var booleanAlgebraTuple = function (dictBooleanAlgebra) {
      return function (dictBooleanAlgebra1) {
          return new Data_BooleanAlgebra.BooleanAlgebra(function () {
              return heytingAlgebraTuple(dictBooleanAlgebra["__superclass_Data.HeytingAlgebra.HeytingAlgebra_0"]())(dictBooleanAlgebra1["__superclass_Data.HeytingAlgebra.HeytingAlgebra_0"]());
          });
      };
  };
  var bifunctorTuple = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              return new Tuple(f(v.value0), g(v.value1));
          };
      };
  });
  var bifoldableTuple = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
      return function (f) {
          return function (g) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(v.value0))(g(v.value1));
              };
          };
      };
  }, function (f) {
      return function (g) {
          return function (z) {
              return function (v) {
                  return g(f(z)(v.value0))(v.value1);
              };
          };
      };
  }, function (f) {
      return function (g) {
          return function (z) {
              return function (v) {
                  return f(v.value0)(g(v.value1)(z));
              };
          };
      };
  });
  var bitraversableTuple = new Data_Bitraversable.Bitraversable(function () {
      return bifoldableTuple;
  }, function () {
      return bifunctorTuple;
  }, function (dictApplicative) {
      return function (v) {
          return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Tuple.create)(v.value0))(v.value1);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (g) {
              return function (v) {
                  return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Tuple.create)(f(v.value0)))(g(v.value1));
              };
          };
      };
  });
  var biapplyTuple = new Control_Biapply.Biapply(function () {
      return bifunctorTuple;
  }, function (v) {
      return function (v1) {
          return new Tuple(v.value0(v1.value0), v.value1(v1.value1));
      };
  });
  var biapplicativeTuple = new Control_Biapplicative.Biapplicative(function () {
      return biapplyTuple;
  }, Tuple.create);
  var applyTuple = function (dictSemigroup) {
      return new Control_Apply.Apply(function () {
          return functorTuple;
      }, function (v) {
          return function (v1) {
              return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v.value1(v1.value1));
          };
      });
  };
  var bindTuple = function (dictSemigroup) {
      return new Control_Bind.Bind(function () {
          return applyTuple(dictSemigroup);
      }, function (v) {
          return function (f) {
              var $242 = f(v.value1);
              return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)($242.value0), $242.value1);
          };
      });
  };
  var applicativeTuple = function (dictMonoid) {
      return new Control_Applicative.Applicative(function () {
          return applyTuple(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]());
      }, Tuple.create(Data_Monoid.mempty(dictMonoid)));
  };
  var monadTuple = function (dictMonoid) {
      return new Control_Monad.Monad(function () {
          return applicativeTuple(dictMonoid);
      }, function () {
          return bindTuple(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]());
      });
  };
  exports["Tuple"] = Tuple;
  exports["curry"] = curry;
  exports["fst"] = fst;
  exports["lookup"] = lookup;
  exports["snd"] = snd;
  exports["swap"] = swap;
  exports["uncurry"] = uncurry;
  exports["showTuple"] = showTuple;
  exports["eqTuple"] = eqTuple;
  exports["ordTuple"] = ordTuple;
  exports["boundedTuple"] = boundedTuple;
  exports["semigroupoidTuple"] = semigroupoidTuple;
  exports["semigroupTuple"] = semigroupTuple;
  exports["monoidTuple"] = monoidTuple;
  exports["semiringTuple"] = semiringTuple;
  exports["ringTuple"] = ringTuple;
  exports["commutativeRingTuple"] = commutativeRingTuple;
  exports["heytingAlgebraTuple"] = heytingAlgebraTuple;
  exports["booleanAlgebraTuple"] = booleanAlgebraTuple;
  exports["functorTuple"] = functorTuple;
  exports["invariantTuple"] = invariantTuple;
  exports["bifunctorTuple"] = bifunctorTuple;
  exports["applyTuple"] = applyTuple;
  exports["biapplyTuple"] = biapplyTuple;
  exports["applicativeTuple"] = applicativeTuple;
  exports["biapplicativeTuple"] = biapplicativeTuple;
  exports["bindTuple"] = bindTuple;
  exports["monadTuple"] = monadTuple;
  exports["extendTuple"] = extendTuple;
  exports["comonadTuple"] = comonadTuple;
  exports["lazyTuple"] = lazyTuple;
  exports["foldableTuple"] = foldableTuple;
  exports["bifoldableTuple"] = bifoldableTuple;
  exports["traversableTuple"] = traversableTuple;
  exports["bitraversableTuple"] = bitraversableTuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
    "use strict";

  // module Data.Unfoldable

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              while (true) {
                var maybe = f(b);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                b = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Unfoldable = function (unfoldr) {
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable($foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Partial_Unsafe.unsafePartial(function (dictPartial) {
      return Data_Maybe.fromJust(dictPartial);
  }))(Data_Tuple.fst)(Data_Tuple.snd));
  var replicate = function (dictUnfoldable) {
      return function (n) {
          return function (v) {
              var step = function (i) {
                  var $7 = i <= 0;
                  if ($7) {
                      return Data_Maybe.Nothing.value;
                  };
                  if (!$7) {
                      return new Data_Maybe.Just(new Data_Tuple.Tuple(v, i - 1));
                  };
                  throw new Error("Failed pattern match at Data.Unfoldable line 58, column 7 - line 59, column 34: " + [ $7.constructor.name ]);
              };
              return unfoldr(dictUnfoldable)(step)(n);
          };
      };
  };
  var replicateA = function (dictApplicative) {
      return function (dictUnfoldable) {
          return function (dictTraversable) {
              return function (n) {
                  return function (m) {
                      return Data_Traversable.sequence(dictTraversable)(dictApplicative)(replicate(dictUnfoldable)(n)(m));
                  };
              };
          };
      };
  };
  var singleton = function (dictUnfoldable) {
      return replicate(dictUnfoldable)(1);
  };
  var none = function (dictUnfoldable) {
      return unfoldr(dictUnfoldable)(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Unit.unit);
  };
  exports["Unfoldable"] = Unfoldable;
  exports["none"] = none;
  exports["replicate"] = replicate;
  exports["replicateA"] = replicateA;
  exports["singleton"] = singleton;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Function = PS["Data.Function"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];        
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictApplicative)($foreign.zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var updateAt = $foreign._updateAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unzip = $foreign["uncons'"](function (v) {
      return new Data_Tuple.Tuple([  ], [  ]);
  })(function (v) {
      return function (ts) {
          var $39 = unzip(ts);
          return new Data_Tuple.Tuple($foreign.cons(v.value0)($39.value0), $foreign.cons(v.value1)($39.value1));
      };
  });
  var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x, 
              tail: xs
          });
      };
  });
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Function.apply(Data_Unfoldable.unfoldr(dictUnfoldable))($foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (h) {
          return function (t) {
              return new Data_Maybe.Just(new Data_Tuple.Tuple(h, t));
          };
      }));
  };
  var tail = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var span = function (p) {
      var go = function (__copy_acc) {
          return function (__copy_xs) {
              var acc = __copy_acc;
              var xs = __copy_xs;
              tco: while (true) {
                  var $45 = uncons(xs);
                  if ($45 instanceof Data_Maybe.Just && p($45.value0.head)) {
                      var __tco_acc = $foreign.cons($45.value0.head)(acc);
                      acc = __tco_acc;
                      xs = $45.value0.tail;
                      continue tco;
                  };
                  return {
                      init: $foreign.reverse(acc), 
                      rest: xs
                  };
              };
          };
      };
      return go([  ]);
  };
  var takeWhile = function (p) {
      return function (xs) {
          return (span(p)(xs)).init;
      };
  };
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var $49 = comp(x)(y);
                  if ($49 instanceof Data_Ordering.GT) {
                      return 1;
                  };
                  if ($49 instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if ($49 instanceof Data_Ordering.LT) {
                      return -1;
                  };
                  throw new Error("Failed pattern match at Data.Array line 427, column 15 - line 432, column 1: " + [ $49.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var nubBy = function (eq) {
      return function (xs) {
          var $50 = uncons(xs);
          if ($50 instanceof Data_Maybe.Just) {
              return $foreign.cons($50.value0.head)(nubBy(eq)($foreign.filter(function (y) {
                  return !eq($50.value0.head)(y);
              })($50.value0.tail)));
          };
          if ($50 instanceof Data_Maybe.Nothing) {
              return [  ];
          };
          throw new Error("Failed pattern match at Data.Array line 516, column 3 - line 518, column 18: " + [ $50.constructor.name ]);
      };
  };
  var nub = function (dictEq) {
      return nubBy(Data_Eq.eq(dictEq));
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative["__superclass_Control.Applicative.Applicative_0"]())["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map(((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Data.Functor.Functor_0"]())($foreign.cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative["__superclass_Control.Applicative.Applicative_0"]())([  ]));
          };
      };
  };
  var insertAt = $foreign._insertAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var init = function (xs) {
      if ($$null(xs)) {
          return Data_Maybe.Nothing.value;
      };
      if (Data_Boolean.otherwise) {
          return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1)(xs));
      };
      throw new Error("Failed pattern match at Data.Array line 226, column 1 - line 228, column 55: " + [ xs.constructor.name ]);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1);
  };
  var modifyAt = function (i) {
      return function (f) {
          return function (xs) {
              var go = function (x) {
                  return updateAt(i)(f(x))(xs);
              };
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
          };
      };
  };
  var head = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (v) {
          return new Data_Maybe.Just(x);
      };
  });
  var groupBy = function (op) {
      var go = function (__copy_acc) {
          return function (__copy_xs) {
              var acc = __copy_acc;
              var xs = __copy_xs;
              tco: while (true) {
                  var $55 = uncons(xs);
                  if ($55 instanceof Data_Maybe.Just) {
                      var sp = span(op($55.value0.head))($55.value0.tail);
                      var __tco_acc = $foreign.cons($foreign.cons($55.value0.head)(sp.init))(acc);
                      acc = __tco_acc;
                      xs = sp.rest;
                      continue tco;
                  };
                  if ($55 instanceof Data_Maybe.Nothing) {
                      return $foreign.reverse(acc);
                  };
                  throw new Error("Failed pattern match at Data.Array line 502, column 15 - line 506, column 27: " + [ $55.constructor.name ]);
              };
          };
      };
      return go([  ]);
  };
  var group = function (dictEq) {
      return function (xs) {
          return groupBy(Data_Eq.eq(dictEq))(xs);
      };
  };
  var group$prime = function (dictOrd) {
      return function ($69) {
          return group(dictOrd["__superclass_Data.Eq.Eq_0"]())(sort(dictOrd)($69));
      };
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var foldM = function (dictMonad) {
      return function (f) {
          return function (a) {
              return $foreign["uncons'"](function (v) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(a);
              })(function (b) {
                  return function (bs) {
                      return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f(a)(b))(function (a$prime) {
                          return foldM(dictMonad)(f)(a$prime)(bs);
                      });
                  };
              });
          };
      };
  };
  var findLastIndex = $foreign.findLastIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var insertBy = function (cmp) {
      return function (x) {
          return function (ys) {
              var i = Data_Maybe.maybe(0)(function (v) {
                  return v + 1 | 0;
              })(findLastIndex(function (y) {
                  return Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(x)(y))(Data_Ordering.GT.value);
              })(ys));
              return Partial_Unsafe.unsafePartial(function (dictPartial) {
                  return Data_Maybe.fromJust(dictPartial)(insertAt(i)(x)(ys));
              });
          };
      };
  };
  var insert = function (dictOrd) {
      return insertBy(Data_Ord.compare(dictOrd));
  };
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var intersectBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return $foreign.filter(function (x) {
                  return Data_Maybe.isJust(findIndex(eq(x))(ys));
              })(xs);
          };
      };
  };
  var intersect = function (dictEq) {
      return intersectBy(Data_Eq.eq(dictEq));
  };
  var filterM = function (dictMonad) {
      return function (p) {
          return $foreign["uncons'"](function (v) {
              return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())([  ]);
          })(function (x) {
              return function (xs) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(p(x))(function (v) {
                      return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(filterM(dictMonad)(p)(xs))(function (v1) {
                          return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())((function () {
                              if (v) {
                                  return $foreign.cons(x)(v1);
                              };
                              if (!v) {
                                  return v1;
                              };
                              throw new Error("Failed pattern match at Data.Array line 402, column 3 - line 402, column 34: " + [ v.constructor.name ]);
                          })());
                      });
                  });
              };
          });
      };
  };
  var elemLastIndex = function (dictEq) {
      return function (x) {
          return findLastIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var dropWhile = function (p) {
      return function (xs) {
          return (span(p)(xs)).rest;
      };
  };
  var deleteAt = $foreign._deleteAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(v2)(function (i) {
                  return Data_Function.apply(Partial_Unsafe.unsafePartial)(function (dictPartial) {
                      return Data_Maybe.fromJust(dictPartial)(deleteAt(i)(v2));
                  });
              })(findIndex(v(v1))(v2));
          };
      };
  };
  var unionBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(xs)(Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Function.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
          };
      };
  };
  var union = function (dictEq) {
      return unionBy(Data_Eq.eq(dictEq));
  };
  var $$delete = function (dictEq) {
      return deleteBy(Data_Eq.eq(dictEq));
  };
  var difference = function (dictEq) {
      return function (xs) {
          return function (ys) {
              if ($$null(xs)) {
                  return [  ];
              };
              if (Data_Boolean.otherwise) {
                  return $foreign["uncons'"](Data_Function["const"](xs))(function (z) {
                      return function (zs) {
                          return difference(dictEq)($$delete(dictEq)(z)(xs))(zs);
                      };
                  })(ys);
              };
              throw new Error("Failed pattern match at Data.Array line 548, column 1 - line 550, column 67: " + [ xs.constructor.name, ys.constructor.name ]);
          };
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap(function ($70) {
          return Data_Maybe.maybe([  ])(singleton)(f($70));
      });
  };
  var catMaybes = mapMaybe(Control_Category.id(Control_Category.categoryFn));
  var alterAt = function (i) {
      return function (f) {
          return function (xs) {
              var go = function (x) {
                  var $67 = f(x);
                  if ($67 instanceof Data_Maybe.Nothing) {
                      return deleteAt(i)(xs);
                  };
                  if ($67 instanceof Data_Maybe.Just) {
                      return updateAt(i)($67.value0)(xs);
                  };
                  throw new Error("Failed pattern match at Data.Array line 360, column 10 - line 362, column 32: " + [ $67.constructor.name ]);
              };
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
          };
      };
  };
  exports["alterAt"] = alterAt;
  exports["catMaybes"] = catMaybes;
  exports["concatMap"] = concatMap;
  exports["delete"] = $$delete;
  exports["deleteAt"] = deleteAt;
  exports["deleteBy"] = deleteBy;
  exports["difference"] = difference;
  exports["dropWhile"] = dropWhile;
  exports["elemIndex"] = elemIndex;
  exports["elemLastIndex"] = elemLastIndex;
  exports["filterM"] = filterM;
  exports["findIndex"] = findIndex;
  exports["findLastIndex"] = findLastIndex;
  exports["foldM"] = foldM;
  exports["fromFoldable"] = fromFoldable;
  exports["group"] = group;
  exports["group'"] = group$prime;
  exports["groupBy"] = groupBy;
  exports["head"] = head;
  exports["index"] = index;
  exports["init"] = init;
  exports["insert"] = insert;
  exports["insertAt"] = insertAt;
  exports["insertBy"] = insertBy;
  exports["intersect"] = intersect;
  exports["intersectBy"] = intersectBy;
  exports["last"] = last;
  exports["many"] = many;
  exports["mapMaybe"] = mapMaybe;
  exports["modifyAt"] = modifyAt;
  exports["nub"] = nub;
  exports["nubBy"] = nubBy;
  exports["null"] = $$null;
  exports["singleton"] = singleton;
  exports["some"] = some;
  exports["sort"] = sort;
  exports["sortBy"] = sortBy;
  exports["span"] = span;
  exports["tail"] = tail;
  exports["takeWhile"] = takeWhile;
  exports["toUnfoldable"] = toUnfoldable;
  exports["uncons"] = uncons;
  exports["union"] = union;
  exports["unionBy"] = unionBy;
  exports["unzip"] = unzip;
  exports["updateAt"] = updateAt;
  exports["zip"] = zip;
  exports["zipWithA"] = zipWithA;
  exports["concat"] = $foreign.concat;
  exports["cons"] = $foreign.cons;
  exports["drop"] = $foreign.drop;
  exports["filter"] = $foreign.filter;
  exports["length"] = $foreign.length;
  exports["partition"] = $foreign.partition;
  exports["range"] = $foreign.range;
  exports["reverse"] = $foreign.reverse;
  exports["slice"] = $foreign.slice;
  exports["snoc"] = $foreign.snoc;
  exports["take"] = $foreign.take;
  exports["zipWith"] = $foreign.zipWith;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.String

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports.singleton = function (c) {
    return c;
  };

  exports._charCodeAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charCodeAt(i)) : nothing;
        };
      };
    };
  };

  exports._toChar = function (just) {
    return function (nothing) {
      return function (s) {
        return s.length === 1 ? just(s) : nothing;
      };
    };
  };

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports["_indexOf'"] = function (just) {
    return function (nothing) {
      return function (x) {
        return function (startAt) {
          return function (s) {
            if (startAt < 0 || startAt > s.length) return nothing;
            var i = s.indexOf(x, startAt);
            return i === -1 ? nothing : just(i);
          };
        };
      };
    };
  };

  exports._lastIndexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.lastIndexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports["_lastIndexOf'"] = function (just) {
    return function (nothing) {
      return function (x) {
        return function (startAt) {
          return function (s) {
            if (startAt < 0 || startAt > s.length) return nothing;
            var i = s.lastIndexOf(x, startAt);
            return i === -1 ? nothing : just(i);
          };
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._localeCompare = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (s1) {
          return function (s2) {
            var result = s1.localeCompare(s2);
            return result < 0 ? lt : result > 0 ? gt : eq;
          };
        };
      };
    };
  };

  exports.replace = function (s1) {
    return function (s2) {
      return function (s3) {
        return s3.replace(s1, s2);
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };

  exports.count = function (p) {
    return function (s) {
      for (var i = 0; i < s.length && p(s.charAt(i)); i++); {}
      return i;
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.toLower = function (s) {
    return s.toLowerCase();
  };

  exports.toUpper = function (s) {
    return s.toUpperCase();
  };

  exports.trim = function (s) {
    return s.trim();
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.String.Unsafe

  exports.charCodeAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charCodeAt(i);
      throw new Error("Data.String.Unsafe.charCodeAt: Invalid index.");
    };
  };

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };

  exports.char = function (s) {
    if (s.length === 1) return s.charAt(0);
    throw new Error("Data.String.Unsafe.char: Expected string of length 1.");
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.String.Unsafe"];
  exports["char"] = $foreign["char"];
  exports["charAt"] = $foreign.charAt;
  exports["charCodeAt"] = $foreign.charCodeAt;
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Function = PS["Data.Function"];        
  var uncons = function (v) {
      if (v === "") {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just({
          head: Data_String_Unsafe.charAt(0)(v), 
          tail: $foreign.drop(1)(v)
      });
  };
  var toChar = $foreign._toChar(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var takeWhile = function (p) {
      return function (s) {
          return $foreign.take($foreign.count(p)(s))(s);
      };
  };
  var $$null = function (s) {
      return $foreign.length(s) === 0;
  };
  var localeCompare = $foreign._localeCompare(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  var lastIndexOf$prime = $foreign["_lastIndexOf'"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var lastIndexOf = $foreign._lastIndexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var stripSuffix = function (suffix) {
      return function (str) {
          var $2 = lastIndexOf(suffix)(str);
          if ($2 instanceof Data_Maybe.Just && $2.value0 === $foreign.length(str) - $foreign.length(suffix)) {
              return Data_Function.apply(Data_Maybe.Just.create)($foreign.take($2.value0)(str));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var indexOf$prime = $foreign["_indexOf'"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var indexOf = $foreign._indexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var stripPrefix = function (prefix) {
      return function (str) {
          var $4 = indexOf(prefix)(str);
          if ($4 instanceof Data_Maybe.Just && $4.value0 === 0) {
              return Data_Function.apply(Data_Maybe.Just.create)($foreign.drop($foreign.length(prefix))(str));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var dropWhile = function (p) {
      return function (s) {
          return $foreign.drop($foreign.count(p)(s))(s);
      };
  };
  var contains = function (x) {
      return function (s) {
          return Data_Maybe.isJust(indexOf(x)(s));
      };
  };
  var charCodeAt = $foreign._charCodeAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var charAt = $foreign._charAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["charAt"] = charAt;
  exports["charCodeAt"] = charCodeAt;
  exports["contains"] = contains;
  exports["dropWhile"] = dropWhile;
  exports["indexOf"] = indexOf;
  exports["indexOf'"] = indexOf$prime;
  exports["lastIndexOf"] = lastIndexOf;
  exports["lastIndexOf'"] = lastIndexOf$prime;
  exports["localeCompare"] = localeCompare;
  exports["null"] = $$null;
  exports["stripPrefix"] = stripPrefix;
  exports["stripSuffix"] = stripSuffix;
  exports["takeWhile"] = takeWhile;
  exports["toChar"] = toChar;
  exports["uncons"] = uncons;
  exports["drop"] = $foreign.drop;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["joinWith"] = $foreign.joinWith;
  exports["length"] = $foreign.length;
  exports["replace"] = $foreign.replace;
  exports["singleton"] = $foreign.singleton;
  exports["split"] = $foreign.split;
  exports["take"] = $foreign.take;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["toLower"] = $foreign.toLower;
  exports["toUpper"] = $foreign.toUpper;
  exports["trim"] = $foreign.trim;
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Proxy3 = (function () {
      function Proxy3() {

      };
      Proxy3.value = new Proxy3();
      return Proxy3;
  })();
  var Proxy2 = (function () {
      function Proxy2() {

      };
      Proxy2.value = new Proxy2();
      return Proxy2;
  })();
  var $$Proxy = (function () {
      function Proxy() {

      };
      Proxy.value = new Proxy();
      return Proxy;
  })();
  exports["Proxy"] = $$Proxy;
  exports["Proxy2"] = Proxy2;
  exports["Proxy3"] = Proxy3;
})(PS["Type.Proxy"] = PS["Type.Proxy"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Generic"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Type_Proxy = PS["Type.Proxy"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Function = PS["Data.Function"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];        
  var SProd = (function () {
      function SProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SProd.create = function (value0) {
          return function (value1) {
              return new SProd(value0, value1);
          };
      };
      return SProd;
  })();
  var SRecord = (function () {
      function SRecord(value0) {
          this.value0 = value0;
      };
      SRecord.create = function (value0) {
          return new SRecord(value0);
      };
      return SRecord;
  })();
  var SNumber = (function () {
      function SNumber(value0) {
          this.value0 = value0;
      };
      SNumber.create = function (value0) {
          return new SNumber(value0);
      };
      return SNumber;
  })();
  var SBoolean = (function () {
      function SBoolean(value0) {
          this.value0 = value0;
      };
      SBoolean.create = function (value0) {
          return new SBoolean(value0);
      };
      return SBoolean;
  })();
  var SInt = (function () {
      function SInt(value0) {
          this.value0 = value0;
      };
      SInt.create = function (value0) {
          return new SInt(value0);
      };
      return SInt;
  })();
  var SString = (function () {
      function SString(value0) {
          this.value0 = value0;
      };
      SString.create = function (value0) {
          return new SString(value0);
      };
      return SString;
  })();
  var SChar = (function () {
      function SChar(value0) {
          this.value0 = value0;
      };
      SChar.create = function (value0) {
          return new SChar(value0);
      };
      return SChar;
  })();
  var SArray = (function () {
      function SArray(value0) {
          this.value0 = value0;
      };
      SArray.create = function (value0) {
          return new SArray(value0);
      };
      return SArray;
  })();
  var SUnit = (function () {
      function SUnit() {

      };
      SUnit.value = new SUnit();
      return SUnit;
  })();
  var SigProd = (function () {
      function SigProd(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SigProd.create = function (value0) {
          return function (value1) {
              return new SigProd(value0, value1);
          };
      };
      return SigProd;
  })();
  var SigRecord = (function () {
      function SigRecord(value0) {
          this.value0 = value0;
      };
      SigRecord.create = function (value0) {
          return new SigRecord(value0);
      };
      return SigRecord;
  })();
  var SigNumber = (function () {
      function SigNumber() {

      };
      SigNumber.value = new SigNumber();
      return SigNumber;
  })();
  var SigBoolean = (function () {
      function SigBoolean() {

      };
      SigBoolean.value = new SigBoolean();
      return SigBoolean;
  })();
  var SigInt = (function () {
      function SigInt() {

      };
      SigInt.value = new SigInt();
      return SigInt;
  })();
  var SigString = (function () {
      function SigString() {

      };
      SigString.value = new SigString();
      return SigString;
  })();
  var SigChar = (function () {
      function SigChar() {

      };
      SigChar.value = new SigChar();
      return SigChar;
  })();
  var SigArray = (function () {
      function SigArray(value0) {
          this.value0 = value0;
      };
      SigArray.create = function (value0) {
          return new SigArray(value0);
      };
      return SigArray;
  })();
  var SigUnit = (function () {
      function SigUnit() {

      };
      SigUnit.value = new SigUnit();
      return SigUnit;
  })();
  var Generic = function (fromSpine, toSignature, toSpine) {
      this.fromSpine = fromSpine;
      this.toSignature = toSignature;
      this.toSpine = toSpine;
  };
  var toSpine = function (dict) {
      return dict.toSpine;
  };
  var toSignature = function (dict) {
      return dict.toSignature;
  };
  var showArray = function (f) {
      return function (xs) {
          return "[ " + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(", ")(Data_Functor.map(Data_Functor.functorArray)(f)(xs)) + " ]");
      };
  };
  var orderingToInt = function (v) {
      if (v instanceof Data_Ordering.EQ) {
          return 0;
      };
      if (v instanceof Data_Ordering.LT) {
          return 1;
      };
      if (v instanceof Data_Ordering.GT) {
          return -1;
      };
      throw new Error("Failed pattern match at Data.Generic line 427, column 17 - line 430, column 10: " + [ v.constructor.name ]);
  };
  var genericUnit = new Generic(function (v) {
      if (v instanceof SUnit) {
          return new Data_Maybe.Just(Data_Unit.unit);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigUnit.value;
  }, function (v) {
      return SUnit.value;
  });
  var genericString = new Generic(function (v) {
      if (v instanceof SString) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigString.value;
  }, SString.create);
  var genericOrdering = new Generic(function (v) {
      if (v instanceof SProd && (v.value0 === "Data.Either.LT" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Data_Ordering.LT.value);
      };
      if (v instanceof SProd && (v.value0 === "Data.Either.EQ" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Data_Ordering.EQ.value);
      };
      if (v instanceof SProd && (v.value0 === "Data.Either.GT" && v.value1.length === 0)) {
          return new Data_Maybe.Just(Data_Ordering.GT.value);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return new SigProd("Data.Ordering.Ordering", [ {
          sigConstructor: "Data.Ordering.LT", 
          sigValues: [  ]
      }, {
          sigConstructor: "Data.Ordering.EQ", 
          sigValues: [  ]
      }, {
          sigConstructor: "Data.Ordering.GT", 
          sigValues: [  ]
      } ]);
  }, function (v) {
      if (v instanceof Data_Ordering.LT) {
          return new SProd("Data.Ordering.LT", [  ]);
      };
      if (v instanceof Data_Ordering.EQ) {
          return new SProd("Data.Ordering.EQ", [  ]);
      };
      if (v instanceof Data_Ordering.GT) {
          return new SProd("Data.Ordering.GT", [  ]);
      };
      throw new Error("Failed pattern match at Data.Generic line 150, column 13 - line 153, column 38: " + [ v.constructor.name ]);
  });
  var genericNumber = new Generic(function (v) {
      if (v instanceof SNumber) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigNumber.value;
  }, SNumber.create);
  var genericInt = new Generic(function (v) {
      if (v instanceof SInt) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigInt.value;
  }, SInt.create);
  var genericChar = new Generic(function (v) {
      if (v instanceof SChar) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigChar.value;
  }, SChar.create);
  var genericBool = new Generic(function (v) {
      if (v instanceof SBoolean) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      return SigBoolean.value;
  }, SBoolean.create);
  var fromSpine = function (dict) {
      return dict.fromSpine;
  };
  var force = function (f) {
      return f(Data_Unit.unit);
  };
  var genericArray = function (dictGeneric) {
      return new Generic(function (v) {
          if (v instanceof SArray) {
              return Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(function ($237) {
                  return fromSpine(dictGeneric)(force($237));
              })(v.value0);
          };
          return Data_Maybe.Nothing.value;
      }, function (x) {
          var lowerProxy = function (v) {
              return (Type_Proxy["Proxy"]).value;
          };
          return new SigArray(function (v) {
              return toSignature(dictGeneric)(lowerProxy(x));
          });
      }, function ($238) {
          return SArray.create(Data_Functor.map(Data_Functor.functorArray)(function (x) {
              return function (v) {
                  return toSpine(dictGeneric)(x);
              };
          })($238));
      });
  };
  var genericEither = function (dictGeneric) {
      return function (dictGeneric1) {
          return new Generic(function (v) {
              if (v instanceof SProd && (v.value0 === "Data.Either.Left" && v.value1.length === 1)) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Either.Left.create)(fromSpine(dictGeneric)(force(v.value1[0])));
              };
              if (v instanceof SProd && (v.value0 === "Data.Either.Right" && v.value1.length === 1)) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Either.Right.create)(fromSpine(dictGeneric1)(force(v.value1[0])));
              };
              return Data_Maybe.Nothing.value;
          }, function (x) {
              var rproxy = function (v) {
                  return (Type_Proxy["Proxy"]).value;
              };
              var lproxy = function (v) {
                  return (Type_Proxy["Proxy"]).value;
              };
              return new SigProd("Data.Either.Either", [ {
                  sigConstructor: "Data.Either.Left", 
                  sigValues: [ function (v) {
                      return toSignature(dictGeneric)(lproxy(x));
                  } ]
              }, {
                  sigConstructor: "Data.Either.Right", 
                  sigValues: [ function (v) {
                      return toSignature(dictGeneric1)(rproxy(x));
                  } ]
              } ]);
          }, function (v) {
              if (v instanceof Data_Either.Left) {
                  return new SProd("Data.Either.Left", [ function (v1) {
                      return toSpine(dictGeneric)(v.value0);
                  } ]);
              };
              if (v instanceof Data_Either.Right) {
                  return new SProd("Data.Either.Right", [ function (v1) {
                      return toSpine(dictGeneric1)(v.value0);
                  } ]);
              };
              throw new Error("Failed pattern match at Data.Generic line 128, column 3 - line 128, column 64: " + [ v.constructor.name ]);
          });
      };
  };
  var genericMaybe = function (dictGeneric) {
      return new Generic(function (v) {
          if (v instanceof SProd && (v.value0 === "Data.Maybe.Just" && v.value1.length === 1)) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Maybe.Just.create)(fromSpine(dictGeneric)(force(v.value1[0])));
          };
          if (v instanceof SProd && (v.value0 === "Data.Maybe.Nothing" && v.value1.length === 0)) {
              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(Data_Maybe.Nothing.value);
          };
          return Data_Maybe.Nothing.value;
      }, function (x) {
          var mbProxy = function (v) {
              return (Type_Proxy["Proxy"]).value;
          };
          return new SigProd("Data.Maybe.Maybe", [ {
              sigConstructor: "Data.Maybe.Just", 
              sigValues: [ function (v) {
                  return toSignature(dictGeneric)(mbProxy(x));
              } ]
          }, {
              sigConstructor: "Data.Maybe.Nothing", 
              sigValues: [  ]
          } ]);
      }, function (v) {
          if (v instanceof Data_Maybe.Just) {
              return new SProd("Data.Maybe.Just", [ function (v1) {
                  return toSpine(dictGeneric)(v.value0);
              } ]);
          };
          if (v instanceof Data_Maybe.Nothing) {
              return new SProd("Data.Maybe.Nothing", [  ]);
          };
          throw new Error("Failed pattern match at Data.Generic line 108, column 3 - line 108, column 63: " + [ v.constructor.name ]);
      });
  };
  var genericShowPrec = function (v) {
      return function (v1) {
          if (v1 instanceof SProd) {
              if (Data_Array["null"](v1.value1)) {
                  return v1.value0;
              };
              if (Data_Boolean.otherwise) {
                  var showParen = function (v2) {
                      return function (x) {
                          if (!v2) {
                              return x;
                          };
                          if (v2) {
                              return "(" + (x + ")");
                          };
                          throw new Error("Failed pattern match at Data.Generic line 356, column 7 - line 356, column 28: " + [ v2.constructor.name, x.constructor.name ]);
                      };
                  };
                  return Data_Function.apply(showParen(v > 10))(v1.value0 + (" " + Data_String.joinWith(" ")(Data_Functor.map(Data_Functor.functorArray)(function (x) {
                      return genericShowPrec(11)(force(x));
                  })(v1.value1))));
              };
          };
          if (v1 instanceof SRecord) {
              var showLabelPart = function (x) {
                  return x.recLabel + (": " + genericShowPrec(0)(force(x.recValue)));
              };
              return "{" + (Data_String.joinWith(", ")(Data_Functor.map(Data_Functor.functorArray)(showLabelPart)(v1.value0)) + "}");
          };
          if (v1 instanceof SBoolean) {
              return Data_Show.show(Data_Show.showBoolean)(v1.value0);
          };
          if (v1 instanceof SInt) {
              return Data_Show.show(Data_Show.showInt)(v1.value0);
          };
          if (v1 instanceof SNumber) {
              return Data_Show.show(Data_Show.showNumber)(v1.value0);
          };
          if (v1 instanceof SString) {
              return Data_Show.show(Data_Show.showString)(v1.value0);
          };
          if (v1 instanceof SChar) {
              return Data_Show.show(Data_Show.showChar)(v1.value0);
          };
          if (v1 instanceof SArray) {
              return "[" + (Data_String.joinWith(", ")(Data_Functor.map(Data_Functor.functorArray)(function (x) {
                  return genericShowPrec(0)(force(x));
              })(v1.value0)) + "]");
          };
          if (v1 instanceof SUnit) {
              return "unit";
          };
          throw new Error("Failed pattern match at Data.Generic line 350, column 1 - line 358, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var gShow = function (dictGeneric) {
      return function ($239) {
          return genericShowPrec(0)(toSpine(dictGeneric)($239));
      };
  };
  var genericTuple = function (dictGeneric) {
      return function (dictGeneric1) {
          return new Generic(function (v) {
              if (v instanceof SProd && (v.value0 === "Data.Tuple.Tuple" && v.value1.length === 2)) {
                  return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create)(fromSpine(dictGeneric)(force(v.value1[0]))))(fromSpine(dictGeneric1)(force(v.value1[1])));
              };
              return Data_Maybe.Nothing.value;
          }, function (x) {
              var sndProxy = function (v) {
                  return (Type_Proxy["Proxy"]).value;
              };
              var fstProxy = function (v) {
                  return (Type_Proxy["Proxy"]).value;
              };
              return new SigProd("Data.Tuple.Tuple", [ {
                  sigConstructor: "Data.Tuple.Tuple", 
                  sigValues: [ function (v) {
                      return toSignature(dictGeneric)(fstProxy(x));
                  }, function (v) {
                      return toSignature(dictGeneric1)(sndProxy(x));
                  } ]
              } ]);
          }, function (v) {
              return new SProd("Data.Tuple.Tuple", [ function (v1) {
                  return toSpine(dictGeneric)(v.value0);
              }, function (v1) {
                  return toSpine(dictGeneric1)(v.value1);
              } ]);
          });
      };
  };
  var isValidSpine = function (v) {
      return function (v1) {
          if (v instanceof SigBoolean && v1 instanceof SBoolean) {
              return true;
          };
          if (v instanceof SigNumber && v1 instanceof SNumber) {
              return true;
          };
          if (v instanceof SigInt && v1 instanceof SInt) {
              return true;
          };
          if (v instanceof SigString && v1 instanceof SString) {
              return true;
          };
          if (v instanceof SigChar && v1 instanceof SChar) {
              return true;
          };
          if (v instanceof SigArray && v1 instanceof SArray) {
              return Data_Foldable.all(Data_Foldable.foldableArray)(Data_BooleanAlgebra.booleanAlgebraBoolean)(function ($240) {
                  return isValidSpine(force(v.value0))(force($240));
              })(v1.value0);
          };
          if (v instanceof SigProd && v1 instanceof SProd) {
              var $147 = Data_Foldable.find(Data_Foldable.foldableArray)(function (alt) {
                  return alt.sigConstructor === v1.value0;
              })(v.value1);
              if ($147 instanceof Data_Maybe.Nothing) {
                  return false;
              };
              if ($147 instanceof Data_Maybe.Just) {
                  return Data_Function.apply(Data_Foldable.and(Data_Foldable.foldableArray)(Data_BooleanAlgebra.booleanAlgebraBoolean))(Data_Array.zipWith(function (sig) {
                      return function (spine) {
                          return isValidSpine(force(sig))(force(spine));
                      };
                  })($147.value0.sigValues)(v1.value1));
              };
              throw new Error("Failed pattern match at Data.Generic line 327, column 3 - line 333, column 15: " + [ $147.constructor.name ]);
          };
          if (v instanceof SigRecord && v1 instanceof SRecord) {
              return Data_Function.apply(Data_Foldable.and(Data_Foldable.foldableArray)(Data_BooleanAlgebra.booleanAlgebraBoolean))(Data_Array.zipWith(function (sig) {
                  return function (val) {
                      return isValidSpine(force(sig.recValue))(force(val.recValue));
                  };
              })(Data_Array.sortBy(function (a) {
                  return function (b) {
                      return Data_Ord.compare(Data_Ord.ordString)(a.recLabel)(b.recLabel);
                  };
              })(v.value0))(Data_Array.sortBy(function (a) {
                  return function (b) {
                      return Data_Ord.compare(Data_Ord.ordString)(a.recLabel)(b.recLabel);
                  };
              })(v1.value0)));
          };
          if (v instanceof SigUnit && v1 instanceof SUnit) {
              return true;
          };
          return false;
      };
  };
  var showSignature = function (sig) {
      var needsParen = function (s) {
          if (s instanceof SigProd) {
              return true;
          };
          if (s instanceof SigRecord) {
              return true;
          };
          if (s instanceof SigNumber) {
              return false;
          };
          if (s instanceof SigBoolean) {
              return false;
          };
          if (s instanceof SigInt) {
              return false;
          };
          if (s instanceof SigString) {
              return false;
          };
          if (s instanceof SigChar) {
              return false;
          };
          if (s instanceof SigArray) {
              return true;
          };
          if (s instanceof SigUnit) {
              return false;
          };
          throw new Error("Failed pattern match at Data.Generic line 293, column 18 - line 302, column 21: " + [ s.constructor.name ]);
      };
      var paren = function (s) {
          if (needsParen(s)) {
              return "(" + (showSignature(s) + ")");
          };
          if (Data_Boolean.otherwise) {
              return showSignature(s);
          };
          throw new Error("Failed pattern match at Data.Generic line 275, column 1 - line 302, column 21: " + [ s.constructor.name ]);
      };
      return Data_Function.apply(Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString))((function () {
          if (sig instanceof SigProd) {
              return [ "SigProd ", Data_Show.show(Data_Show.showString)(sig.value0), " ", showArray(showDataConstructor)(sig.value1) ];
          };
          if (sig instanceof SigRecord) {
              return [ "SigRecord ", showArray(showLabel)(sig.value0) ];
          };
          if (sig instanceof SigNumber) {
              return [ "SigNumber" ];
          };
          if (sig instanceof SigBoolean) {
              return [ "SigBoolean" ];
          };
          if (sig instanceof SigInt) {
              return [ "SigInt" ];
          };
          if (sig instanceof SigString) {
              return [ "SigString" ];
          };
          if (sig instanceof SigChar) {
              return [ "SigChar" ];
          };
          if (sig instanceof SigArray) {
              return [ "SigArray ", paren(force(sig.value0)) ];
          };
          if (sig instanceof SigUnit) {
              return [ "SigUnit" ];
          };
          throw new Error("Failed pattern match at Data.Generic line 276, column 3 - line 286, column 27: " + [ sig.constructor.name ]);
      })());
  };
  var showLabel = function (l) {
      return "{ recLabel: " + (Data_Show.show(Data_Show.showString)(l.recLabel) + (", recValue: " + (showSignature(force(l.recValue)) + " }")));
  };
  var showDataConstructor = function (dc) {
      return "{ sigConstructor: " + (Data_Show.show(Data_Show.showString)(dc.sigConstructor) + (", sigValues: " + (showArray(function ($241) {
          return showSignature(force($241));
      })(dc.sigValues) + "}")));
  };
  var showGenericSignature = new Data_Show.Show(showSignature);
  var eqThunk = function (dictEq) {
      return function (x) {
          return function (y) {
              return Data_Eq.eq(dictEq)(force(x))(force(y));
          };
      };
  };
  var eqRecordSigs = function (dictEq) {
      return function (arr1) {
          return function (arr2) {
              var labelCompare = function (r1) {
                  return function (r2) {
                      return Data_Ord.compare(Data_Ord.ordString)(r1.recLabel)(r2.recLabel);
                  };
              };
              var sorted1 = Data_Array.sortBy(labelCompare)(arr1);
              var sorted2 = Data_Array.sortBy(labelCompare)(arr2);
              var doCmp = function (x) {
                  return function (y) {
                      return x.recLabel === y.recLabel && Data_Eq.eq(dictEq)(force(x.recValue))(force(y.recValue));
                  };
              };
              return Data_Array.length(arr1) === Data_Array.length(arr2) && $foreign.zipAll(doCmp)(sorted1)(sorted2);
          };
      };
  };
  var eqGenericSpine = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof SProd && v1 instanceof SProd) {
              return v.value0 === v1.value0 && (Data_Array.length(v.value1) === Data_Array.length(v1.value1) && $foreign.zipAll(eqThunk(eqGenericSpine))(v.value1)(v1.value1));
          };
          if (v instanceof SRecord && v1 instanceof SRecord) {
              return eqRecordSigs(eqGenericSpine)(v.value0)(v1.value0);
          };
          if (v instanceof SNumber && v1 instanceof SNumber) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SBoolean && v1 instanceof SBoolean) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SInt && v1 instanceof SInt) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SString && v1 instanceof SString) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SChar && v1 instanceof SChar) {
              return v.value0 === v1.value0;
          };
          if (v instanceof SArray && v1 instanceof SArray) {
              return Data_Array.length(v.value0) === Data_Array.length(v1.value0) && $foreign.zipAll(eqThunk(eqGenericSpine))(v.value0)(v1.value0);
          };
          if (v instanceof SUnit && v1 instanceof SUnit) {
              return true;
          };
          return false;
      };
  });
  var gEq = function (dictGeneric) {
      return function (x) {
          return function (y) {
              return Data_Eq.eq(eqGenericSpine)(toSpine(dictGeneric)(x))(toSpine(dictGeneric)(y));
          };
      };
  };
  var eqGenericSignature = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof SigProd && v1 instanceof SigProd) {
              return v.value0 === v1.value0 && (Data_Array.length(v.value1) === Data_Array.length(v1.value1) && $foreign.zipAll(eqDataConstructor)(v.value1)(v1.value1));
          };
          if (v instanceof SigRecord && v1 instanceof SigRecord) {
              return eqRecordSigs(eqGenericSignature)(v.value0)(v1.value0);
          };
          if (v instanceof SigNumber && v1 instanceof SigNumber) {
              return true;
          };
          if (v instanceof SigBoolean && v1 instanceof SigBoolean) {
              return true;
          };
          if (v instanceof SigInt && v1 instanceof SigInt) {
              return true;
          };
          if (v instanceof SigString && v1 instanceof SigString) {
              return true;
          };
          if (v instanceof SigChar && v1 instanceof SigChar) {
              return true;
          };
          if (v instanceof SigArray && v1 instanceof SigArray) {
              return eqThunk(eqGenericSignature)(v.value0)(v1.value0);
          };
          if (v instanceof SigUnit && v1 instanceof SigUnit) {
              return true;
          };
          return false;
      };
  });
  var eqDataConstructor = function (p1) {
      return function (p2) {
          return p1.sigConstructor === p2.sigConstructor && $foreign.zipAll(eqThunk(eqGenericSignature))(p1.sigValues)(p2.sigValues);
      };
  };
  var compareThunk = function (dictOrd) {
      return function (x) {
          return function (y) {
              return Data_Function.apply(orderingToInt)(Data_Ord.compare(dictOrd)(force(x))(force(y)));
          };
      };
  };
  var ordGenericSpine = new Data_Ord.Ord(function () {
      return eqGenericSpine;
  }, function (v) {
      return function (v1) {
          if (v instanceof SProd && v1 instanceof SProd) {
              var $199 = Data_Ord.compare(Data_Ord.ordString)(v.value0)(v1.value0);
              if ($199 instanceof Data_Ordering.EQ) {
                  return Data_Function.apply(Data_Ord.compare(Data_Ord.ordInt)(0))($foreign.zipCompare(compareThunk(ordGenericSpine))(v.value1)(v1.value1));
              };
              return $199;
          };
          if (v instanceof SProd) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof SProd) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof SRecord && v1 instanceof SRecord) {
              var go = function (x) {
                  return function (y) {
                      var $208 = Data_Ord.compare(Data_Ord.ordString)(x.recLabel)(y.recLabel);
                      if ($208 instanceof Data_Ordering.EQ) {
                          return Data_Function.apply(orderingToInt)(Data_Ord.compare(ordGenericSpine)(force(x.recValue))(force(y.recValue)));
                      };
                      return orderingToInt($208);
                  };
              };
              return Data_Function.apply(Data_Ord.compare(Data_Ord.ordInt)(0))($foreign.zipCompare(go)(v.value0)(v1.value0));
          };
          if (v instanceof SRecord) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof SRecord) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof SInt && v1 instanceof SInt) {
              return Data_Ord.compare(Data_Ord.ordInt)(v.value0)(v1.value0);
          };
          if (v instanceof SInt) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof SInt) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof SBoolean && v1 instanceof SBoolean) {
              return Data_Ord.compare(Data_Ord.ordBoolean)(v.value0)(v1.value0);
          };
          if (v instanceof SBoolean) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof SBoolean) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof SNumber && v1 instanceof SNumber) {
              return Data_Ord.compare(Data_Ord.ordNumber)(v.value0)(v1.value0);
          };
          if (v instanceof SNumber) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof SNumber) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof SString && v1 instanceof SString) {
              return Data_Ord.compare(Data_Ord.ordString)(v.value0)(v1.value0);
          };
          if (v instanceof SString) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof SString) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof SChar && v1 instanceof SChar) {
              return Data_Ord.compare(Data_Ord.ordChar)(v.value0)(v1.value0);
          };
          if (v instanceof SChar) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof SChar) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof SArray && v1 instanceof SArray) {
              return Data_Function.apply(Data_Ord.compare(Data_Ord.ordInt)(0))($foreign.zipCompare(compareThunk(ordGenericSpine))(v.value0)(v1.value0));
          };
          if (v instanceof SArray) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof SArray) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof SUnit && v1 instanceof SUnit) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Data.Generic line 194, column 3 - line 197, column 15: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var gCompare = function (dictGeneric) {
      return function (x) {
          return function (y) {
              return Data_Ord.compare(ordGenericSpine)(toSpine(dictGeneric)(x))(toSpine(dictGeneric)(y));
          };
      };
  };
  exports["SigProd"] = SigProd;
  exports["SigRecord"] = SigRecord;
  exports["SigNumber"] = SigNumber;
  exports["SigBoolean"] = SigBoolean;
  exports["SigInt"] = SigInt;
  exports["SigString"] = SigString;
  exports["SigChar"] = SigChar;
  exports["SigArray"] = SigArray;
  exports["SigUnit"] = SigUnit;
  exports["SProd"] = SProd;
  exports["SRecord"] = SRecord;
  exports["SNumber"] = SNumber;
  exports["SBoolean"] = SBoolean;
  exports["SInt"] = SInt;
  exports["SString"] = SString;
  exports["SChar"] = SChar;
  exports["SArray"] = SArray;
  exports["SUnit"] = SUnit;
  exports["Generic"] = Generic;
  exports["fromSpine"] = fromSpine;
  exports["gCompare"] = gCompare;
  exports["gEq"] = gEq;
  exports["gShow"] = gShow;
  exports["isValidSpine"] = isValidSpine;
  exports["showDataConstructor"] = showDataConstructor;
  exports["showSignature"] = showSignature;
  exports["toSignature"] = toSignature;
  exports["toSpine"] = toSpine;
  exports["genericNumber"] = genericNumber;
  exports["genericInt"] = genericInt;
  exports["genericString"] = genericString;
  exports["genericChar"] = genericChar;
  exports["genericBool"] = genericBool;
  exports["genericArray"] = genericArray;
  exports["genericUnit"] = genericUnit;
  exports["genericTuple"] = genericTuple;
  exports["genericMaybe"] = genericMaybe;
  exports["genericEither"] = genericEither;
  exports["genericOrdering"] = genericOrdering;
  exports["eqGenericSpine"] = eqGenericSpine;
  exports["ordGenericSpine"] = ordGenericSpine;
  exports["eqGenericSignature"] = eqGenericSignature;
  exports["showGenericSignature"] = showGenericSignature;
})(PS["Data.Generic"] = PS["Data.Generic"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Control_Category = PS["Control.Category"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var updateAt = function (v) {
      return function (v1) {
          return function (v2) {
              if (v === 0 && v2 instanceof Cons) {
                  return new Data_Maybe.Just(new Cons(v1, v2.value1));
              };
              if (v2 instanceof Cons) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(Cons.create(v2.value0))(updateAt(v - 1)(v1)(v2.value1));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Cons) {
          return new Data_Maybe.Just({
              head: v.value0, 
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List line 251, column 1 - line 251, column 21: " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List line 232, column 1 - line 232, column 19: " + [ v.constructor.name ]);
  };
  var span = function (v) {
      return function (v1) {
          if (v1 instanceof Cons && v(v1.value0)) {
              var $138 = span(v)(v1.value1);
              return {
                  init: new Cons(v1.value0, $138.init), 
                  rest: $138.rest
              };
          };
          return {
              init: Nil.value, 
              rest: v1
          };
      };
  };
  var singleton = function (a) {
      return new Cons(a, Nil.value);
  };
  var sortBy = function (cmp) {
      var merge = function (v) {
          return function (v1) {
              if (v instanceof Cons && v1 instanceof Cons) {
                  if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1.value0))(Data_Ordering.GT.value)) {
                      return new Cons(v1.value0, merge(v)(v1.value1));
                  };
                  if (Data_Boolean.otherwise) {
                      return new Cons(v.value0, merge(v.value1)(v1));
                  };
              };
              if (v instanceof Nil) {
                  return v1;
              };
              if (v1 instanceof Nil) {
                  return v;
              };
              throw new Error("Failed pattern match at Data.List line 456, column 3 - line 458, column 40: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
      var mergePairs = function (v) {
          if (v instanceof Cons && v.value1 instanceof Cons) {
              return new Cons(merge(v.value0)(v.value1.value0), mergePairs(v.value1.value1));
          };
          return v;
      };
      var mergeAll = function (__copy_v) {
          var v = __copy_v;
          tco: while (true) {
              if (v instanceof Cons && v.value1 instanceof Nil) {
                  return v.value0;
              };
              var __tco_v = mergePairs(v);
              v = __tco_v;
              continue tco;
          };
      };
      var sequences = function (v) {
          if (v instanceof Cons && v.value1 instanceof Cons) {
              if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v.value1.value0))(Data_Ordering.GT.value)) {
                  return descending(v.value1.value0)(singleton(v.value0))(v.value1.value1);
              };
              if (Data_Boolean.otherwise) {
                  return ascending(v.value1.value0)(Cons.create(v.value0))(v.value1.value1);
              };
          };
          return singleton(v);
      };
      var descending = function (__copy_a) {
          return function (__copy_as) {
              return function (__copy_v) {
                  var a = __copy_a;
                  var as = __copy_as;
                  var v = __copy_v;
                  tco: while (true) {
                      if (v instanceof Cons && Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                          var __tco_a = v.value0;
                          var __tco_as = new Cons(a, as);
                          var __tco_v = v.value1;
                          a = __tco_a;
                          as = __tco_as;
                          v = __tco_v;
                          continue tco;
                      };
                      return new Cons(new Cons(a, as), sequences(v));
                  };
              };
          };
      };
      var ascending = function (a) {
          return function (as) {
              return function (v) {
                  if (v instanceof Cons && Data_Eq.notEq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                      return ascending(v.value0)(function (ys) {
                          return as(new Cons(a, ys));
                      })(v.value1);
                  };
                  return new Cons(Data_Function.apply(as)(singleton(a)), sequences(v));
              };
          };
      };
      return function ($385) {
          return mergeAll(sequences($385));
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var showList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Nil) {
              return "Nil";
          };
          if (v instanceof Cons) {
              return "(Cons " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(showList(dictShow))(v.value1) + ")")));
          };
          throw new Error("Failed pattern match at Data.List line 696, column 3 - line 697, column 3: " + [ v.constructor.name ]);
      });
  };
  var semigroupList = new Data_Semigroup.Semigroup(function (v) {
      return function (ys) {
          if (v instanceof Nil) {
              return ys;
          };
          if (v instanceof Cons) {
              return new Cons(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(ys));
          };
          throw new Error("Failed pattern match at Data.List line 719, column 3 - line 719, column 21: " + [ v.constructor.name, ys.constructor.name ]);
      };
  });
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return acc;
                  };
                  if (v instanceof Cons) {
                      var __tco_acc = new Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 346, column 1 - line 349, column 42: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  })();
  var snoc = function (xs) {
      return function (x) {
          return reverse(new Cons(x, reverse(xs)));
      };
  };
  var take = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              return function (__copy_v1) {
                  var acc = __copy_acc;
                  var v = __copy_v;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      if (v === 0) {
                          return reverse(acc);
                      };
                      if (v1 instanceof Nil) {
                          return reverse(acc);
                      };
                      if (v1 instanceof Cons) {
                          var __tco_acc = new Cons(v1.value0, acc);
                          var __tco_v = v - 1;
                          var __tco_v1 = v1.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 474, column 1 - line 478, column 52: " + [ acc.constructor.name, v.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
      return go(Nil.value);
  })();
  var takeWhile = function (p) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Cons && p(v.value0)) {
                      var __tco_acc = new Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  return reverse(acc);
              };
          };
      };
      return go(Nil.value);
  };
  var unfoldableList = new Data_Unfoldable.Unfoldable(function (f) {
      return function (b) {
          var go = function (__copy_source) {
              return function (__copy_memo) {
                  var source = __copy_source;
                  var memo = __copy_memo;
                  tco: while (true) {
                      var $192 = f(source);
                      if ($192 instanceof Data_Maybe.Nothing) {
                          return reverse(memo);
                      };
                      if ($192 instanceof Data_Maybe.Just) {
                          var __tco_memo = new Cons($192.value0.value0, memo);
                          source = $192.value0.value1;
                          memo = __tco_memo;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 743, column 24 - line 745, column 57: " + [ $192.constructor.name ]);
                  };
              };
          };
          return go(b)(Nil.value);
      };
  });
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function (v) {
                  return function (v1) {
                      return function (acc) {
                          if (v instanceof Nil) {
                              return acc;
                          };
                          if (v1 instanceof Nil) {
                              return acc;
                          };
                          if (v instanceof Cons && v1 instanceof Cons) {
                              return Data_Function.apply(go(v.value1)(v1.value1))(new Cons(f(v.value0)(v1.value0), acc));
                          };
                          throw new Error("Failed pattern match at Data.List line 638, column 1 - line 642, column 63: " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                      };
                  };
              };
              return Data_Function.apply(reverse)(go(xs)(ys)(Nil.value));
          };
      };
  };
  var zip = zipWith(Data_Tuple.Tuple.create);
  var range = function (start) {
      return function (end) {
          if (start === end) {
              return singleton(start);
          };
          if (Data_Boolean.otherwise) {
              var go = function (__copy_s) {
                  return function (__copy_e) {
                      return function (__copy_step) {
                          return function (__copy_rest) {
                              var s = __copy_s;
                              var e = __copy_e;
                              var step = __copy_step;
                              var rest = __copy_rest;
                              tco: while (true) {
                                  if (s === e) {
                                      return new Cons(s, rest);
                                  };
                                  if (Data_Boolean.otherwise) {
                                      var __tco_s = s + step | 0;
                                      var __tco_e = e;
                                      var __tco_step = step;
                                      var __tco_rest = new Cons(s, rest);
                                      s = __tco_s;
                                      e = __tco_e;
                                      step = __tco_step;
                                      rest = __tco_rest;
                                      continue tco;
                                  };
                                  throw new Error("Failed pattern match at Data.List line 138, column 1 - line 142, column 68: " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                              };
                          };
                      };
                  };
              };
              return go(end)(start)((function () {
                  var $209 = start > end;
                  if ($209) {
                      return 1;
                  };
                  if (!$209) {
                      return -1;
                  };
                  throw new Error("Failed pattern match at Data.List line 139, column 45 - line 139, column 74: " + [ $209.constructor.name ]);
              })())(Nil.value);
          };
          throw new Error("Failed pattern match at Data.List line 138, column 1 - line 142, column 68: " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  var $$null = function (v) {
      if (v instanceof Nil) {
          return true;
      };
      return false;
  };
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, Nil.value);
  var mapWithIndex = function (f) {
      return function (lst) {
          var go = function (v) {
              return function (v1) {
                  return function (acc) {
                      if (v1 instanceof Nil) {
                          return acc;
                      };
                      if (v1 instanceof Cons) {
                          return Data_Function.apply(go(v + 1 | 0)(v1.value1))(new Cons(f(v1.value0)(v), acc));
                      };
                      throw new Error("Failed pattern match at Data.List line 412, column 1 - line 415, column 56: " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                  };
              };
          };
          return Data_Function.apply(reverse)(go(0)(lst)(Nil.value));
      };
  };
  var mapMaybe = function (f) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return reverse(acc);
                  };
                  if (v instanceof Cons) {
                      var $218 = f(v.value0);
                      if ($218 instanceof Data_Maybe.Nothing) {
                          var __tco_acc = acc;
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                      if ($218 instanceof Data_Maybe.Just) {
                          var __tco_acc = new Cons($218.value0, acc);
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 400, column 5 - line 402, column 35: " + [ $218.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.List line 396, column 1 - line 402, column 35: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative["__superclass_Control.Applicative.Applicative_0"]())["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map(((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Data.Functor.Functor_0"]())(Cons.create)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative["__superclass_Control.Applicative.Applicative_0"]())(Nil.value));
          };
      };
  };
  var last = function (__copy_v) {
      var v = __copy_v;
      tco: while (true) {
          if (v instanceof Cons && v.value1 instanceof Nil) {
              return new Data_Maybe.Just(v.value0);
          };
          if (v instanceof Cons) {
              var __tco_v = v.value1;
              v = __tco_v;
              continue tco;
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var insertBy = function (v) {
      return function (x) {
          return function (v1) {
              if (v1 instanceof Nil) {
                  return new Cons(x, Nil.value);
              };
              if (v1 instanceof Cons) {
                  var $231 = v(x)(v1.value0);
                  if ($231 instanceof Data_Ordering.GT) {
                      return new Cons(v1.value0, insertBy(v)(x)(v1.value1));
                  };
                  return new Cons(x, v1);
              };
              throw new Error("Failed pattern match at Data.List line 203, column 1 - line 203, column 30: " + [ v.constructor.name, x.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var insertAt = function (v) {
      return function (v1) {
          return function (v2) {
              if (v === 0) {
                  return new Data_Maybe.Just(new Cons(v1, v2));
              };
              if (v2 instanceof Cons) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(Cons.create(v2.value0))(insertAt(v - 1)(v1)(v2.value1));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var insert = function (dictOrd) {
      return insertBy(Data_Ord.compare(dictOrd));
  };
  var init = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      var go = function (v1) {
          return function (acc) {
              if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                  return acc;
              };
              if (v1 instanceof Cons) {
                  return Data_Function.apply(go(v1.value1))(new Cons(v1.value0, acc));
              };
              return acc;
          };
      };
      return Data_Function.apply(Data_Maybe.Just.create)(Data_Function.apply(reverse)(go(v)(Nil.value)));
  };
  var index = function (__copy_v) {
      return function (__copy_v1) {
          var v = __copy_v;
          var v1 = __copy_v1;
          tco: while (true) {
              if (v instanceof Nil) {
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Cons && v1 === 0) {
                  return new Data_Maybe.Just(v.value0);
              };
              if (v instanceof Cons) {
                  var __tco_v = v.value1;
                  var __tco_v1 = v1 - 1;
                  v = __tco_v;
                  v1 = __tco_v1;
                  continue tco;
              };
              throw new Error("Failed pattern match at Data.List line 262, column 1 - line 262, column 22: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var head = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List line 217, column 1 - line 217, column 19: " + [ v.constructor.name ]);
  };
  var transpose = function (v) {
      if (v instanceof Nil) {
          return Nil.value;
      };
      if (v instanceof Cons && v.value0 instanceof Nil) {
          return transpose(v.value1);
      };
      if (v instanceof Cons && v.value0 instanceof Cons) {
          return new Cons(new Cons(v.value0.value0, mapMaybe(head)(v.value1)), transpose(new Cons(v.value0.value1, mapMaybe(tail)(v.value1))));
      };
      throw new Error("Failed pattern match at Data.List line 675, column 1 - line 675, column 20: " + [ v.constructor.name ]);
  };
  var groupBy = function (v) {
      return function (v1) {
          if (v1 instanceof Nil) {
              return Nil.value;
          };
          if (v1 instanceof Cons) {
              var $264 = span(v(v1.value0))(v1.value1);
              return new Cons(new Cons(v1.value0, $264.init), groupBy(v)($264.rest));
          };
          throw new Error("Failed pattern match at Data.List line 548, column 1 - line 548, column 20: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var group = function (dictEq) {
      return groupBy(Data_Eq.eq(dictEq));
  };
  var group$prime = function (dictOrd) {
      return function ($386) {
          return group(dictOrd["__superclass_Data.Eq.Eq_0"]())(sort(dictOrd)($386));
      };
  };
  var genericList = function (dictGeneric) {
      return new Data_Generic.Generic(function (v) {
          if (v instanceof Data_Generic.SProd && (v.value0 === "Data.List.Nil" && v.value1.length === 0)) {
              return new Data_Maybe.Just(Nil.value);
          };
          if (v instanceof Data_Generic.SProd && (v.value0 === "Data.List.Cons" && v.value1.length === 2)) {
              return Control_Apply.apply(Data_Maybe.applyMaybe)(Control_Apply.apply(Data_Maybe.applyMaybe)(new Data_Maybe.Just(Cons.create))(Data_Generic.fromSpine(dictGeneric)(v.value1[0](Data_Unit.unit))))(Data_Generic.fromSpine(genericList(dictGeneric))(v.value1[1](Data_Unit.unit)));
          };
          return Data_Maybe.Nothing.value;
      }, function ($dollarq) {
          return new Data_Generic.SigProd("Data.List.List", [ {
              sigConstructor: "Data.List.Nil", 
              sigValues: [  ]
          }, {
              sigConstructor: "Data.List.Cons", 
              sigValues: [ function ($dollarq1) {
                  return Data_Generic.toSignature(dictGeneric)(Data_Generic.anyProxy);
              }, function ($dollarq1) {
                  return Data_Generic.toSignature(genericList(dictGeneric))(Data_Generic.anyProxy);
              } ]
          } ]);
      }, function (v) {
          if (v instanceof Nil) {
              return new Data_Generic.SProd("Data.List.Nil", [  ]);
          };
          if (v instanceof Cons) {
              return new Data_Generic.SProd("Data.List.Cons", [ function ($dollarq) {
                  return Data_Generic.toSpine(dictGeneric)(v.value0);
              }, function ($dollarq) {
                  return Data_Generic.toSpine(genericList(dictGeneric))(v.value1);
              } ]);
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name ]);
      });
  };
  var functorList = new Data_Functor.Functor(function (f) {
      return function (lst) {
          var go = function (v) {
              return function (acc) {
                  if (v instanceof Nil) {
                      return acc;
                  };
                  if (v instanceof Cons) {
                      return Data_Function.apply(go(v.value1))(new Cons(f(v.value0), acc));
                  };
                  throw new Error("Failed pattern match at Data.List line 726, column 3 - line 729, column 48: " + [ v.constructor.name, acc.constructor.name ]);
              };
          };
          return Data_Function.apply(reverse)(go(lst)(Nil.value));
      };
  });
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Cons.create)(Nil.value);
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($387) {
                  return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(acc)(f($387));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, (function () {
      var go = function (__copy_v) {
          return function (__copy_b) {
              return function (__copy_v1) {
                  var v = __copy_v;
                  var b = __copy_b;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      if (v1 instanceof Nil) {
                          return b;
                      };
                      if (v1 instanceof Cons) {
                          var __tco_v = v;
                          var __tco_b = v(b)(v1.value0);
                          var __tco_v1 = v1.value1;
                          v = __tco_v;
                          b = __tco_b;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 734, column 3 - line 737, column 49: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
      return go;
  })(), function (v) {
      return function (b) {
          return function (v1) {
              if (v1 instanceof Nil) {
                  return b;
              };
              if (v1 instanceof Cons) {
                  return v(v1.value0)(Data_Foldable.foldr(foldableList)(v)(b)(v1.value1));
              };
              throw new Error("Failed pattern match at Data.List line 732, column 3 - line 732, column 20: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var length = Data_Foldable.foldl(foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Nil) {
              return Control_Applicative.pure(dictApplicative)(Nil.value);
          };
          if (v instanceof Cons) {
              return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Cons.create)(v.value0))(Data_Traversable.sequence(traversableList)(dictApplicative)(v.value1));
          };
          throw new Error("Failed pattern match at Data.List line 750, column 3 - line 750, column 26: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Nil) {
                  return Control_Applicative.pure(dictApplicative)(Nil.value);
              };
              if (v1 instanceof Cons) {
                  return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Cons.create)(v(v1.value0)))(Data_Traversable.traverse(traversableList)(dictApplicative)(v)(v1.value1));
              };
              throw new Error("Failed pattern match at Data.List line 748, column 3 - line 748, column 28: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Traversable.sequence(traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var unzip = Data_Foldable.foldr(foldableList)(function (v) {
      return function (v1) {
          return new Data_Tuple.Tuple(new Cons(v.value0, v1.value0), new Cons(v.value1, v1.value1));
      };
  })(new Data_Tuple.Tuple(Nil.value, Nil.value));
  var foldM = function (dictMonad) {
      return function (v) {
          return function (a) {
              return function (v1) {
                  if (v1 instanceof Nil) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(a);
                  };
                  if (v1 instanceof Cons) {
                      return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v(a)(v1.value0))(function (a$prime) {
                          return foldM(dictMonad)(v)(a$prime)(v1.value1);
                      });
                  };
                  throw new Error("Failed pattern match at Data.List line 686, column 1 - line 686, column 23: " + [ v.constructor.name, a.constructor.name, v1.constructor.name ]);
              };
          };
      };
  };
  var findIndex = function (fn) {
      var go = function (__copy_v) {
          return function (__copy_v1) {
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v1 instanceof Cons) {
                      if (fn(v1.value0)) {
                          return new Data_Maybe.Just(v);
                      };
                      if (Data_Boolean.otherwise) {
                          var __tco_v = v + 1 | 0;
                          var __tco_v1 = v1.value1;
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                  };
                  if (v1 instanceof Nil) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.List line 282, column 3 - line 283, column 47: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
      return go(0);
  };
  var findLastIndex = function (fn) {
      return function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
              return length(xs) - 1 - v;
          })(findIndex(fn)(reverse(xs)));
      };
  };
  var filterM = function (dictMonad) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Nil) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Nil.value);
              };
              if (v1 instanceof Cons) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v(v1.value0))(function (v2) {
                      return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(filterM(dictMonad)(v)(v1.value1))(function (v3) {
                          return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())((function () {
                              if (v2) {
                                  return new Cons(v1.value0, v3);
                              };
                              if (!v2) {
                                  return v3;
                              };
                              throw new Error("Failed pattern match at Data.List line 389, column 3 - line 389, column 37: " + [ v2.constructor.name ]);
                          })());
                      });
                  });
              };
              throw new Error("Failed pattern match at Data.List line 385, column 1 - line 385, column 25: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var filter = function (p) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return reverse(acc);
                  };
                  if (v instanceof Cons) {
                      if (p(v.value0)) {
                          var __tco_acc = new Cons(v.value0, acc);
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                      if (Data_Boolean.otherwise) {
                          var __tco_acc = acc;
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List line 369, column 1 - line 374, column 28: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  };
  var intersectBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 instanceof Nil) {
                  return Nil.value;
              };
              if (v2 instanceof Nil) {
                  return Nil.value;
              };
              return filter(function (x) {
                  return Data_Foldable.any(foldableList)(Data_BooleanAlgebra.booleanAlgebraBoolean)(v(x))(v2);
              })(v1);
          };
      };
  };
  var intersect = function (dictEq) {
      return intersectBy(Data_Eq.eq(dictEq));
  };
  var nubBy = function (v) {
      return function (v1) {
          if (v1 instanceof Nil) {
              return Nil.value;
          };
          if (v1 instanceof Cons) {
              return new Cons(v1.value0, nubBy(v)(filter(function (y) {
                  return !v(v1.value0)(y);
              })(v1.value1)));
          };
          throw new Error("Failed pattern match at Data.List line 567, column 1 - line 567, column 22: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var nub = function (dictEq) {
      return nubBy(Data_Eq.eq(dictEq));
  };
  var eqList = function (dictEq) {
      return new Data_Eq.Eq(function (xs) {
          return function (ys) {
              var go = function (v) {
                  return function (v1) {
                      return function (v2) {
                          if (!v2) {
                              return false;
                          };
                          if (v instanceof Nil && v1 instanceof Nil) {
                              return v2;
                          };
                          if (v instanceof Cons && v1 instanceof Cons) {
                              return Data_Function.apply(go(v.value1)(v1.value1))(v2 && Data_Eq.eq(dictEq)(v1.value0)(v.value0));
                          };
                          return false;
                      };
                  };
              };
              return go(xs)(ys)(true);
          };
      });
  };
  var ordList = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqList(dictOrd["__superclass_Data.Eq.Eq_0"]());
      }, function (xs) {
          return function (ys) {
              var go = function (__copy_v) {
                  return function (__copy_v1) {
                      var v = __copy_v;
                      var v1 = __copy_v1;
                      tco: while (true) {
                          if (v instanceof Nil && v1 instanceof Nil) {
                              return Data_Ordering.EQ.value;
                          };
                          if (v instanceof Nil) {
                              return Data_Ordering.LT.value;
                          };
                          if (v1 instanceof Nil) {
                              return Data_Ordering.GT.value;
                          };
                          if (v instanceof Cons && v1 instanceof Cons) {
                              var $343 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                              if ($343 instanceof Data_Ordering.EQ) {
                                  var __tco_v = v.value1;
                                  var __tco_v1 = v1.value1;
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              return $343;
                          };
                          throw new Error("Failed pattern match at Data.List line 708, column 3 - line 716, column 23: " + [ v.constructor.name, v1.constructor.name ]);
                      };
                  };
              };
              return go(xs)(ys);
          };
      });
  };
  var elemLastIndex = function (dictEq) {
      return function (x) {
          return findLastIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var dropWhile = function (p) {
      var go = function (__copy_v) {
          var v = __copy_v;
          tco: while (true) {
              if (v instanceof Cons && p(v.value0)) {
                  var __tco_v = v.value1;
                  v = __tco_v;
                  continue tco;
              };
              return v;
          };
      };
      return go;
  };
  var drop = function (__copy_v) {
      return function (__copy_v1) {
          var v = __copy_v;
          var v1 = __copy_v1;
          tco: while (true) {
              if (v === 0) {
                  return v1;
              };
              if (v1 instanceof Nil) {
                  return Nil.value;
              };
              if (v1 instanceof Cons) {
                  var __tco_v = v - 1;
                  var __tco_v1 = v1.value1;
                  v = __tco_v;
                  v1 = __tco_v1;
                  continue tco;
              };
              throw new Error("Failed pattern match at Data.List line 493, column 1 - line 493, column 15: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var slice = function (start) {
      return function (end) {
          return function (xs) {
              return take(end - start)(drop(start)(xs));
          };
      };
  };
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nil) {
                  return Nil.value;
              };
              if (v2 instanceof Cons && v(v1)(v2.value0)) {
                  return v2.value1;
              };
              if (v2 instanceof Cons) {
                  return new Cons(v2.value0, deleteBy(v)(v1)(v2.value1));
              };
              throw new Error("Failed pattern match at Data.List line 594, column 1 - line 594, column 23: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var unionBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return Data_Semigroup.append(semigroupList)(xs)(Data_Foldable.foldl(foldableList)(Data_Function.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
          };
      };
  };
  var union = function (dictEq) {
      return unionBy(Data_Eq.eq(dictEq));
  };
  var deleteAt = function (v) {
      return function (v1) {
          if (v === 0 && v1 instanceof Cons) {
              return new Data_Maybe.Just(v1.value1);
          };
          if (v1 instanceof Cons) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(Cons.create(v1.value0))(deleteAt(v - 1)(v1.value1));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var $$delete = function (dictEq) {
      return deleteBy(Data_Eq.eq(dictEq));
  };
  var difference = function (dictEq) {
      return Data_Foldable.foldl(foldableList)(Data_Function.flip($$delete(dictEq)));
  };
  var concatMap = function (v) {
      return function (v1) {
          if (v1 instanceof Nil) {
              return Nil.value;
          };
          if (v1 instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(v(v1.value0))(concatMap(v)(v1.value1));
          };
          throw new Error("Failed pattern match at Data.List line 362, column 1 - line 362, column 22: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var catMaybes = mapMaybe(Control_Category.id(Control_Category.categoryFn));
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List line 754, column 3 - line 754, column 20: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindList = new Control_Bind.Bind(function () {
      return applyList;
  }, Data_Function.flip(concatMap));
  var concat = function (v) {
      return Control_Bind.bind(bindList)(v)(Control_Category.id(Control_Category.categoryFn));
  };
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });
  var monadList = new Control_Monad.Monad(function () {
      return applicativeList;
  }, function () {
      return bindList;
  });
  var alterAt = function (v) {
      return function (v1) {
          return function (v2) {
              if (v === 0 && v2 instanceof Cons) {
                  return Data_Function.apply(Data_Maybe.Just.create)((function () {
                      var $379 = v1(v2.value0);
                      if ($379 instanceof Data_Maybe.Nothing) {
                          return v2.value1;
                      };
                      if ($379 instanceof Data_Maybe.Just) {
                          return new Cons($379.value0, v2.value1);
                      };
                      throw new Error("Failed pattern match at Data.List line 331, column 27 - line 334, column 26: " + [ $379.constructor.name ]);
                  })());
              };
              if (v2 instanceof Cons) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(Cons.create(v2.value0))(alterAt(v - 1)(v1)(v2.value1));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var modifyAt = function (n) {
      return function (f) {
          return alterAt(n)(function ($388) {
              return Data_Maybe.Just.create(f($388));
          });
      };
  };
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  var alternativeList = new Control_Alternative.Alternative(function () {
      return applicativeList;
  }, function () {
      return plusList;
  });
  var monadZeroList = new Control_MonadZero.MonadZero(function () {
      return alternativeList;
  }, function () {
      return monadList;
  });
  var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
      return monadZeroList;
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["alterAt"] = alterAt;
  exports["catMaybes"] = catMaybes;
  exports["concat"] = concat;
  exports["concatMap"] = concatMap;
  exports["delete"] = $$delete;
  exports["deleteAt"] = deleteAt;
  exports["deleteBy"] = deleteBy;
  exports["difference"] = difference;
  exports["drop"] = drop;
  exports["dropWhile"] = dropWhile;
  exports["elemIndex"] = elemIndex;
  exports["elemLastIndex"] = elemLastIndex;
  exports["filter"] = filter;
  exports["filterM"] = filterM;
  exports["findIndex"] = findIndex;
  exports["findLastIndex"] = findLastIndex;
  exports["foldM"] = foldM;
  exports["fromFoldable"] = fromFoldable;
  exports["group"] = group;
  exports["group'"] = group$prime;
  exports["groupBy"] = groupBy;
  exports["head"] = head;
  exports["index"] = index;
  exports["init"] = init;
  exports["insert"] = insert;
  exports["insertAt"] = insertAt;
  exports["insertBy"] = insertBy;
  exports["intersect"] = intersect;
  exports["intersectBy"] = intersectBy;
  exports["last"] = last;
  exports["length"] = length;
  exports["many"] = many;
  exports["mapMaybe"] = mapMaybe;
  exports["mapWithIndex"] = mapWithIndex;
  exports["modifyAt"] = modifyAt;
  exports["nub"] = nub;
  exports["nubBy"] = nubBy;
  exports["null"] = $$null;
  exports["range"] = range;
  exports["reverse"] = reverse;
  exports["singleton"] = singleton;
  exports["slice"] = slice;
  exports["snoc"] = snoc;
  exports["some"] = some;
  exports["sort"] = sort;
  exports["sortBy"] = sortBy;
  exports["span"] = span;
  exports["tail"] = tail;
  exports["take"] = take;
  exports["takeWhile"] = takeWhile;
  exports["toUnfoldable"] = toUnfoldable;
  exports["transpose"] = transpose;
  exports["uncons"] = uncons;
  exports["union"] = union;
  exports["unionBy"] = unionBy;
  exports["unzip"] = unzip;
  exports["updateAt"] = updateAt;
  exports["zip"] = zip;
  exports["zipWith"] = zipWith;
  exports["zipWithA"] = zipWithA;
  exports["genericList"] = genericList;
  exports["showList"] = showList;
  exports["eqList"] = eqList;
  exports["ordList"] = ordList;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["traversableList"] = traversableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
  exports["monadList"] = monadList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["alternativeList"] = alternativeList;
  exports["monadZeroList"] = monadZeroList;
  exports["monadPlusList"] = monadPlusList;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];        
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function (__copy_v) {
      var v = __copy_v;
      tco: while (true) {
          if (v.value0 instanceof Data_List.Nil && v.value1 instanceof Data_List.Nil) {
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List.Nil) {
              var __tco_v = new CatQueue(Data_List.reverse(v.value1), Data_List.Nil.value);
              v = __tco_v;
              continue tco;
          };
          if (v.value0 instanceof Data_List.Cons) {
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue line 51, column 1 - line 51, column 36: " + [ v.constructor.name ]);
      };
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List.Cons(a, v.value1));
      };
  };
  var showCatQueue = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(CatQueue " + (Data_Show.show(Data_List.showList(dictShow))(v.value0) + (" " + (Data_Show.show(Data_List.showList(dictShow))(v.value1) + ")")));
      });
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List.Nil && v.value1 instanceof Data_List.Nil) {
          return true;
      };
      return false;
  };
  var empty = new CatQueue(Data_List.Nil.value, Data_List.Nil.value);
  exports["CatQueue"] = CatQueue;
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["showCatQueue"] = showCatQueue;
})(PS["Data.CatQueue"] = PS["Data.CatQueue"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Data_CatQueue = PS["Data.CatQueue"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];        
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var showCatList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof CatNil) {
              return "CatNil";
          };
          if (v instanceof CatCons) {
              return "(CatList " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(Data_CatQueue.showCatQueue(showCatList(dictShow)))(v.value1) + ")")));
          };
          throw new Error("Failed pattern match at Data.CatList line 113, column 3 - line 114, column 3: " + [ v.constructor.name ]);
      });
  };
  var $$null = function (v) {
      if (v instanceof CatNil) {
          return true;
      };
      return false;
  };
  var link = function (v) {
      return function (cat) {
          if (v instanceof CatNil) {
              return cat;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(cat));
          };
          throw new Error("Failed pattern match at Data.CatList line 88, column 1 - line 88, column 22: " + [ v.constructor.name, cat.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function (__copy_v) {
                  return function (__copy_c) {
                      return function (__copy_v1) {
                          var v = __copy_v;
                          var c = __copy_c;
                          var v1 = __copy_v1;
                          tco: while (true) {
                              if (v1 instanceof Data_List.Nil) {
                                  return c;
                              };
                              if (v1 instanceof Data_List.Cons) {
                                  var __tco_v = v;
                                  var __tco_c = v(c)(v1.value0);
                                  var __tco_v1 = v1.value1;
                                  v = __tco_v;
                                  c = __tco_c;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              throw new Error("Failed pattern match at Data.CatList line 103, column 3 - line 103, column 22: " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                      };
                  };
              };
              var go = function (__copy_xs) {
                  return function (__copy_ys) {
                      var xs = __copy_xs;
                      var ys = __copy_ys;
                      tco: while (true) {
                          var $22 = Data_CatQueue.uncons(xs);
                          if ($22 instanceof Data_Maybe.Nothing) {
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if ($22 instanceof Data_Maybe.Just) {
                              var __tco_ys = new Data_List.Cons(k($22.value0.value0), ys);
                              xs = $22.value0.value1;
                              ys = __tco_ys;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.CatList line 98, column 14 - line 100, column 67: " + [ $22.constructor.name ]);
                      };
                  };
              };
              return go(q)(Data_List.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $27 = Data_CatQueue["null"](v.value1);
              if ($27) {
                  return CatNil.value;
              };
              if (!$27) {
                  return foldr(link)(CatNil.value)(v.value1);
              };
              throw new Error("Failed pattern match at Data.CatList line 80, column 39 - line 80, column 89: " + [ $27.constructor.name ]);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList line 79, column 1 - line 79, column 24: " + [ v.constructor.name ]);
  };
  var empty = CatNil.value;
  var append = function (v) {
      return function (v1) {
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatNil) {
              return v1;
          };
          return link(v)(v1);
      };
  };
  var cons = function (a) {
      return function (cat) {
          return append(new CatCons(a, Data_CatQueue.empty))(cat);
      };
  };
  var semigroupCatList = new Data_Semigroup.Semigroup(append);
  var monoidCatList = new Data_Monoid.Monoid(function () {
      return semigroupCatList;
  }, CatNil.value);
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["CatNil"] = CatNil;
  exports["CatCons"] = CatCons;
  exports["append"] = append;
  exports["cons"] = cons;
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
  exports["monoidCatList"] = monoidCatList;
  exports["showCatList"] = showCatList;
})(PS["Data.CatList"] = PS["Data.CatList"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Coproduct = function (x) {
      return x;
  };
  var unCoproduct = function (v) {
      return v;
  };
  var right = function ($11) {
      return Coproduct(Data_Either.Right.create($11));
  };
  var left = function ($12) {
      return Coproduct(Data_Either.Left.create($12));
  };
  var coproduct = function (f) {
      return function (g) {
          return function ($13) {
              return Data_Either.either(f)(g)(unCoproduct($13));
          };
      };
  };
  var foldableCoproduct = function (dictFoldable) {
      return function (dictFoldable1) {
          return new Data_Foldable.Foldable(function (dictMonoid) {
              return function (f) {
                  return coproduct(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f))(Data_Foldable.foldMap(dictFoldable1)(dictMonoid)(f));
              };
          }, function (f) {
              return function (z) {
                  return coproduct(Data_Foldable.foldl(dictFoldable)(f)(z))(Data_Foldable.foldl(dictFoldable1)(f)(z));
              };
          }, function (f) {
              return function (z) {
                  return coproduct(Data_Foldable.foldr(dictFoldable)(f)(z))(Data_Foldable.foldr(dictFoldable1)(f)(z));
              };
          });
      };
  };
  var functorCoproduct = function (dictFunctor) {
      return function (dictFunctor1) {
          return new Data_Functor.Functor(function (f) {
              return function ($14) {
                  return Coproduct(coproduct(function ($15) {
                      return Data_Either.Left.create(Data_Functor.map(dictFunctor)(f)($15));
                  })(function ($16) {
                      return Data_Either.Right.create(Data_Functor.map(dictFunctor1)(f)($16));
                  })($14));
              };
          });
      };
  };
  var traversableCoproduct = function (dictTraversable) {
      return function (dictTraversable1) {
          return new Data_Traversable.Traversable(function () {
              return foldableCoproduct(dictTraversable["__superclass_Data.Foldable.Foldable_1"]())(dictTraversable1["__superclass_Data.Foldable.Foldable_1"]());
          }, function () {
              return functorCoproduct(dictTraversable["__superclass_Data.Functor.Functor_0"]())(dictTraversable1["__superclass_Data.Functor.Functor_0"]());
          }, function (dictApplicative) {
              return coproduct(function ($17) {
                  return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(function ($18) {
                      return Coproduct(Data_Either.Left.create($18));
                  })(Data_Traversable.sequence(dictTraversable)(dictApplicative)($17));
              })(function ($19) {
                  return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(function ($20) {
                      return Coproduct(Data_Either.Right.create($20));
                  })(Data_Traversable.sequence(dictTraversable1)(dictApplicative)($19));
              });
          }, function (dictApplicative) {
              return function (f) {
                  return coproduct(function ($21) {
                      return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(function ($22) {
                          return Coproduct(Data_Either.Left.create($22));
                      })(Data_Traversable.traverse(dictTraversable)(dictApplicative)(f)($21));
                  })(function ($23) {
                      return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(function ($24) {
                          return Coproduct(Data_Either.Right.create($24));
                      })(Data_Traversable.traverse(dictTraversable1)(dictApplicative)(f)($23));
                  });
              };
          });
      };
  };
  exports["Coproduct"] = Coproduct;
  exports["coproduct"] = coproduct;
  exports["left"] = left;
  exports["right"] = right;
  exports["unCoproduct"] = unCoproduct;
  exports["functorCoproduct"] = functorCoproduct;
  exports["foldableCoproduct"] = foldableCoproduct;
  exports["traversableCoproduct"] = traversableCoproduct;
})(PS["Data.Functor.Coproduct"] = PS["Data.Functor.Coproduct"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor_Coproduct = PS["Data.Functor.Coproduct"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];        
  var Inject = function (inj, prj) {
      this.inj = inj;
      this.prj = prj;
  };
  var prj = function (dict) {
      return dict.prj;
  };
  var injectReflexive = new Inject(Control_Category.id(Control_Category.categoryFn), Data_Maybe.Just.create);
  var injectLeft = new Inject(function ($1) {
      return Data_Functor_Coproduct.Coproduct(Data_Either.Left.create($1));
  }, Data_Functor_Coproduct.coproduct(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value)));
  var inj = function (dict) {
      return dict.inj;
  };
  var injectRight = function (dictInject) {
      return new Inject(function ($2) {
          return Data_Functor_Coproduct.Coproduct(Data_Either.Right.create(inj(dictInject)($2)));
      }, Data_Functor_Coproduct.coproduct(Data_Function["const"](Data_Maybe.Nothing.value))(prj(dictInject)));
  };
  exports["Inject"] = Inject;
  exports["inj"] = inj;
  exports["prj"] = prj;
  exports["injectReflexive"] = injectReflexive;
  exports["injectLeft"] = injectLeft;
  exports["injectRight"] = injectRight;
})(PS["Data.Inject"] = PS["Data.Inject"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Data_CatList = PS["Data.CatList"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Inject = PS["Data.Inject"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var ExpF = function (x) {
      return x;
  };
  var Free = (function () {
      function Free(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Free.create = function (value0) {
          return function (value1) {
              return new Free(value0, value1);
          };
      };
      return Free;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var toView = function (__copy_v) {
      var v = __copy_v;
      tco: while (true) {
          var runExpF = function (v2) {
              return v2;
          };
          var concatF = function (v2) {
              return function (r) {
                  return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
              };
          };
          if (v.value0 instanceof Return) {
              var $19 = Data_CatList.uncons(v.value1);
              if ($19 instanceof Data_Maybe.Nothing) {
                  return new Return(Unsafe_Coerce.unsafeCoerce(v.value0.value0));
              };
              if ($19 instanceof Data_Maybe.Just) {
                  var __tco_v = Unsafe_Coerce.unsafeCoerce(concatF(runExpF($19.value0.value0)(v.value0.value0))($19.value0.value1));
                  v = __tco_v;
                  continue tco;
              };
              throw new Error("Failed pattern match at Control.Monad.Free line 145, column 7 - line 149, column 64: " + [ $19.constructor.name ]);
          };
          if (v.value0 instanceof Bind) {
              return new Bind(v.value0.value0, function (a) {
                  return Unsafe_Coerce.unsafeCoerce(concatF(v.value0.value1(a))(v.value1));
              });
          };
          throw new Error("Failed pattern match at Control.Monad.Free line 143, column 3 - line 151, column 56: " + [ v.value0.constructor.name ]);
      };
  };
  var runFreeM = function (dictFunctor) {
      return function (dictMonadRec) {
          return function (k) {
              var go = function (f) {
                  var $28 = toView(f);
                  if ($28 instanceof Return) {
                      return Data_Functor.map((((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Either.Right.create)(Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())($28.value0));
                  };
                  if ($28 instanceof Bind) {
                      return Data_Functor.map((((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Either.Left.create)(k(Data_Functor.map(dictFunctor)($28.value1)($28.value0)));
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free line 131, column 10 - line 133, column 37: " + [ $28.constructor.name ]);
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
          };
      };
  };
  var runFree = function (dictFunctor) {
      return function (k) {
          return function ($40) {
              return Data_Identity.runIdentity(runFreeM(dictFunctor)(Control_Monad_Rec_Class.monadRecIdentity)(function ($41) {
                  return Data_Identity.Identity(k($41));
              })($40));
          };
      };
  };
  var fromView = function (f) {
      return new Free(Unsafe_Coerce.unsafeCoerce(f), Data_CatList.empty);
  };
  var suspendF = function (dictApplicative) {
      return function (f) {
          return fromView(new Bind(Unsafe_Coerce.unsafeCoerce(Control_Applicative.pure(dictApplicative)(f)), Unsafe_Coerce.unsafeCoerce));
      };
  };
  var freeMonad = new Control_Monad.Monad(function () {
      return freeApplicative;
  }, function () {
      return freeBind;
  });
  var freeFunctor = new Data_Functor.Functor(function (k) {
      return function (f) {
          return Control_Bind.bindFlipped(freeBind)(function ($42) {
              return Control_Applicative.pure(freeApplicative)(k($42));
          })(f);
      };
  });
  var freeBind = new Control_Bind.Bind(function () {
      return freeApply;
  }, function (v) {
      return function (k) {
          return new Free(v.value0, Data_CatList.snoc(v.value1)(Unsafe_Coerce.unsafeCoerce(k)));
      };
  });
  var freeApply = new Control_Apply.Apply(function () {
      return freeFunctor;
  }, Control_Monad.ap(freeMonad));
  var freeApplicative = new Control_Applicative.Applicative(function () {
      return freeApply;
  }, function ($43) {
      return fromView(Return.create($43));
  });
  var freeMonadRec = new Control_Monad_Rec_Class.MonadRec(function () {
      return freeMonad;
  }, function (k) {
      return function (a) {
          return Control_Bind.bind(freeBind)(k(a))(Data_Either.either(Control_Monad_Rec_Class.tailRecM(freeMonadRec)(k))(Control_Applicative.pure(freeApplicative)));
      };
  });
  var liftF = function (f) {
      return fromView(new Bind(Unsafe_Coerce.unsafeCoerce(f), function ($44) {
          return Control_Applicative.pure(freeApplicative)(Unsafe_Coerce.unsafeCoerce($44));
      }));
  };
  var freeMonadTrans = new Control_Monad_Trans.MonadTrans(function (dictMonad) {
      return liftF;
  });
  var liftFI = function (dictInject) {
      return function (fa) {
          return liftF(Data_Inject.inj(dictInject)(fa));
      };
  };
  var foldFree = function (dictMonadRec) {
      return function (k) {
          var go = function (f) {
              var $36 = toView(f);
              if ($36 instanceof Return) {
                  return Data_Functor.map((((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Either.Right.create)(Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())($36.value0));
              };
              if ($36 instanceof Bind) {
                  return Data_Functor.map((((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(function ($45) {
                      return Data_Either.Left.create($36.value1($45));
                  })(k($36.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Free line 111, column 10 - line 113, column 37: " + [ $36.constructor.name ]);
          };
          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
      };
  };
  var hoistFree = function (k) {
      return foldFree(freeMonadRec)(function ($46) {
          return liftF(k($46));
      });
  };
  var injF = function (dictInject) {
      return hoistFree(Data_Inject.inj(dictInject));
  };
  exports["foldFree"] = foldFree;
  exports["hoistFree"] = hoistFree;
  exports["injF"] = injF;
  exports["liftF"] = liftF;
  exports["liftFI"] = liftFI;
  exports["runFree"] = runFree;
  exports["runFreeM"] = runFreeM;
  exports["suspendF"] = suspendF;
  exports["freeFunctor"] = freeFunctor;
  exports["freeBind"] = freeBind;
  exports["freeApplicative"] = freeApplicative;
  exports["freeApply"] = freeApply;
  exports["freeMonad"] = freeMonad;
  exports["freeMonadTrans"] = freeMonadTrans;
  exports["freeMonadRec"] = freeMonadRec;
})(PS["Control.Monad.Free"] = PS["Control.Monad.Free"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Lazy

  exports.defer = function () {

    function Defer(thunk) {
      if (this instanceof Defer) {
        this.thunk = thunk;
        return this;
      } else {
        return new Defer(thunk);
      }
    }

    Defer.prototype.force = function () {
      var value = this.thunk();
      delete this.thunk;
      this.force = function () {
        return value;
      };
      return value;
    };

    return Defer;

  }();

  exports.force = function (l) {
    return l.force();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Lazy"];
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Field = PS["Data.Field"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];        
  var showLazy = function (dictShow) {
      return new Data_Show.Show(function (x) {
          return "(defer \\_ -> " + (Data_Show.show(dictShow)($foreign.force(x)) + ")");
      });
  };
  var semiringLazy = function (dictSemiring) {
      return new Data_Semiring.Semiring(function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Data_Semiring.add(dictSemiring)($foreign.force(a))($foreign.force(b));
              });
          };
      }, function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Data_Semiring.mul(dictSemiring)($foreign.force(a))($foreign.force(b));
              });
          };
      }, $foreign.defer(function (v) {
          return Data_Semiring.one(dictSemiring);
      }), $foreign.defer(function (v) {
          return Data_Semiring.zero(dictSemiring);
      }));
  };
  var semigroupLazy = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Data_Semigroup.append(dictSemigroup)($foreign.force(a))($foreign.force(b));
              });
          };
      });
  };
  var ringLazy = function (dictRing) {
      return new Data_Ring.Ring(function () {
          return semiringLazy(dictRing["__superclass_Data.Semiring.Semiring_0"]());
      }, function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Data_Ring.sub(dictRing)($foreign.force(a))($foreign.force(b));
              });
          };
      });
  };
  var monoidLazy = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupLazy(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]());
      }, $foreign.defer(function (v) {
          return Data_Monoid.mempty(dictMonoid);
      }));
  };
  var lazyLazy = new Control_Lazy.Lazy(function (f) {
      return $foreign.defer(function (v) {
          return $foreign.force(f(Data_Unit.unit));
      });
  });
  var functorLazy = new Data_Functor.Functor(function (f) {
      return function (l) {
          return $foreign.defer(function (v) {
              return f($foreign.force(l));
          });
      };
  });
  var extendLazy = new Control_Extend.Extend(function () {
      return functorLazy;
  }, function (f) {
      return function (x) {
          return $foreign.defer(function (v) {
              return f(x);
          });
      };
  });
  var eqLazy = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              return Data_Eq.eq(dictEq)($foreign.force(x))($foreign.force(y));
          };
      });
  };
  var ordLazy = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqLazy(dictOrd["__superclass_Data.Eq.Eq_0"]());
      }, function (x) {
          return function (y) {
              return Data_Ord.compare(dictOrd)($foreign.force(x))($foreign.force(y));
          };
      });
  };
  var comonadLazy = new Control_Comonad.Comonad(function () {
      return extendLazy;
  }, $foreign.force);
  var commutativeRingLazy = function (dictCommutativeRing) {
      return new Data_CommutativeRing.CommutativeRing(function () {
          return ringLazy(dictCommutativeRing["__superclass_Data.Ring.Ring_0"]());
      });
  };
  var euclideanRingLazy = function (dictEuclideanRing) {
      return new Data_EuclideanRing.EuclideanRing(function () {
          return commutativeRingLazy(dictEuclideanRing["__superclass_Data.CommutativeRing.CommutativeRing_0"]());
      }, function ($51) {
          return Data_EuclideanRing.degree(dictEuclideanRing)($foreign.force($51));
      }, function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Data_EuclideanRing.div(dictEuclideanRing)($foreign.force(a))($foreign.force(b));
              });
          };
      }, function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Data_EuclideanRing.mod(dictEuclideanRing)($foreign.force(a))($foreign.force(b));
              });
          };
      });
  };
  var fieldLazy = function (dictField) {
      return new Data_Field.Field(function () {
          return euclideanRingLazy(dictField["__superclass_Data.EuclideanRing.EuclideanRing_0"]());
      });
  };
  var boundedLazy = function (dictBounded) {
      return new Data_Bounded.Bounded(function () {
          return ordLazy(dictBounded["__superclass_Data.Ord.Ord_0"]());
      }, $foreign.defer(function (v) {
          return Data_Bounded.bottom(dictBounded);
      }), $foreign.defer(function (v) {
          return Data_Bounded.top(dictBounded);
      }));
  };
  var applyLazy = new Control_Apply.Apply(function () {
      return functorLazy;
  }, function (f) {
      return function (x) {
          return $foreign.defer(function (v) {
              return $foreign.force(f)($foreign.force(x));
          });
      };
  });
  var bindLazy = new Control_Bind.Bind(function () {
      return applyLazy;
  }, function (l) {
      return function (f) {
          return $foreign.defer(function (v) {
              return Data_Function.apply($foreign.force)(f($foreign.force(l)));
          });
      };
  });
  var heytingAlgebraLazy = function (dictHeytingAlgebra) {
      return new Data_HeytingAlgebra.HeytingAlgebra(function (a) {
          return function (b) {
              return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.conj(dictHeytingAlgebra))(a))(b);
          };
      }, function (a) {
          return function (b) {
              return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.disj(dictHeytingAlgebra))(a))(b);
          };
      }, $foreign.defer(function (v) {
          return Data_HeytingAlgebra.ff(dictHeytingAlgebra);
      }), function (a) {
          return function (b) {
              return Control_Apply.apply(applyLazy)(Data_Functor.map(functorLazy)(Data_HeytingAlgebra.implies(dictHeytingAlgebra))(a))(b);
          };
      }, function (a) {
          return Data_Functor.map(functorLazy)(Data_HeytingAlgebra.not(dictHeytingAlgebra))(a);
      }, $foreign.defer(function (v) {
          return Data_HeytingAlgebra.tt(dictHeytingAlgebra);
      }));
  };
  var booleanAlgebraLazy = function (dictBooleanAlgebra) {
      return new Data_BooleanAlgebra.BooleanAlgebra(function () {
          return heytingAlgebraLazy(dictBooleanAlgebra["__superclass_Data.HeytingAlgebra.HeytingAlgebra_0"]());
      });
  };
  var applicativeLazy = new Control_Applicative.Applicative(function () {
      return applyLazy;
  }, function (a) {
      return $foreign.defer(function (v) {
          return a;
      });
  });
  var monadLazy = new Control_Monad.Monad(function () {
      return applicativeLazy;
  }, function () {
      return bindLazy;
  });
  exports["semiringLazy"] = semiringLazy;
  exports["ringLazy"] = ringLazy;
  exports["commutativeRingLazy"] = commutativeRingLazy;
  exports["euclideanRingLazy"] = euclideanRingLazy;
  exports["fieldLazy"] = fieldLazy;
  exports["eqLazy"] = eqLazy;
  exports["ordLazy"] = ordLazy;
  exports["boundedLazy"] = boundedLazy;
  exports["semigroupLazy"] = semigroupLazy;
  exports["monoidLazy"] = monoidLazy;
  exports["heytingAlgebraLazy"] = heytingAlgebraLazy;
  exports["booleanAlgebraLazy"] = booleanAlgebraLazy;
  exports["functorLazy"] = functorLazy;
  exports["applyLazy"] = applyLazy;
  exports["applicativeLazy"] = applicativeLazy;
  exports["bindLazy"] = bindLazy;
  exports["monadLazy"] = monadLazy;
  exports["extendLazy"] = extendLazy;
  exports["comonadLazy"] = comonadLazy;
  exports["showLazy"] = showLazy;
  exports["lazyLazy"] = lazyLazy;
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Data_Lazy = PS["Data.Lazy"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var suspend = Control_Monad_Free.suspendF(Data_Lazy.applicativeLazy);
  var runTrampoline = Control_Monad_Free.runFree(Data_Lazy.functorLazy)(Data_Lazy.force);
  var done = Control_Applicative.pure(Control_Monad_Free.freeApplicative);
  var delay$prime = Control_Monad_Free.liftF;
  var delay = function ($0) {
      return delay$prime(Data_Lazy.defer($0));
  };
  exports["delay"] = delay;
  exports["delay'"] = delay$prime;
  exports["done"] = done;
  exports["runTrampoline"] = runTrampoline;
  exports["suspend"] = suspend;
})(PS["Control.Monad.Trampoline"] = PS["Control.Monad.Trampoline"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad_Trampoline = PS["Control.Monad.Trampoline"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Cofree = (function () {
      function Cofree(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cofree.create = function (value0) {
          return function (value1) {
              return new Cofree(value0, value1);
          };
      };
      return Cofree;
  })();
  var tail = function (v) {
      return Control_Monad_Trampoline.runTrampoline(v.value1);
  };
  var mkCofree = function (a) {
      return function (t) {
          return new Cofree(a, Control_Applicative.pure(Control_Monad_Free.freeApplicative)(t));
      };
  };
  var head = function (v) {
      return v.value0;
  };
  var foldableCofree = function (dictFoldable) {
      return new Data_Foldable.Foldable(function (dictMonoid) {
          return function (f) {
              var go = function (fa) {
                  return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(head(fa)))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(go)(tail(fa)));
              };
              return go;
          };
      }, function (f) {
          var go = function (b) {
              return function (fa) {
                  return Data_Foldable.foldl(dictFoldable)(go)(f(b)(head(fa)))(tail(fa));
              };
          };
          return go;
      }, function (f) {
          var go = function (fa) {
              return function (b) {
                  return f(head(fa))(Data_Foldable.foldr(dictFoldable)(go)(b)(tail(fa)));
              };
          };
          return Data_Function.flip(go);
      });
  };
  var _tail = function (v) {
      return v.value1;
  };
  var _lift = function (dictFunctor) {
      return function ($25) {
          return Data_Functor.map(Control_Monad_Free.freeFunctor)(Data_Functor.map(dictFunctor)($25));
      };
  };
  var functorCofree = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          var loop = function (fa) {
              return new Cofree(f(head(fa)), _lift(dictFunctor)(loop)(_tail(fa)));
          };
          return loop;
      });
  };
  var applyCofree = function (dictApply) {
      return new Control_Apply.Apply(function () {
          return functorCofree(dictApply["__superclass_Data.Functor.Functor_0"]());
      }, function (f) {
          return function (x) {
              var t = Control_Apply.apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(Control_Apply.apply(applyCofree(dictApply)))(tail(f)))(tail(x));
              var h = head(f)(head(x));
              return mkCofree(h)(t);
          };
      });
  };
  var applicativeCofree = function (dictAlternative) {
      return new Control_Applicative.Applicative(function () {
          return applyCofree((dictAlternative["__superclass_Control.Applicative.Applicative_0"]())["__superclass_Control.Apply.Apply_0"]());
      }, function (a) {
          return mkCofree(a)(Control_Plus.empty(dictAlternative["__superclass_Control.Plus.Plus_1"]()));
      });
  };
  var bindCofree = function (dictAlternative) {
      return new Control_Bind.Bind(function () {
          return applyCofree((dictAlternative["__superclass_Control.Applicative.Applicative_0"]())["__superclass_Control.Apply.Apply_0"]());
      }, function (fa) {
          return function (f) {
              var loop = function (fa1) {
                  var fh = f(head(fa1));
                  return mkCofree(head(fh))(Control_Alt.alt((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(tail(fh))(Data_Functor.map(((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Data.Functor.Functor_0"]())(loop)(tail(fa1))));
              };
              return loop(fa);
          };
      });
  };
  var monadCofree = function (dictAlternative) {
      return new Control_Monad.Monad(function () {
          return applicativeCofree(dictAlternative);
      }, function () {
          return bindCofree(dictAlternative);
      });
  };
  var extendCofree = function (dictFunctor) {
      return new Control_Extend.Extend(function () {
          return functorCofree(dictFunctor);
      }, function (f) {
          var loop = function (fa) {
              return new Cofree(f(fa), _lift(dictFunctor)(loop)(_tail(fa)));
          };
          return loop;
      });
  };
  var comonadCofree = function (dictFunctor) {
      return new Control_Comonad.Comonad(function () {
          return extendCofree(dictFunctor);
      }, head);
  };
  var traversableCofree = function (dictTraversable) {
      return new Data_Traversable.Traversable(function () {
          return foldableCofree(dictTraversable["__superclass_Data.Foldable.Foldable_1"]());
      }, function () {
          return functorCofree(dictTraversable["__superclass_Data.Functor.Functor_0"]());
      }, function (dictApplicative) {
          return Data_Traversable.traverse(traversableCofree(dictTraversable))(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
      }, function (dictApplicative) {
          return function (f) {
              var loop = function (ta) {
                  return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(mkCofree)(f(head(ta))))(Data_Traversable.traverse(dictTraversable)(dictApplicative)(loop)(tail(ta)));
              };
              return loop;
          };
      });
  };
  exports["head"] = head;
  exports["mkCofree"] = mkCofree;
  exports["tail"] = tail;
  exports["functorCofree"] = functorCofree;
  exports["foldableCofree"] = foldableCofree;
  exports["traversableCofree"] = traversableCofree;
  exports["extendCofree"] = extendCofree;
  exports["comonadCofree"] = comonadCofree;
  exports["applyCofree"] = applyCofree;
  exports["applicativeCofree"] = applicativeCofree;
  exports["bindCofree"] = bindCofree;
  exports["monadCofree"] = monadCofree;
})(PS["Control.Comonad.Cofree"] = PS["Control.Comonad.Cofree"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Comonad = PS["Control.Comonad"];        
  var ComonadTrans = function (lower) {
      this.lower = lower;
  };
  var lower = function (dict) {
      return dict.lower;
  };
  exports["ComonadTrans"] = ComonadTrans;
  exports["lower"] = lower;
})(PS["Control.Comonad.Trans"] = PS["Control.Comonad.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Trans = PS["Control.Comonad.Trans"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var EnvT = function (x) {
      return x;
  };
  var withEnvT = function (f) {
      return function (v) {
          return Data_Function.apply(EnvT)(new Data_Tuple.Tuple(f(v.value0), v.value1));
      };
  };
  var runEnvT = function (v) {
      return v;
  };
  var mapEnvT = function (f) {
      return function (v) {
          return Data_Function.apply(EnvT)(new Data_Tuple.Tuple(v.value0, f(v.value1)));
      };
  };
  var functorEnvT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return Data_Function.apply(EnvT)(new Data_Tuple.Tuple(v.value0, Data_Functor.map(dictFunctor)(f)(v.value1)));
          };
      });
  };
  var extendEnvT = function (dictExtend) {
      return new Control_Extend.Extend(function () {
          return functorEnvT(dictExtend["__superclass_Data.Functor.Functor_0"]());
      }, function (f) {
          return function (v) {
              return Data_Function.apply(EnvT)(new Data_Tuple.Tuple(v.value0, Data_Functor.map(dictExtend["__superclass_Data.Functor.Functor_0"]())(f)(Control_Extend.extend(dictExtend)(function ($34) {
                  return EnvT(Data_Tuple.Tuple.create(v.value0)($34));
              })(v.value1))));
          };
      });
  };
  var comonadTransEnvT = new Control_Comonad_Trans.ComonadTrans(function (dictComonad) {
      return function (v) {
          return v.value1;
      };
  });
  var comonadEnvT = function (dictComonad) {
      return new Control_Comonad.Comonad(function () {
          return extendEnvT(dictComonad["__superclass_Control.Extend.Extend_0"]());
      }, function (v) {
          return Control_Comonad.extract(dictComonad)(v.value1);
      });
  };
  exports["EnvT"] = EnvT;
  exports["mapEnvT"] = mapEnvT;
  exports["runEnvT"] = runEnvT;
  exports["withEnvT"] = withEnvT;
  exports["functorEnvT"] = functorEnvT;
  exports["extendEnvT"] = extendEnvT;
  exports["comonadEnvT"] = comonadEnvT;
  exports["comonadTransEnvT"] = comonadTransEnvT;
})(PS["Control.Comonad.Env.Trans"] = PS["Control.Comonad.Env.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Env_Trans = PS["Control.Comonad.Env.Trans"];
  var Data_Tuple = PS["Data.Tuple"];        
  var ComonadEnv = function (__superclass_Control$dotComonad$dotComonad_0, ask, local) {
      this["__superclass_Control.Comonad.Comonad_0"] = __superclass_Control$dotComonad$dotComonad_0;
      this.ask = ask;
      this.local = local;
  };
  var local = function (dict) {
      return dict.local;
  };
  var comonadEnvTuple = new ComonadEnv(function () {
      return Data_Tuple.comonadTuple;
  }, Data_Tuple.fst, function (f) {
      return function (v) {
          return new Data_Tuple.Tuple(f(v.value0), v.value1);
      };
  });
  var comonadEnvEnvT = function (dictComonad) {
      return new ComonadEnv(function () {
          return Control_Comonad_Env_Trans.comonadEnvT(dictComonad);
      }, function (v) {
          return Data_Tuple.fst(v);
      }, function (f) {
          return function (v) {
              return new Data_Tuple.Tuple(f(v.value0), v.value1);
          };
      });
  };
  var ask = function (dict) {
      return dict.ask;
  };
  var asks = function (dictComonadEnv) {
      return function (f) {
          return function (x) {
              return f(ask(dictComonadEnv)(x));
          };
      };
  };
  exports["ComonadEnv"] = ComonadEnv;
  exports["ask"] = ask;
  exports["asks"] = asks;
  exports["local"] = local;
  exports["comonadEnvTuple"] = comonadEnvTuple;
  exports["comonadEnvEnvT"] = comonadEnvEnvT;
})(PS["Control.Comonad.Env.Class"] = PS["Control.Comonad.Env.Class"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad_Env_Class = PS["Control.Comonad.Env.Class"];
  var Control_Comonad_Env_Trans = PS["Control.Comonad.Env.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];        
  var withEnv = Control_Comonad_Env_Trans.withEnvT;
  var runEnv = function (v) {
      return Data_Functor.map(Data_Tuple.functorTuple)(Data_Identity.runIdentity)(v);
  };
  var mapEnv = Data_Functor.map(Control_Comonad_Env_Trans.functorEnvT(Data_Identity.functorIdentity));
  var env = function (e) {
      return function (a) {
          return Data_Function.apply(Control_Comonad_Env_Trans.EnvT)(Data_Function.apply(Data_Tuple.Tuple.create(e))(a));
      };
  };
  exports["env"] = env;
  exports["mapEnv"] = mapEnv;
  exports["runEnv"] = runEnv;
  exports["withEnv"] = withEnv;
})(PS["Control.Comonad.Env"] = PS["Control.Comonad.Env"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Trans = PS["Control.Comonad.Trans"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var StoreT = function (x) {
      return x;
  };
  var runStoreT = function (v) {
      return v;
  };
  var functorStoreT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return Data_Function.apply(StoreT)(new Data_Tuple.Tuple(Data_Functor.map(dictFunctor)(function (h) {
                  return function ($25) {
                      return f(h($25));
                  };
              })(v.value0), v.value1));
          };
      });
  };
  var extendStoreT = function (dictExtend) {
      return new Control_Extend.Extend(function () {
          return functorStoreT(dictExtend["__superclass_Data.Functor.Functor_0"]());
      }, function (f) {
          return function (v) {
              return Data_Function.apply(StoreT)(new Data_Tuple.Tuple(Control_Extend.extend(dictExtend)(function (w$prime) {
                  return function (s$prime) {
                      return Data_Function.apply(f)(Data_Function.apply(StoreT)(new Data_Tuple.Tuple(w$prime, s$prime)));
                  };
              })(v.value0), v.value1));
          };
      });
  };
  var comonadTransStoreT = new Control_Comonad_Trans.ComonadTrans(function (dictComonad) {
      return function (v) {
          return Data_Functor.map((dictComonad["__superclass_Control.Extend.Extend_0"]())["__superclass_Data.Functor.Functor_0"]())(function (v1) {
              return Data_Function.apply(v1)(v.value1);
          })(v.value0);
      };
  });
  var comonadStoreT = function (dictComonad) {
      return new Control_Comonad.Comonad(function () {
          return extendStoreT(dictComonad["__superclass_Control.Extend.Extend_0"]());
      }, function (v) {
          return Control_Comonad.extract(dictComonad)(v.value0)(v.value1);
      });
  };
  exports["StoreT"] = StoreT;
  exports["runStoreT"] = runStoreT;
  exports["functorStoreT"] = functorStoreT;
  exports["extendStoreT"] = extendStoreT;
  exports["comonadStoreT"] = comonadStoreT;
  exports["comonadTransStoreT"] = comonadTransStoreT;
})(PS["Control.Comonad.Store.Trans"] = PS["Control.Comonad.Store.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Store_Trans = PS["Control.Comonad.Store.Trans"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];        
  var ComonadStore = function (__superclass_Control$dotComonad$dotComonad_0, peek, pos) {
      this["__superclass_Control.Comonad.Comonad_0"] = __superclass_Control$dotComonad$dotComonad_0;
      this.peek = peek;
      this.pos = pos;
  };
  var pos = function (dict) {
      return dict.pos;
  };
  var peek = function (dict) {
      return dict.peek;
  };
  var peeks = function (dictComonadStore) {
      return function (f) {
          return function (x) {
              return peek(dictComonadStore)(Data_Function.apply(f)(pos(dictComonadStore)(x)))(x);
          };
      };
  };
  var seeks = function (dictComonadStore) {
      return function (f) {
          return function ($15) {
              return peeks(dictComonadStore)(f)(Control_Extend.duplicate((dictComonadStore["__superclass_Control.Comonad.Comonad_0"]())["__superclass_Control.Extend.Extend_0"]())($15));
          };
      };
  };
  var seek = function (dictComonadStore) {
      return function (s) {
          return function ($16) {
              return peek(dictComonadStore)(s)(Control_Extend.duplicate((dictComonadStore["__superclass_Control.Comonad.Comonad_0"]())["__superclass_Control.Extend.Extend_0"]())($16));
          };
      };
  };
  var experiment = function (dictComonadStore) {
      return function (dictFunctor) {
          return function (f) {
              return function (x) {
                  return Data_Functor.map(dictFunctor)(Data_Function.flip(peek(dictComonadStore))(x))(f(pos(dictComonadStore)(x)));
              };
          };
      };
  };
  var comonadStoreStoreT = function (dictComonad) {
      return new ComonadStore(function () {
          return Control_Comonad_Store_Trans.comonadStoreT(dictComonad);
      }, function (s) {
          return function (v) {
              return Control_Comonad.extract(dictComonad)(v.value0)(s);
          };
      }, function (v) {
          return v.value1;
      });
  };
  exports["ComonadStore"] = ComonadStore;
  exports["experiment"] = experiment;
  exports["peek"] = peek;
  exports["peeks"] = peeks;
  exports["pos"] = pos;
  exports["seek"] = seek;
  exports["seeks"] = seeks;
  exports["comonadStoreStoreT"] = comonadStoreStoreT;
})(PS["Control.Comonad.Store.Class"] = PS["Control.Comonad.Store.Class"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad_Store_Class = PS["Control.Comonad.Store.Class"];
  var Control_Comonad_Store_Trans = PS["Control.Comonad.Store.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var store = function (f) {
      return function (x) {
          return Data_Function.apply(Control_Comonad_Store_Trans.StoreT)(new Data_Tuple.Tuple(f, x));
      };
  };
  var runStore = function (v) {
      return Data_Tuple.swap(Data_Functor.map(Data_Tuple.functorTuple)(Data_Identity.runIdentity)(Data_Tuple.swap(v)));
  };
  exports["runStore"] = runStore;
  exports["store"] = store;
})(PS["Control.Comonad.Store"] = PS["Control.Comonad.Store"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Trans = PS["Control.Comonad.Trans"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var TracedT = function (x) {
      return x;
  };
  var runTracedT = function (v) {
      return v;
  };
  var functorTracedT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(function (g) {
                  return function (t) {
                      return Data_Function.apply(f)(g(t));
                  };
              })(v);
          };
      });
  };
  var extendTracedT = function (dictExtend) {
      return function (dictSemigroup) {
          return new Control_Extend.Extend(function () {
              return functorTracedT(dictExtend["__superclass_Data.Functor.Functor_0"]());
          }, function (f) {
              return function (v) {
                  return Control_Extend.extend(dictExtend)(function (w1) {
                      return function (t) {
                          return Data_Function.apply(f)(Data_Functor.map(dictExtend["__superclass_Data.Functor.Functor_0"]())(function (h) {
                              return function (t$prime) {
                                  return Data_Function.apply(h)(Data_Semigroup.append(dictSemigroup)(t)(t$prime));
                              };
                          })(w1));
                      };
                  })(v);
              };
          });
      };
  };
  var comonadTransTracedT = function (dictMonoid) {
      return new Control_Comonad_Trans.ComonadTrans(function (dictComonad) {
          return function (v) {
              return Data_Functor.map((dictComonad["__superclass_Control.Extend.Extend_0"]())["__superclass_Data.Functor.Functor_0"]())(function (f) {
                  return f(Data_Monoid.mempty(dictMonoid));
              })(v);
          };
      });
  };
  var comonadTracedT = function (dictComonad) {
      return function (dictMonoid) {
          return new Control_Comonad.Comonad(function () {
              return extendTracedT(dictComonad["__superclass_Control.Extend.Extend_0"]())(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]());
          }, function (v) {
              return Control_Comonad.extract(dictComonad)(v)(Data_Monoid.mempty(dictMonoid));
          });
      };
  };
  exports["TracedT"] = TracedT;
  exports["runTracedT"] = runTracedT;
  exports["functorTracedT"] = functorTracedT;
  exports["extendTracedT"] = extendTracedT;
  exports["comonadTracedT"] = comonadTracedT;
  exports["comonadTransTracedT"] = comonadTransTracedT;
})(PS["Control.Comonad.Traced.Trans"] = PS["Control.Comonad.Traced.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Traced_Trans = PS["Control.Comonad.Traced.Trans"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var ComonadTraced = function (__superclass_Control$dotComonad$dotComonad_0, track) {
      this["__superclass_Control.Comonad.Comonad_0"] = __superclass_Control$dotComonad$dotComonad_0;
      this.track = track;
  };
  var track = function (dict) {
      return dict.track;
  };
  var tracks = function (dictComonadTraced) {
      return function (f) {
          return function (w) {
              return track(dictComonadTraced)(Data_Function.apply(f)(Control_Comonad.extract(dictComonadTraced["__superclass_Control.Comonad.Comonad_0"]())(w)))(w);
          };
      };
  };
  var listens = function (dictFunctor) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(function (g) {
                  return function (t) {
                      return new Data_Tuple.Tuple(g(t), f(t));
                  };
              })(v);
          };
      };
  };
  var listen = function (dictFunctor) {
      return function (v) {
          return Data_Functor.map(dictFunctor)(function (f) {
              return function (t) {
                  return new Data_Tuple.Tuple(f(t), t);
              };
          })(v);
      };
  };
  var comonadTracedTracedT = function (dictComonad) {
      return function (dictMonoid) {
          return new ComonadTraced(function () {
              return Control_Comonad_Traced_Trans.comonadTracedT(dictComonad)(dictMonoid);
          }, function (t) {
              return function (v) {
                  return Control_Comonad.extract(dictComonad)(v)(t);
              };
          });
      };
  };
  var censor = function (dictFunctor) {
      return function (f) {
          return function (v) {
              return Data_Functor.map(dictFunctor)(function (v1) {
                  return function ($18) {
                      return v1(f($18));
                  };
              })(v);
          };
      };
  };
  exports["ComonadTraced"] = ComonadTraced;
  exports["censor"] = censor;
  exports["listen"] = listen;
  exports["listens"] = listens;
  exports["track"] = track;
  exports["tracks"] = tracks;
  exports["comonadTracedTracedT"] = comonadTracedTracedT;
})(PS["Control.Comonad.Traced.Class"] = PS["Control.Comonad.Traced.Class"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad_Traced_Class = PS["Control.Comonad.Traced.Class"];
  var Control_Comonad_Traced_Trans = PS["Control.Comonad.Traced.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var traced = function ($2) {
      return Control_Comonad_Traced_Trans.TracedT(Data_Identity.Identity($2));
  };
  var runTraced = function (v) {
      return Data_Identity.runIdentity(v);
  };
  exports["runTraced"] = runTraced;
  exports["traced"] = traced;
})(PS["Control.Comonad.Traced"] = PS["Control.Comonad.Traced"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];        
  var MonadCont = function (__superclass_Control$dotMonad$dotMonad_0, callCC) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.callCC = callCC;
  };
  var callCC = function (dict) {
      return dict.callCC;
  };
  exports["MonadCont"] = MonadCont;
  exports["callCC"] = callCC;
})(PS["Control.Monad.Cont.Class"] = PS["Control.Monad.Cont.Class"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var MonadEff = function (__superclass_Control$dotMonad$dotMonad_0, liftEff) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.liftEff = liftEff;
  };
  var monadEffEff = new MonadEff(function () {
      return Control_Monad_Eff.monadEff;
  }, Control_Category.id(Control_Category.categoryFn));
  var liftEff = function (dict) {
      return dict.liftEff;
  };
  exports["MonadEff"] = MonadEff;
  exports["liftEff"] = liftEff;
  exports["monadEffEff"] = monadEffEff;
})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];        
  var MonadReader = function (__superclass_Control$dotMonad$dotMonad_0, ask, local) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.ask = ask;
      this.local = local;
  };
  var monadReaderFun = new MonadReader(function () {
      return Control_Monad.monadFn;
  }, Control_Category.id(Control_Category.categoryFn), Control_Semigroupoid.composeFlipped(Control_Semigroupoid.semigroupoidFn));
  var local = function (dict) {
      return dict.local;
  };
  var ask = function (dict) {
      return dict.ask;
  };
  var reader = function (dictMonadReader) {
      return function (f) {
          return Control_Bind.bindFlipped((dictMonadReader["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(function ($1) {
              return Control_Applicative.pure((dictMonadReader["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(f($1));
          })(ask(dictMonadReader));
      };
  };
  exports["MonadReader"] = MonadReader;
  exports["ask"] = ask;
  exports["local"] = local;
  exports["reader"] = reader;
  exports["monadReaderFun"] = monadReaderFun;
})(PS["Control.Monad.Reader.Class"] = PS["Control.Monad.Reader.Class"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];        
  var MonadState = function (__superclass_Control$dotMonad$dotMonad_0, state) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Data_Unit.unit, s);
          });
      };
  };
  var modify = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
      };
  };
  var gets = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(f(s), s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["gets"] = gets;
  exports["modify"] = modify;
  exports["put"] = put;
  exports["state"] = state;
})(PS["Control.Monad.State.Class"] = PS["Control.Monad.State.Class"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var ContT = function (x) {
      return x;
  };
  var withContT = function (f) {
      return function (v) {
          return function (k) {
              return v(f(k));
          };
      };
  };
  var runContT = function (v) {
      return function (k) {
          return v(k);
      };
  };
  var monadTransContT = new Control_Monad_Trans.MonadTrans(function (dictMonad) {
      return function (m) {
          return function (k) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(m)(k);
          };
      };
  });
  var mapContT = function (f) {
      return function (v) {
          return function (k) {
              return f(v(k));
          };
      };
  };
  var functorContT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (k) {
                  return v(function (a) {
                      return Data_Function.apply(k)(f(a));
                  });
              };
          };
      });
  };
  var applyContT = function (dictApply) {
      return new Control_Apply.Apply(function () {
          return functorContT(dictApply["__superclass_Data.Functor.Functor_0"]());
      }, function (v) {
          return function (v1) {
              return function (k) {
                  return v(function (g) {
                      return v1(function (a) {
                          return k(g(a));
                      });
                  });
              };
          };
      });
  };
  var bindContT = function (dictBind) {
      return new Control_Bind.Bind(function () {
          return applyContT(dictBind["__superclass_Control.Apply.Apply_0"]());
      }, function (v) {
          return function (k) {
              return function (k$prime) {
                  return v(function (a) {
                      var $32 = k(a);
                      return $32(k$prime);
                  });
              };
          };
      });
  };
  var applicativeContT = function (dictApplicative) {
      return new Control_Applicative.Applicative(function () {
          return applyContT(dictApplicative["__superclass_Control.Apply.Apply_0"]());
      }, function (a) {
          return function (k) {
              return k(a);
          };
      });
  };
  var monadContT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeContT(dictMonad["__superclass_Control.Applicative.Applicative_0"]());
      }, function () {
          return bindContT(dictMonad["__superclass_Control.Bind.Bind_1"]());
      });
  };
  var monadContContT = function (dictMonad) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadContT(dictMonad);
      }, function (f) {
          return function (k) {
              var $34 = f(function (a) {
                  return function (v) {
                      return k(a);
                  };
              });
              return $34(k);
          };
      });
  };
  var monadEffContT = function (dictMonadEff) {
      return new Control_Monad_Eff_Class.MonadEff(function () {
          return monadContT(dictMonadEff["__superclass_Control.Monad.Monad_0"]());
      }, function ($38) {
          return Control_Monad_Trans.lift(monadTransContT)(dictMonadEff["__superclass_Control.Monad.Monad_0"]())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($38));
      });
  };
  var monadReaderContT = function (dictMonadReader) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadContT(dictMonadReader["__superclass_Control.Monad.Monad_0"]());
      }, Control_Monad_Trans.lift(monadTransContT)(dictMonadReader["__superclass_Control.Monad.Monad_0"]())(Control_Monad_Reader_Class.ask(dictMonadReader)), function (f) {
          return function (v) {
              return function (k) {
                  return Control_Bind.bind((dictMonadReader["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(Control_Monad_Reader_Class.ask(dictMonadReader))(function (v1) {
                      return Control_Monad_Reader_Class.local(dictMonadReader)(f)(v(function ($39) {
                          return Control_Monad_Reader_Class.local(dictMonadReader)(Data_Function["const"](v1))(k($39));
                      }));
                  });
              };
          };
      });
  };
  var monadStateContT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadContT(dictMonadState["__superclass_Control.Monad.Monad_0"]());
      }, function ($40) {
          return Control_Monad_Trans.lift(monadTransContT)(dictMonadState["__superclass_Control.Monad.Monad_0"]())(Control_Monad_State_Class.state(dictMonadState)($40));
      });
  };
  exports["ContT"] = ContT;
  exports["mapContT"] = mapContT;
  exports["runContT"] = runContT;
  exports["withContT"] = withContT;
  exports["monadContContT"] = monadContContT;
  exports["functorContT"] = functorContT;
  exports["applyContT"] = applyContT;
  exports["applicativeContT"] = applicativeContT;
  exports["bindContT"] = bindContT;
  exports["monadContT"] = monadContT;
  exports["monadTransContT"] = monadTransContT;
  exports["monadEffContT"] = monadEffContT;
  exports["monadReaderContT"] = monadReaderContT;
  exports["monadStateContT"] = monadStateContT;
})(PS["Control.Monad.Cont.Trans"] = PS["Control.Monad.Cont.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Cont_Trans = PS["Control.Monad.Cont.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var withCont = function (f) {
      return Control_Monad_Cont_Trans.withContT(function ($0) {
          return function ($1) {
              return Data_Identity.Identity(f(function ($2) {
                  return Data_Identity.runIdentity($0($2));
              })($1));
          };
      });
  };
  var runCont = function (cc) {
      return function (k) {
          return Data_Identity.runIdentity(Control_Monad_Cont_Trans.runContT(cc)(function ($3) {
              return Data_Identity.Identity(k($3));
          }));
      };
  };
  var mapCont = function (f) {
      return Control_Monad_Cont_Trans.mapContT(function ($4) {
          return Data_Identity.Identity(f(Data_Identity.runIdentity($4)));
      });
  };
  var cont = function (f) {
      return function (c) {
          return f(function ($5) {
              return Data_Identity.runIdentity(c($5));
          });
      };
  };
  exports["cont"] = cont;
  exports["runCont"] = runCont;
})(PS["Control.Monad.Cont"] = PS["Control.Monad.Cont"] || {});
(function(exports) {
    "use strict";

  // module Control.Monad.Eff.Console

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };

  exports.warn = function (s) {
    return function () {
      console.warn(s);
      return {};
    };
  };

  exports.error = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };

  exports.info = function (s) {
    return function () {
      console.info(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];        
  var warnShow = function (dictShow) {
      return function (a) {
          return $foreign.warn(Data_Show.show(dictShow)(a));
      };
  };
  var logShow = function (dictShow) {
      return function (a) {
          return $foreign.log(Data_Show.show(dictShow)(a));
      };
  };
  var infoShow = function (dictShow) {
      return function (a) {
          return $foreign.info(Data_Show.show(dictShow)(a));
      };
  };
  var errorShow = function (dictShow) {
      return function (a) {
          return $foreign.error(Data_Show.show(dictShow)(a));
      };
  };
  exports["errorShow"] = errorShow;
  exports["infoShow"] = infoShow;
  exports["logShow"] = logShow;
  exports["warnShow"] = warnShow;
  exports["error"] = $foreign.error;
  exports["info"] = $foreign.info;
  exports["log"] = $foreign.log;
  exports["warn"] = $foreign.warn;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.Exception

  exports.showErrorImpl = function (err) {
    return err.stack || err.toString();
  };

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.message = function (e) {
    return e.message;
  };

  exports.stackImpl = function (just) {
    return function (nothing) {
      return function (e) {
        return e.stack ? just(e.stack) : nothing;
      };
    };
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };

  exports.catchException = function (c) {
    return function (t) {
      return function () {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Functor = PS["Data.Functor"];        
  var $$try = function (action) {
      return $foreign.catchException(function ($0) {
          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Either.Left.create($0));
      })(Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Either.Right.create)(action));
  };
  var $$throw = function ($1) {
      return $foreign.throwException($foreign.error($1));
  };
  var stack = $foreign.stackImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var showError = new Data_Show.Show($foreign.showErrorImpl);
  exports["stack"] = stack;
  exports["throw"] = $$throw;
  exports["try"] = $$try;
  exports["showError"] = showError;
  exports["catchException"] = $foreign.catchException;
  exports["error"] = $foreign.error;
  exports["message"] = $foreign.message;
  exports["throwException"] = $foreign.throwException;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var unsafeThrowException = function ($0) {
      return Control_Monad_Eff_Unsafe.unsafePerformEff(Control_Monad_Eff_Exception.throwException($0));
  };
  var unsafeThrow = function ($1) {
      return unsafeThrowException(Control_Monad_Eff_Exception.error($1));
  };
  exports["unsafeThrow"] = unsafeThrow;
  exports["unsafeThrowException"] = unsafeThrowException;
})(PS["Control.Monad.Eff.Exception.Unsafe"] = PS["Control.Monad.Eff.Exception.Unsafe"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.Random

  exports.random = Math.random;
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
    "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };

  exports.toStringAs = function (radix) {
    return function (i) {
      return i.toString(radix);
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
    "use strict";

  // module Data.Int.Bits

  exports.and = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 & n2;
    };
  };

  exports.or = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 | n2;
    };
  };

  exports.xor = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 ^ n2;
    };
  };

  exports.shl = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 << n2;
    };
  };

  exports.shr = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 >> n2;
    };
  };

  exports.zshr = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 >>> n2;
    };
  };

  exports.complement = function (n) {
    /* jshint bitwise: false */
    return ~n;
  };
})(PS["Data.Int.Bits"] = PS["Data.Int.Bits"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Int.Bits"];
  exports["and"] = $foreign.and;
  exports["complement"] = $foreign.complement;
  exports["or"] = $foreign.or;
  exports["shl"] = $foreign.shl;
  exports["shr"] = $foreign.shr;
  exports["xor"] = $foreign.xor;
  exports["zshr"] = $foreign.zshr;
})(PS["Data.Int.Bits"] = PS["Data.Int.Bits"] || {});
(function(exports) {
    "use strict";

  // module Math

  exports.abs = Math.abs;

  exports.acos = Math.acos;

  exports.asin = Math.asin;

  exports.atan = Math.atan;

  exports.atan2 = function (y) {
    return function (x) {
      return Math.atan2(y, x);
    };
  };

  exports.ceil = Math.ceil;

  exports.cos = Math.cos;

  exports.exp = Math.exp;

  exports.floor = Math.floor;

  exports.trunc = Math.trunc || function (n) {
    return n < 0 ? Math.ceil(n) : Math.floor(n);
  };

  exports.log = Math.log;

  exports.max = function (n1) {
    return function (n2) {
      return Math.max(n1, n2);
    };
  };

  exports.min = function (n1) {
    return function (n2) {
      return Math.min(n1, n2);
    };
  };

  exports.pow = function (n) {
    return function (p) {
      return Math.pow(n, p);
    };
  };

  exports.remainder = function (n) {
    return function (m) {
      return n % m;
    };
  };

  exports.round = Math.round;

  exports.sin = Math.sin;

  exports.sqrt = Math.sqrt;

  exports.tan = Math.tan;

  exports.e = Math.E;

  exports.ln2 = Math.LN2;

  exports.ln10 = Math.LN10;

  exports.log2e = Math.LOG2E;

  exports.log10e = Math.LOG10E;

  exports.pi = Math.PI;

  exports.sqrt1_2 = Math.SQRT1_2;

  exports.sqrt2 = Math.SQRT2;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Math"];
  exports["abs"] = $foreign.abs;
  exports["acos"] = $foreign.acos;
  exports["asin"] = $foreign.asin;
  exports["atan"] = $foreign.atan;
  exports["atan2"] = $foreign.atan2;
  exports["ceil"] = $foreign.ceil;
  exports["cos"] = $foreign.cos;
  exports["e"] = $foreign.e;
  exports["exp"] = $foreign.exp;
  exports["floor"] = $foreign.floor;
  exports["ln10"] = $foreign.ln10;
  exports["ln2"] = $foreign.ln2;
  exports["log"] = $foreign.log;
  exports["log10e"] = $foreign.log10e;
  exports["log2e"] = $foreign.log2e;
  exports["max"] = $foreign.max;
  exports["min"] = $foreign.min;
  exports["pi"] = $foreign.pi;
  exports["pow"] = $foreign.pow;
  exports["remainder"] = $foreign.remainder;
  exports["round"] = $foreign.round;
  exports["sin"] = $foreign.sin;
  exports["sqrt"] = $foreign.sqrt;
  exports["sqrt1_2"] = $foreign.sqrt1_2;
  exports["sqrt2"] = $foreign.sqrt2;
  exports["tan"] = $foreign.tan;
  exports["trunc"] = $foreign.trunc;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Int"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Radix = function (x) {
      return x;
  };
  var radix = function (n) {
      if (n >= 2 && n <= 36) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Int line 119, column 1 - line 120, column 38: " + [ n.constructor.name ]);
  };
  var odd = function (x) {
      return Data_Int_Bits.and(x)(1) !== 0;
  };
  var octal = 8;
  var hexadecimal = 16;
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Partial_Unsafe.unsafePartial(function (dictPartial) {
              return Data_Maybe.fromJust(dictPartial)(fromNumber(x));
          });
      };
      throw new Error("Failed pattern match at Data.Int line 64, column 1 - line 67, column 56: " + [ x.constructor.name ]);
  };
  var round = function ($3) {
      return unsafeClamp($$Math.round($3));
  };
  var floor = function ($4) {
      return unsafeClamp($$Math.floor($4));
  };
  var even = function (x) {
      return Data_Int_Bits.and(x)(1) === 0;
  };
  var decimal = 10;
  var ceil = function ($5) {
      return unsafeClamp($$Math.ceil($5));
  };
  var binary = 2;
  exports["binary"] = binary;
  exports["ceil"] = ceil;
  exports["decimal"] = decimal;
  exports["even"] = even;
  exports["floor"] = floor;
  exports["fromNumber"] = fromNumber;
  exports["fromString"] = fromString;
  exports["fromStringAs"] = fromStringAs;
  exports["hexadecimal"] = hexadecimal;
  exports["octal"] = octal;
  exports["odd"] = odd;
  exports["radix"] = radix;
  exports["round"] = round;
  exports["toNumber"] = $foreign.toNumber;
  exports["toStringAs"] = $foreign.toStringAs;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Random"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Int = PS["Data.Int"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ord = PS["Data.Ord"];        
  var randomRange = function (min) {
      return function (max) {
          return function __do() {
              var v = $foreign.random();
              return v * (max - min) + min;
          };
      };
  };
  var randomInt = function (low) {
      return function (high) {
          return function __do() {
              var v = $foreign.random();
              var asNumber = ((Data_Int.toNumber(high) - Data_Int.toNumber(low)) + 1) * v + Data_Int.toNumber(low);
              return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(Data_Int.floor(asNumber))();
          };
      };
  };
  var randomBool = Data_Functor.map(Control_Monad_Eff.functorEff)(function (v) {
      return v < 0.5;
  })($foreign.random);
  exports["randomBool"] = randomBool;
  exports["randomInt"] = randomInt;
  exports["randomRange"] = randomRange;
  exports["random"] = $foreign.random;
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.Ref

  exports.newRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modifyRef'"] = function (ref) {
    return function (f) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.writeRef = function (ref) {
    return function (val) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Ref"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];        
  var modifyRef = function (ref) {
      return function (f) {
          return $foreign["modifyRef'"](ref)(function (s) {
              return {
                  state: f(s), 
                  value: Data_Unit.unit
              };
          });
      };
  };
  exports["modifyRef"] = modifyRef;
  exports["modifyRef'"] = $foreign["modifyRef'"];
  exports["newRef"] = $foreign.newRef;
  exports["readRef"] = $foreign.readRef;
  exports["writeRef"] = $foreign.writeRef;
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];        
  var unsafeRunRef = Control_Monad_Eff_Unsafe.unsafeInterleaveEff;
  exports["unsafeRunRef"] = unsafeRunRef;
})(PS["Control.Monad.Eff.Ref.Unsafe"] = PS["Control.Monad.Eff.Ref.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var MonadError = function (__superclass_Control$dotMonad$dotMonad_0, catchError, throwError) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.catchError = catchError;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };
  var monadErrorMaybe = new MonadError(function () {
      return Data_Maybe.monadMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Nothing) {
              return v1(Data_Unit.unit);
          };
          if (v instanceof Data_Maybe.Just) {
              return new Data_Maybe.Just(v.value0);
          };
          throw new Error("Failed pattern match at Control.Monad.Error.Class line 55, column 3 - line 55, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  }, Data_Function["const"](Data_Maybe.Nothing.value));
  var monadErrorEither = new MonadError(function () {
      return Data_Either.monadEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Data_Either.Left) {
              return v1(v.value0);
          };
          if (v instanceof Data_Either.Right) {
              return new Data_Either.Right(v.value0);
          };
          throw new Error("Failed pattern match at Control.Monad.Error.Class line 50, column 3 - line 50, column 30: " + [ v.constructor.name, v1.constructor.name ]);
      };
  }, Data_Either.Left.create);
  var catchError = function (dict) {
      return dict.catchError;
  };
  var catchJust = function (dictMonadError) {
      return function (p) {
          return function (act) {
              return function (handler) {
                  var handle = function (e) {
                      var $12 = p(e);
                      if ($12 instanceof Data_Maybe.Nothing) {
                          return throwError(dictMonadError)(e);
                      };
                      if ($12 instanceof Data_Maybe.Just) {
                          return handler($12.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Error.Class line 44, column 5 - line 46, column 26: " + [ $12.constructor.name ]);
                  };
                  return catchError(dictMonadError)(act)(handle);
              };
          };
      };
  };
  exports["MonadError"] = MonadError;
  exports["catchError"] = catchError;
  exports["catchJust"] = catchJust;
  exports["throwError"] = throwError;
  exports["monadErrorEither"] = monadErrorEither;
  exports["monadErrorMaybe"] = monadErrorMaybe;
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];        
  var MonadWriter = function (__superclass_Control$dotMonad$dotMonad_0, listen, pass, writer) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.listen = listen;
      this.pass = pass;
      this.writer = writer;
  };
  var writer = function (dict) {
      return dict.writer;
  };
  var tell = function (dictMonadWriter) {
      return function ($9) {
          return writer(dictMonadWriter)(Data_Tuple.Tuple.create(Data_Unit.unit)($9));
      };
  };
  var pass = function (dict) {
      return dict.pass;
  };
  var listen = function (dict) {
      return dict.listen;
  };
  var listens = function (dictMonadWriter) {
      return function (f) {
          return function (m) {
              return Control_Bind.bind((dictMonadWriter["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(listen(dictMonadWriter)(m))(function (v) {
                  return Data_Function.apply(Control_Applicative.pure((dictMonadWriter["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]()))(new Data_Tuple.Tuple(v.value0, f(v.value1)));
              });
          };
      };
  };
  var censor = function (dictMonadWriter) {
      return function (f) {
          return function (m) {
              return pass(dictMonadWriter)(Control_Bind.bind((dictMonadWriter["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(m)(function (v) {
                  return Data_Function.apply(Control_Applicative.pure((dictMonadWriter["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]()))(new Data_Tuple.Tuple(v, f));
              }));
          };
      };
  };
  exports["MonadWriter"] = MonadWriter;
  exports["censor"] = censor;
  exports["listen"] = listen;
  exports["listens"] = listens;
  exports["pass"] = pass;
  exports["tell"] = tell;
  exports["writer"] = writer;
})(PS["Control.Monad.Writer.Class"] = PS["Control.Monad.Writer.Class"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];        
  var MonadRWS = function (__superclass_Control$dotMonad$dotReader$dotClass$dotMonadReader_0, __superclass_Control$dotMonad$dotState$dotClass$dotMonadState_2, __superclass_Control$dotMonad$dotWriter$dotClass$dotMonadWriter_1) {
      this["__superclass_Control.Monad.Reader.Class.MonadReader_0"] = __superclass_Control$dotMonad$dotReader$dotClass$dotMonadReader_0;
      this["__superclass_Control.Monad.State.Class.MonadState_2"] = __superclass_Control$dotMonad$dotState$dotClass$dotMonadState_2;
      this["__superclass_Control.Monad.Writer.Class.MonadWriter_1"] = __superclass_Control$dotMonad$dotWriter$dotClass$dotMonadWriter_1;
  };
  exports["MonadRWS"] = MonadRWS;
})(PS["Control.Monad.RWS.Class"] = PS["Control.Monad.RWS.Class"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_RWS_Class = PS["Control.Monad.RWS.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var ExceptT = function (x) {
      return x;
  };
  var withExceptT = function (dictFunctor) {
      return function (f) {
          return function (v) {
              var mapLeft = function (v1) {
                  return function (v2) {
                      if (v2 instanceof Data_Either.Right) {
                          return new Data_Either.Right(v2.value0);
                      };
                      if (v2 instanceof Data_Either.Left) {
                          return new Data_Either.Left(v1(v2.value0));
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans line 44, column 3 - line 44, column 32: " + [ v1.constructor.name, v2.constructor.name ]);
                  };
              };
              return Data_Function.apply(ExceptT)(Data_Functor.map(dictFunctor)(mapLeft(f))(v));
          };
      };
  };
  var runExceptT = function (v) {
      return v;
  };
  var monadTransExceptT = new Control_Monad_Trans.MonadTrans(function (dictMonad) {
      return function (m) {
          return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(m)(function (v) {
              return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))(new Data_Either.Right(v));
          });
      };
  });
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var except = function (dictApplicative) {
      return function ($87) {
          return ExceptT(Control_Applicative.pure(dictApplicative)($87));
      };
  };
  var applyExceptT = function (dictApply) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(dictApply["__superclass_Data.Functor.Functor_0"]());
      }, function (v) {
          return function (v1) {
              var f$prime = Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(Control_Apply.apply(Data_Either.applyEither))(v);
              var x$prime = Control_Apply.apply(dictApply)(f$prime)(v1);
              return x$prime;
          };
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]());
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v)(Data_Either.either(function ($88) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Either.Left.create($88));
              })(function (a) {
                  var $56 = k(a);
                  return $56;
              }));
          };
      });
  };
  var applicativeExceptT = function (dictApplicative) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictApplicative["__superclass_Control.Apply.Apply_0"]());
      }, function ($89) {
          return ExceptT(Control_Applicative.pure(dictApplicative)(Data_Either.Right.create($89)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad["__superclass_Control.Applicative.Applicative_0"]());
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var monadContExceptT = function (dictMonadCont) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadExceptT(dictMonadCont["__superclass_Control.Monad.Monad_0"]());
      }, function (f) {
          return Data_Function.apply(ExceptT)(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
              var $57 = f(function (a) {
                  return Data_Function.apply(ExceptT)(c(new Data_Either.Right(a)));
              });
              return $57;
          }));
      });
  };
  var monadEffExceptT = function (dictMonadEff) {
      return new Control_Monad_Eff_Class.MonadEff(function () {
          return monadExceptT(dictMonadEff["__superclass_Control.Monad.Monad_0"]());
      }, function ($90) {
          return Control_Monad_Trans.lift(monadTransExceptT)(dictMonadEff["__superclass_Control.Monad.Monad_0"]())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($90));
      });
  };
  var monadErrorExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v)(Data_Either.either(function (a) {
                  var $60 = k(a);
                  return $60;
              })(function ($91) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Either.Right.create($91));
              }));
          };
      }, function ($92) {
          return ExceptT(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Either.Left.create($92)));
      });
  };
  var monadReaderExceptT = function (dictMonadReader) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadExceptT(dictMonadReader["__superclass_Control.Monad.Monad_0"]());
      }, Control_Monad_Trans.lift(monadTransExceptT)(dictMonadReader["__superclass_Control.Monad.Monad_0"]())(Control_Monad_Reader_Class.ask(dictMonadReader)), function (f) {
          return mapExceptT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
      });
  };
  var monadRecExceptT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadExceptT(dictMonadRec["__superclass_Control.Monad.Monad_0"]());
      }, function (f) {
          return function ($93) {
              return ExceptT(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function (a) {
                  return Control_Bind.bind((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())((function () {
                      var $61 = f(a);
                      return $61;
                  })())(function (m$prime) {
                      return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())((function () {
                          if (m$prime instanceof Data_Either.Left) {
                              return new Data_Either.Right(new Data_Either.Left(m$prime.value0));
                          };
                          if (m$prime instanceof Data_Either.Right && m$prime.value0 instanceof Data_Either.Left) {
                              return new Data_Either.Left(m$prime.value0.value0);
                          };
                          if (m$prime instanceof Data_Either.Right && m$prime.value0 instanceof Data_Either.Right) {
                              return new Data_Either.Right(new Data_Either.Right(m$prime.value0.value0));
                          };
                          throw new Error("Failed pattern match at Control.Monad.Except.Trans line 77, column 9 - line 80, column 45: " + [ m$prime.constructor.name ]);
                      })());
                  });
              })($93));
          };
      });
  };
  var monadStateExceptT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadExceptT(dictMonadState["__superclass_Control.Monad.Monad_0"]());
      }, function (f) {
          return Control_Monad_Trans.lift(monadTransExceptT)(dictMonadState["__superclass_Control.Monad.Monad_0"]())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadWriterExceptT = function (dictMonadWriter) {
      return new Control_Monad_Writer_Class.MonadWriter(function () {
          return monadExceptT(dictMonadWriter["__superclass_Control.Monad.Monad_0"]());
      }, mapExceptT(function (m) {
          return Control_Bind.bind((dictMonadWriter["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m))(function (v) {
              return Data_Function.apply(Control_Applicative.pure((dictMonadWriter["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]()))(Data_Functor.map(Data_Either.functorEither)(function (r) {
                  return new Data_Tuple.Tuple(r, v.value1);
              })(v.value0));
          });
      }), mapExceptT(function (m) {
          return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind((dictMonadWriter["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(m)(function (v) {
              return Control_Applicative.pure((dictMonadWriter["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())((function () {
                  if (v instanceof Data_Either.Left) {
                      return new Data_Tuple.Tuple(new Data_Either.Left(v.value0), Control_Category.id(Control_Category.categoryFn));
                  };
                  if (v instanceof Data_Either.Right) {
                      return new Data_Tuple.Tuple(new Data_Either.Right(v.value0.value0), v.value0.value1);
                  };
                  throw new Error("Failed pattern match at Control.Monad.Except.Trans line 133, column 5 - line 135, column 45: " + [ v.constructor.name ]);
              })());
          }));
      }), function (wd) {
          return Control_Monad_Trans.lift(monadTransExceptT)(dictMonadWriter["__superclass_Control.Monad.Monad_0"]())(Control_Monad_Writer_Class.writer(dictMonadWriter)(wd));
      });
  };
  var monadRWSExceptT = function (dictMonadRWS) {
      return new Control_Monad_RWS_Class.MonadRWS(function () {
          return monadReaderExceptT(dictMonadRWS["__superclass_Control.Monad.Reader.Class.MonadReader_0"]());
      }, function () {
          return monadStateExceptT(dictMonadRWS["__superclass_Control.Monad.State.Class.MonadState_2"]());
      }, function () {
          return monadWriterExceptT(dictMonadRWS["__superclass_Control.Monad.Writer.Class.MonadWriter_1"]());
      });
  };
  var altExceptT = function (dictSemigroup) {
      return function (dictMonad) {
          return new Control_Alt.Alt(function () {
              return functorExceptT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]());
          }, function (v) {
              return function (v1) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v)(function (v2) {
                      if (v2 instanceof Data_Either.Right) {
                          return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Data_Either.Right(v2.value0));
                      };
                      if (v2 instanceof Data_Either.Left) {
                          return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v1)(function (v3) {
                              if (v3 instanceof Data_Either.Right) {
                                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Data_Either.Right(v3.value0));
                              };
                              if (v3 instanceof Data_Either.Left) {
                                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(v2.value0)(v3.value0)));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Except.Trans line 89, column 9 - line 91, column 49: " + [ v3.constructor.name ]);
                          });
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans line 85, column 5 - line 91, column 49: " + [ v2.constructor.name ]);
                  });
              };
          });
      };
  };
  var plusExceptT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Plus.Plus(function () {
              return altExceptT(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(dictMonad);
          }, Control_Monad_Error_Class.throwError(monadErrorExceptT(dictMonad))(Data_Monoid.mempty(dictMonoid)));
      };
  };
  var alternativeExceptT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Alternative.Alternative(function () {
              return applicativeExceptT(dictMonad["__superclass_Control.Applicative.Applicative_0"]());
          }, function () {
              return plusExceptT(dictMonoid)(dictMonad);
          });
      };
  };
  var monadZeroExceptT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_MonadZero.MonadZero(function () {
              return alternativeExceptT(dictMonoid)(dictMonad);
          }, function () {
              return monadExceptT(dictMonad);
          });
      };
  };
  var monadPlusExceptT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_MonadPlus.MonadPlus(function () {
              return monadZeroExceptT(dictMonoid)(dictMonad);
          });
      };
  };
  exports["ExceptT"] = ExceptT;
  exports["except"] = except;
  exports["mapExceptT"] = mapExceptT;
  exports["runExceptT"] = runExceptT;
  exports["withExceptT"] = withExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["monadRecExceptT"] = monadRecExceptT;
  exports["altExceptT"] = altExceptT;
  exports["plusExceptT"] = plusExceptT;
  exports["alternativeExceptT"] = alternativeExceptT;
  exports["monadPlusExceptT"] = monadPlusExceptT;
  exports["monadZeroExceptT"] = monadZeroExceptT;
  exports["monadTransExceptT"] = monadTransExceptT;
  exports["monadEffExceptT"] = monadEffExceptT;
  exports["monadContExceptT"] = monadContExceptT;
  exports["monadErrorExceptT"] = monadErrorExceptT;
  exports["monadReaderExceptT"] = monadReaderExceptT;
  exports["monadStateExceptT"] = monadStateExceptT;
  exports["monadWriterExceptT"] = monadWriterExceptT;
  exports["monadRWSExceptT"] = monadRWSExceptT;
})(PS["Control.Monad.Except.Trans"] = PS["Control.Monad.Except.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var withExcept = Control_Monad_Except_Trans.withExceptT(Data_Identity.functorIdentity);
  var runExcept = function ($0) {
      return Data_Identity.runIdentity(Control_Monad_Except_Trans.runExceptT($0));
  };
  var mapExcept = function (f) {
      return Control_Monad_Except_Trans.mapExceptT(function ($1) {
          return Data_Identity.Identity(f(Data_Identity.runIdentity($1)));
      });
  };
  exports["mapExcept"] = mapExcept;
  exports["runExcept"] = runExcept;
  exports["withExcept"] = withExcept;
})(PS["Control.Monad.Except"] = PS["Control.Monad.Except"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Ring = PS["Data.Ring"];
  var Control_Category = PS["Control.Category"];        
  var Yield = (function () {
      function Yield(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Yield.create = function (value0) {
          return function (value1) {
              return new Yield(value0, value1);
          };
      };
      return Yield;
  })();
  var Skip = (function () {
      function Skip(value0) {
          this.value0 = value0;
      };
      Skip.create = function (value0) {
          return new Skip(value0);
      };
      return Skip;
  })();
  var Done = (function () {
      function Done() {

      };
      Done.value = new Done();
      return Done;
  })();
  var ListT = (function () {
      function ListT(value0) {
          this.value0 = value0;
      };
      ListT.create = function (value0) {
          return new ListT(value0);
      };
      return ListT;
  })();
  var wrapLazy = function (dictApplicative) {
      return function (v) {
          return Data_Function.apply(ListT.create)(Control_Applicative.pure(dictApplicative)(new Skip(v)));
      };
  };
  var wrapEffect = function (dictFunctor) {
      return function (v) {
          return Data_Function.apply(ListT.create)(Data_Functor.map(dictFunctor)(function ($167) {
              return Skip.create(Data_Lazy.defer(Data_Function["const"]($167)));
          })(v));
      };
  };
  var unfold = function (dictMonad) {
      return function (f) {
          return function (z) {
              var g = function (v) {
                  if (v instanceof Data_Maybe.Just) {
                      return new Yield(v.value0.value1, Data_Lazy.defer(function (v1) {
                          return unfold(dictMonad)(f)(v.value0.value0);
                      }));
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return Done.value;
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 119, column 3 - line 119, column 58: " + [ v.constructor.name ]);
              };
              return Data_Function.apply(ListT.create)(Data_Functor.map(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(g)(f(z)));
          };
      };
  };
  var uncons = function (dictMonad) {
      return function (v) {
          var g = function (v1) {
              if (v1 instanceof Yield) {
                  return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))(Data_Function.apply(Data_Maybe.Just.create)(new Data_Tuple.Tuple(v1.value0, Data_Lazy.force(v1.value1))));
              };
              if (v1 instanceof Skip) {
                  return uncons(dictMonad)(Data_Lazy.force(v1.value0));
              };
              if (v1 instanceof Done) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Maybe.Nothing.value);
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 184, column 3 - line 184, column 50: " + [ v1.constructor.name ]);
          };
          return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v.value0)(g);
      };
  };
  var tail = function (dictMonad) {
      return function (l) {
          return Data_Functor.map(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.snd))(uncons(dictMonad)(l));
      };
  };
  var stepMap = function (dictFunctor) {
      return function (f) {
          return function (v) {
              return Data_Function.apply(ListT.create)(Data_Functor.map(dictFunctor)(f)(v.value0));
          };
      };
  };
  var takeWhile = function (dictApplicative) {
      return function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  var $90 = f(v.value0);
                  if ($90) {
                      return new Yield(v.value0, Data_Functor.map(Data_Lazy.functorLazy)(takeWhile(dictApplicative)(f))(v.value1));
                  };
                  if (!$90) {
                      return Done.value;
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 143, column 19 - line 143, column 68: " + [ $90.constructor.name ]);
              };
              if (v instanceof Skip) {
                  return Data_Function.apply(Skip.create)(Data_Functor.map(Data_Lazy.functorLazy)(takeWhile(dictApplicative)(f))(v.value0));
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 143, column 3 - line 143, column 68: " + [ v.constructor.name ]);
          };
          return stepMap((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(g);
      };
  };
  var scanl = function (dictMonad) {
      return function (f) {
          return function (b) {
              return function (l) {
                  var g = function (v) {
                      var h = function (v1) {
                          if (v1 instanceof Yield) {
                              var b$prime$prime = f(b)(v1.value0);
                              return Data_Function.apply(Data_Maybe.Just.create)(new Data_Tuple.Tuple(new Data_Tuple.Tuple(b$prime$prime, Data_Lazy.force(v1.value1)), b$prime$prime));
                          };
                          if (v1 instanceof Skip) {
                              return Data_Function.apply(Data_Maybe.Just.create)(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0, Data_Lazy.force(v1.value0)), v.value0));
                          };
                          if (v1 instanceof Done) {
                              return Data_Maybe.Nothing.value;
                          };
                          throw new Error("Failed pattern match at Control.Monad.List.Trans line 218, column 5 - line 218, column 78: " + [ v1.constructor.name ]);
                      };
                      return Data_Functor.map(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(h)(v.value1.value0);
                  };
                  return unfold(dictMonad)(g)(new Data_Tuple.Tuple(b, l));
              };
          };
      };
  };
  var runListT = function (v) {
      return v.value0;
  };
  var prepend$prime = function (dictApplicative) {
      return function (h) {
          return function (t) {
              return Data_Function.apply(ListT.create)(Control_Applicative.pure(dictApplicative)(new Yield(h, t)));
          };
      };
  };
  var prepend = function (dictApplicative) {
      return function (h) {
          return function (t) {
              return prepend$prime(dictApplicative)(h)(Data_Function.apply(Data_Lazy.defer)(Data_Function["const"](t)));
          };
      };
  };
  var nil = function (dictApplicative) {
      return Data_Function.apply(ListT.create)(Control_Applicative.pure(dictApplicative)(Done.value));
  };
  var singleton = function (dictApplicative) {
      return function (a) {
          return prepend(dictApplicative)(a)(nil(dictApplicative));
      };
  };
  var take = function (dictApplicative) {
      return function (v) {
          return function (fa) {
              if (v === 0) {
                  return nil(dictApplicative);
              };
              var f = function (v1) {
                  if (v1 instanceof Yield) {
                      return new Yield(v1.value0, Data_Functor.map(Data_Lazy.functorLazy)(take(dictApplicative)(v - 1))(v1.value1));
                  };
                  if (v1 instanceof Skip) {
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(take(dictApplicative)(v))(v1.value0));
                  };
                  if (v1 instanceof Done) {
                      return Done.value;
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 136, column 3 - line 136, column 47: " + [ v1.constructor.name ]);
              };
              return stepMap((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(f)(fa);
          };
      };
  };
  var zipWith$prime = function (dictMonad) {
      return function (f) {
          var g = function (v) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(nil(dictMonad["__superclass_Control.Applicative.Applicative_0"]()));
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(nil(dictMonad["__superclass_Control.Applicative.Applicative_0"]()));
                  };
                  if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                      return Data_Functor.map(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Function.flip(prepend$prime(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))(Data_Lazy.defer(function (v2) {
                          return zipWith$prime(dictMonad)(f)(v.value0.value1)(v1.value0.value1);
                      })))(f(v.value0.value0)(v1.value0.value0));
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 225, column 3 - line 228, column 12: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          var loop = function (fa) {
              return function (fb) {
                  return wrapEffect(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(uncons(dictMonad)(fa))(function (v) {
                      return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(uncons(dictMonad)(fb))(function (v1) {
                          return g(v)(v1);
                      });
                  }));
              };
          };
          return loop;
      };
  };
  var zipWith = function (dictMonad) {
      return function (f) {
          var g = function (a) {
              return function (b) {
                  return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))(f(a)(b));
              };
          };
          return zipWith$prime(dictMonad)(g);
      };
  };
  var mapMaybe = function (dictFunctor) {
      return function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  return Data_Maybe.fromMaybe(Skip.create)(Data_Functor.map(Data_Maybe.functorMaybe)(Yield.create)(f(v.value0)))(Data_Functor.map(Data_Lazy.functorLazy)(mapMaybe(dictFunctor)(f))(v.value1));
              };
              if (v instanceof Skip) {
                  return Data_Function.apply(Skip.create)(Data_Functor.map(Data_Lazy.functorLazy)(mapMaybe(dictFunctor)(f))(v.value0));
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 172, column 3 - line 172, column 72: " + [ v.constructor.name ]);
          };
          return stepMap(dictFunctor)(g);
      };
  };
  var iterate = function (dictMonad) {
      return function (f) {
          return function (a) {
              var g = function (a1) {
                  return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))(new Data_Maybe.Just(new Data_Tuple.Tuple(f(a1), a1)));
              };
              return unfold(dictMonad)(g)(a);
          };
      };
  };
  var repeat = function (dictMonad) {
      return iterate(dictMonad)(Control_Category.id(Control_Category.categoryFn));
  };
  var head = function (dictMonad) {
      return function (l) {
          return Data_Functor.map(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.fst))(uncons(dictMonad)(l));
      };
  };
  var functorListT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  return new Yield(f(v.value0), Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(functorListT(dictFunctor))(f))(v.value1));
              };
              if (v instanceof Skip) {
                  return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(Data_Functor.map(functorListT(dictFunctor))(f))(v.value0));
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 248, column 5 - line 248, column 48: " + [ v.constructor.name ]);
          };
          return stepMap(dictFunctor)(g);
      });
  };
  var fromEffect = function (dictApplicative) {
      return function (fa) {
          return Data_Function.apply(ListT.create)(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Function.flip(Yield.create)(Data_Function.apply(Data_Lazy.defer)(function (v) {
              return nil(dictApplicative);
          })))(fa));
      };
  };
  var monadTransListT = new Control_Monad_Trans.MonadTrans(function (dictMonad) {
      return fromEffect(dictMonad["__superclass_Control.Applicative.Applicative_0"]());
  });
  var foldl$prime = function (dictMonad) {
      return function (f) {
          var loop = function (b) {
              return function (l) {
                  var g = function (v) {
                      if (v instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(b);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f(b)(v.value0.value0))(Data_Function.flip(loop)(v.value0.value1));
                      };
                      throw new Error("Failed pattern match at Control.Monad.List.Trans line 201, column 5 - line 201, column 35: " + [ v.constructor.name ]);
                  };
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(uncons(dictMonad)(l))(g);
              };
          };
          return loop;
      };
  };
  var foldl = function (dictMonad) {
      return function (f) {
          var loop = function (b) {
              return function (l) {
                  var g = function (v) {
                      if (v instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(b);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return loop(f(b)(v.value0.value0))(v.value0.value1);
                      };
                      throw new Error("Failed pattern match at Control.Monad.List.Trans line 209, column 5 - line 209, column 35: " + [ v.constructor.name ]);
                  };
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(uncons(dictMonad)(l))(g);
              };
          };
          return loop;
      };
  };
  var filter = function (dictFunctor) {
      return function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  var s$prime = Data_Functor.map(Data_Lazy.functorLazy)(filter(dictFunctor)(f))(v.value1);
                  var $139 = f(v.value0);
                  if ($139) {
                      return new Yield(v.value0, s$prime);
                  };
                  if (!$139) {
                      return new Skip(s$prime);
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 165, column 19 - line 165, column 54: " + [ $139.constructor.name ]);
              };
              if (v instanceof Skip) {
                  var s$prime = Data_Functor.map(Data_Lazy.functorLazy)(filter(dictFunctor)(f))(v.value0);
                  return new Skip(s$prime);
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 165, column 3 - line 165, column 80: " + [ v.constructor.name ]);
          };
          return stepMap(dictFunctor)(g);
      };
  };
  var dropWhile = function (dictApplicative) {
      return function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  var $144 = f(v.value0);
                  if ($144) {
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(dropWhile(dictApplicative)(f))(v.value1));
                  };
                  if (!$144) {
                      return new Yield(v.value0, v.value1);
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 158, column 19 - line 158, column 70: " + [ $144.constructor.name ]);
              };
              if (v instanceof Skip) {
                  return Data_Function.apply(Skip.create)(Data_Functor.map(Data_Lazy.functorLazy)(dropWhile(dictApplicative)(f))(v.value0));
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 158, column 3 - line 158, column 70: " + [ v.constructor.name ]);
          };
          return stepMap((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(g);
      };
  };
  var drop = function (dictApplicative) {
      return function (v) {
          return function (fa) {
              if (v === 0) {
                  return fa;
              };
              var f = function (v1) {
                  if (v1 instanceof Yield) {
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(drop(dictApplicative)(v - 1))(v1.value1));
                  };
                  if (v1 instanceof Skip) {
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(drop(dictApplicative)(v))(v1.value0));
                  };
                  if (v1 instanceof Done) {
                      return Done.value;
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 151, column 3 - line 151, column 44: " + [ v1.constructor.name ]);
              };
              return stepMap((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(f)(fa);
          };
      };
  };
  var cons = function (dictApplicative) {
      return function (lh) {
          return function (t) {
              return Data_Function.apply(ListT.create)(Data_Function.apply(Control_Applicative.pure(dictApplicative))(new Yield(Data_Lazy.force(lh), t)));
          };
      };
  };
  var unfoldableListT = function (dictMonad) {
      return new Data_Unfoldable.Unfoldable(function (f) {
          return function (b) {
              var go = function (v) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return nil(dictMonad["__superclass_Control.Applicative.Applicative_0"]());
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return cons(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Control_Applicative.pure(Data_Lazy.applicativeLazy)(v.value0.value0))(Data_Lazy.defer(function (v1) {
                          return go(f(v.value0.value1));
                      }));
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 253, column 3 - line 255, column 73: " + [ v.constructor.name ]);
              };
              return go(f(b));
          };
      });
  };
  var semigroupListT = function (dictApplicative) {
      return new Data_Semigroup.Semigroup(concat(dictApplicative));
  };
  var concat = function (dictApplicative) {
      return function (x) {
          return function (y) {
              var f = function (v) {
                  if (v instanceof Yield) {
                      return new Yield(v.value0, Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
                          return Data_Semigroup.append(semigroupListT(dictApplicative))(v1)(y);
                      })(v.value1));
                  };
                  if (v instanceof Skip) {
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
                          return Data_Semigroup.append(semigroupListT(dictApplicative))(v1)(y);
                      })(v.value0));
                  };
                  if (v instanceof Done) {
                      return new Skip(Data_Function.apply(Data_Lazy.defer)(Data_Function["const"](y)));
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 95, column 3 - line 95, column 43: " + [ v.constructor.name ]);
              };
              return stepMap((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(f)(x);
          };
      };
  };
  var monoidListT = function (dictApplicative) {
      return new Data_Monoid.Monoid(function () {
          return semigroupListT(dictApplicative);
      }, nil(dictApplicative));
  };
  var catMaybes = function (dictFunctor) {
      return mapMaybe(dictFunctor)(Control_Category.id(Control_Category.categoryFn));
  };
  var monadListT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeListT(dictMonad);
      }, function () {
          return bindListT(dictMonad);
      });
  };
  var bindListT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyListT(dictMonad);
      }, function (fa) {
          return function (f) {
              var g = function (v) {
                  if (v instanceof Yield) {
                      var h = function (s1) {
                          return Data_Semigroup.append(semigroupListT(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))(f(v.value0))(Control_Bind.bind(bindListT(dictMonad))(s1)(f));
                      };
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(h)(v.value1));
                  };
                  if (v instanceof Skip) {
                      return new Skip(Data_Functor.map(Data_Lazy.functorLazy)(function (v1) {
                          return Control_Bind.bind(bindListT(dictMonad))(v1)(f);
                      })(v.value0));
                  };
                  if (v instanceof Done) {
                      return Done.value;
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 265, column 5 - line 267, column 29: " + [ v.constructor.name ]);
              };
              return stepMap(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(g)(fa);
          };
      });
  };
  var applyListT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorListT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]());
      }, Control_Monad.ap(monadListT(dictMonad)));
  };
  var applicativeListT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyListT(dictMonad);
      }, singleton(dictMonad["__superclass_Control.Applicative.Applicative_0"]()));
  };
  var monadEffListT = function (dictMonadEff) {
      return new Control_Monad_Eff_Class.MonadEff(function () {
          return monadListT(dictMonadEff["__superclass_Control.Monad.Monad_0"]());
      }, function ($168) {
          return Control_Monad_Trans.lift(monadTransListT)(dictMonadEff["__superclass_Control.Monad.Monad_0"]())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($168));
      });
  };
  var altListT = function (dictApplicative) {
      return new Control_Alt.Alt(function () {
          return functorListT((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]());
      }, concat(dictApplicative));
  };
  var plusListT = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return altListT(dictMonad["__superclass_Control.Applicative.Applicative_0"]());
      }, nil(dictMonad["__superclass_Control.Applicative.Applicative_0"]()));
  };
  var alternativeListT = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return applicativeListT(dictMonad);
      }, function () {
          return plusListT(dictMonad);
      });
  };
  var monadZeroListT = function (dictMonad) {
      return new Control_MonadZero.MonadZero(function () {
          return alternativeListT(dictMonad);
      }, function () {
          return monadListT(dictMonad);
      });
  };
  var monadPlusListT = function (dictMonad) {
      return new Control_MonadPlus.MonadPlus(function () {
          return monadZeroListT(dictMonad);
      });
  };
  exports["catMaybes"] = catMaybes;
  exports["cons"] = cons;
  exports["drop"] = drop;
  exports["dropWhile"] = dropWhile;
  exports["filter"] = filter;
  exports["foldl"] = foldl;
  exports["foldl'"] = foldl$prime;
  exports["fromEffect"] = fromEffect;
  exports["head"] = head;
  exports["iterate"] = iterate;
  exports["mapMaybe"] = mapMaybe;
  exports["nil"] = nil;
  exports["prepend"] = prepend;
  exports["prepend'"] = prepend$prime;
  exports["repeat"] = repeat;
  exports["scanl"] = scanl;
  exports["singleton"] = singleton;
  exports["tail"] = tail;
  exports["take"] = take;
  exports["takeWhile"] = takeWhile;
  exports["uncons"] = uncons;
  exports["unfold"] = unfold;
  exports["wrapEffect"] = wrapEffect;
  exports["wrapLazy"] = wrapLazy;
  exports["zipWith"] = zipWith;
  exports["zipWith'"] = zipWith$prime;
  exports["semigroupListT"] = semigroupListT;
  exports["monoidListT"] = monoidListT;
  exports["functorListT"] = functorListT;
  exports["unfoldableListT"] = unfoldableListT;
  exports["applyListT"] = applyListT;
  exports["applicativeListT"] = applicativeListT;
  exports["bindListT"] = bindListT;
  exports["monadListT"] = monadListT;
  exports["monadTransListT"] = monadTransListT;
  exports["altListT"] = altListT;
  exports["plusListT"] = plusListT;
  exports["alternativeListT"] = alternativeListT;
  exports["monadZeroListT"] = monadZeroListT;
  exports["monadPlusListT"] = monadPlusListT;
  exports["monadEffListT"] = monadEffListT;
})(PS["Control.Monad.List.Trans"] = PS["Control.Monad.List.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_RWS_Class = PS["Control.Monad.RWS.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var MaybeT = function (x) {
      return x;
  };
  var runMaybeT = function (v) {
      return v;
  };
  var monadTransMaybeT = new Control_Monad_Trans.MonadTrans(function (dictMonad) {
      return function ($60) {
          return MaybeT(Control_Monad.liftM1(dictMonad)(Data_Maybe.Just.create)($60));
      };
  });
  var mapMaybeT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var monadMaybeT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeMaybeT(dictMonad);
      }, function () {
          return bindMaybeT(dictMonad);
      });
  };
  var functorMaybeT = function (dictMonad) {
      return new Data_Functor.Functor(Control_Applicative.liftA1(applicativeMaybeT(dictMonad)));
  };
  var bindMaybeT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyMaybeT(dictMonad);
      }, function (v) {
          return function (f) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v)(function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Maybe.Nothing.value);
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      var $36 = f(v1.value0);
                      return $36;
                  };
                  throw new Error("Failed pattern match at Control.Monad.Maybe.Trans line 55, column 5 - line 58, column 22: " + [ v1.constructor.name ]);
              });
          };
      });
  };
  var applyMaybeT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorMaybeT(dictMonad);
      }, Control_Monad.ap(monadMaybeT(dictMonad)));
  };
  var applicativeMaybeT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyMaybeT(dictMonad);
      }, function ($61) {
          return MaybeT(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Maybe.Just.create($61)));
      });
  };
  var monadContMaybeT = function (dictMonadCont) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadMaybeT(dictMonadCont["__superclass_Control.Monad.Monad_0"]());
      }, function (f) {
          return Data_Function.apply(MaybeT)(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
              var $38 = f(function (a) {
                  return Data_Function.apply(MaybeT)(Data_Function.apply(c)(new Data_Maybe.Just(a)));
              });
              return $38;
          }));
      });
  };
  var monadEffMaybe = function (dictMonadEff) {
      return new Control_Monad_Eff_Class.MonadEff(function () {
          return monadMaybeT(dictMonadEff["__superclass_Control.Monad.Monad_0"]());
      }, function ($62) {
          return Control_Monad_Trans.lift(monadTransMaybeT)(dictMonadEff["__superclass_Control.Monad.Monad_0"]())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($62));
      });
  };
  var monadErrorMaybeT = function (dictMonadError) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadMaybeT(dictMonadError["__superclass_Control.Monad.Monad_0"]());
      }, function (v) {
          return function (h) {
              return Data_Function.apply(MaybeT)(Control_Monad_Error_Class.catchError(dictMonadError)(v)(function (a) {
                  var $41 = h(a);
                  return $41;
              }));
          };
      }, function (e) {
          return Control_Monad_Trans.lift(monadTransMaybeT)(dictMonadError["__superclass_Control.Monad.Monad_0"]())(Control_Monad_Error_Class.throwError(dictMonadError)(e));
      });
  };
  var monadReaderMaybeT = function (dictMonadReader) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadMaybeT(dictMonadReader["__superclass_Control.Monad.Monad_0"]());
      }, Control_Monad_Trans.lift(monadTransMaybeT)(dictMonadReader["__superclass_Control.Monad.Monad_0"]())(Control_Monad_Reader_Class.ask(dictMonadReader)), function (f) {
          return mapMaybeT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
      });
  };
  var monadRecMaybeT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadMaybeT(dictMonadRec["__superclass_Control.Monad.Monad_0"]());
      }, function (f) {
          return function ($63) {
              return MaybeT(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function (a) {
                  var $42 = f(a);
                  return Control_Bind.bind((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())($42)(function (m$prime) {
                      return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())((function () {
                          if (m$prime instanceof Data_Maybe.Nothing) {
                              return new Data_Either.Right(Data_Maybe.Nothing.value);
                          };
                          if (m$prime instanceof Data_Maybe.Just && m$prime.value0 instanceof Data_Either.Left) {
                              return new Data_Either.Left(m$prime.value0.value0);
                          };
                          if (m$prime instanceof Data_Maybe.Just && m$prime.value0 instanceof Data_Either.Right) {
                              return new Data_Either.Right(new Data_Maybe.Just(m$prime.value0.value0));
                          };
                          throw new Error("Failed pattern match at Control.Monad.Maybe.Trans line 86, column 11 - line 89, column 45: " + [ m$prime.constructor.name ]);
                      })());
                  });
              })($63));
          };
      });
  };
  var monadStateMaybeT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadMaybeT(dictMonadState["__superclass_Control.Monad.Monad_0"]());
      }, function (f) {
          return Control_Monad_Trans.lift(monadTransMaybeT)(dictMonadState["__superclass_Control.Monad.Monad_0"]())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadWriterMaybeT = function (dictMonadWriter) {
      return new Control_Monad_Writer_Class.MonadWriter(function () {
          return monadMaybeT(dictMonadWriter["__superclass_Control.Monad.Monad_0"]());
      }, mapMaybeT(function (m) {
          return Control_Bind.bind((dictMonadWriter["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m))(function (v) {
              return Data_Function.apply(Control_Applicative.pure((dictMonadWriter["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]()))(Data_Functor.map(Data_Maybe.functorMaybe)(function (r) {
                  return new Data_Tuple.Tuple(r, v.value1);
              })(v.value0));
          });
      }), mapMaybeT(function (m) {
          return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind((dictMonadWriter["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(m)(function (v) {
              return Control_Applicative.pure((dictMonadWriter["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())((function () {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, Control_Category.id(Control_Category.categoryFn));
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Tuple.Tuple(new Data_Maybe.Just(v.value0.value0), v.value0.value1);
                  };
                  throw new Error("Failed pattern match at Control.Monad.Maybe.Trans line 117, column 5 - line 119, column 43: " + [ v.constructor.name ]);
              })());
          }));
      }), function (wd) {
          return Control_Monad_Trans.lift(monadTransMaybeT)(dictMonadWriter["__superclass_Control.Monad.Monad_0"]())(Control_Monad_Writer_Class.writer(dictMonadWriter)(wd));
      });
  };
  var monadRWSMaybeT = function (dictMonadRWS) {
      return new Control_Monad_RWS_Class.MonadRWS(function () {
          return monadReaderMaybeT(dictMonadRWS["__superclass_Control.Monad.Reader.Class.MonadReader_0"]());
      }, function () {
          return monadStateMaybeT(dictMonadRWS["__superclass_Control.Monad.State.Class.MonadState_2"]());
      }, function () {
          return monadWriterMaybeT(dictMonadRWS["__superclass_Control.Monad.Writer.Class.MonadWriter_1"]());
      });
  };
  var altMaybeT = function (dictMonad) {
      return new Control_Alt.Alt(function () {
          return functorMaybeT(dictMonad);
      }, function (v) {
          return function (v1) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v)(function (v2) {
                  if (v2 instanceof Data_Maybe.Nothing) {
                      return v1;
                  };
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v2);
              });
          };
      });
  };
  var plusMaybeT = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return altMaybeT(dictMonad);
      }, Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(Data_Maybe.Nothing.value));
  };
  var alternativeMaybeT = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return applicativeMaybeT(dictMonad);
      }, function () {
          return plusMaybeT(dictMonad);
      });
  };
  var monadZeroMaybeT = function (dictMonad) {
      return new Control_MonadZero.MonadZero(function () {
          return alternativeMaybeT(dictMonad);
      }, function () {
          return monadMaybeT(dictMonad);
      });
  };
  var monadPlusMaybeT = function (dictMonad) {
      return new Control_MonadPlus.MonadPlus(function () {
          return monadZeroMaybeT(dictMonad);
      });
  };
  exports["MaybeT"] = MaybeT;
  exports["mapMaybeT"] = mapMaybeT;
  exports["runMaybeT"] = runMaybeT;
  exports["functorMaybeT"] = functorMaybeT;
  exports["applyMaybeT"] = applyMaybeT;
  exports["applicativeMaybeT"] = applicativeMaybeT;
  exports["bindMaybeT"] = bindMaybeT;
  exports["monadMaybeT"] = monadMaybeT;
  exports["monadTransMaybeT"] = monadTransMaybeT;
  exports["altMaybeT"] = altMaybeT;
  exports["plusMaybeT"] = plusMaybeT;
  exports["alternativeMaybeT"] = alternativeMaybeT;
  exports["monadPlusMaybeT"] = monadPlusMaybeT;
  exports["monadZeroMaybeT"] = monadZeroMaybeT;
  exports["monadRecMaybeT"] = monadRecMaybeT;
  exports["monadEffMaybe"] = monadEffMaybe;
  exports["monadContMaybeT"] = monadContMaybeT;
  exports["monadErrorMaybeT"] = monadErrorMaybeT;
  exports["monadReaderMaybeT"] = monadReaderMaybeT;
  exports["monadStateMaybeT"] = monadStateMaybeT;
  exports["monadWriterMaybeT"] = monadWriterMaybeT;
  exports["monadRWSMaybeT"] = monadRWSMaybeT;
})(PS["Control.Monad.Maybe.Trans"] = PS["Control.Monad.Maybe.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_RWS_Class = PS["Control.Monad.RWS.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Data_Either = PS["Data.Either"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var RWSResult = (function () {
      function RWSResult(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      RWSResult.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new RWSResult(value0, value1, value2);
              };
          };
      };
      return RWSResult;
  })();
  var RWST = function (x) {
      return x;
  };
  var withRWST = function (f) {
      return function (m) {
          return function (r) {
              return function (s) {
                  return Data_Tuple.uncurry(m)(f(r)(s));
              };
          };
      };
  };
  var runRWST = function (v) {
      return v;
  };
  var monadTransRWST = function (dictMonoid) {
      return new Control_Monad_Trans.MonadTrans(function (dictMonad) {
          return function (m) {
              return function (v) {
                  return function (s) {
                      return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(m)(function (a) {
                          return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                      });
                  };
              };
          };
      });
  };
  var mapRWST = function (f) {
      return function (v) {
          return function (r) {
              return function (s) {
                  return f(v(r)(s));
              };
          };
      };
  };
  var functorRWST = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (r) {
                  return function (s) {
                      return Data_Functor.map(dictFunctor)(function (v1) {
                          return new RWSResult(v1.value0, f(v1.value1), v1.value2);
                      })(v(r)(s));
                  };
              };
          };
      });
  };
  var execRWST = function (dictMonad) {
      return function (v) {
          return function (r) {
              return function (s) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v(r)(s))(function (v1) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Data_Tuple.Tuple(v1.value0, v1.value2));
                  });
              };
          };
      };
  };
  var evalRWST = function (dictMonad) {
      return function (v) {
          return function (r) {
              return function (s) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v(r)(s))(function (v1) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Data_Tuple.Tuple(v1.value1, v1.value2));
                  });
              };
          };
      };
  };
  var applyRWST = function (dictBind) {
      return function (dictMonoid) {
          return new Control_Apply.Apply(function () {
              return functorRWST((dictBind["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]());
          }, function (v) {
              return function (v1) {
                  return function (r) {
                      return function (s) {
                          return Control_Bind.bind(dictBind)(v(r)(s))(function (v2) {
                              return Data_Functor.mapFlipped((dictBind["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(v1(r)(v2.value0))(function (v3) {
                                  return new RWSResult(v3.value0, v2.value1(v3.value1), Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(v2.value2)(v3.value2));
                              });
                          });
                      };
                  };
              };
          });
      };
  };
  var bindRWST = function (dictBind) {
      return function (dictMonoid) {
          return new Control_Bind.Bind(function () {
              return applyRWST(dictBind)(dictMonoid);
          }, function (v) {
              return function (f) {
                  return function (r) {
                      return function (s) {
                          return Control_Bind.bind(dictBind)(v(r)(s))(function (v1) {
                              var $89 = f(v1.value1);
                              return Data_Functor.mapFlipped((dictBind["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())($89(r)(v1.value0))(function (v2) {
                                  return new RWSResult(v2.value0, v2.value1, Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(v1.value2)(v2.value2));
                              });
                          });
                      };
                  };
              };
          });
      };
  };
  var applicativeRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Applicative.Applicative(function () {
              return applyRWST(dictMonad["__superclass_Control.Bind.Bind_1"]())(dictMonoid);
          }, function (a) {
              return function (v) {
                  return function (s) {
                      return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                  };
              };
          });
      };
  };
  var monadRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad.Monad(function () {
              return applicativeRWST(dictMonad)(dictMonoid);
          }, function () {
              return bindRWST(dictMonad["__superclass_Control.Bind.Bind_1"]())(dictMonoid);
          });
      };
  };
  var monadEffRWS = function (dictMonoid) {
      return function (dictMonadEff) {
          return new Control_Monad_Eff_Class.MonadEff(function () {
              return monadRWST(dictMonadEff["__superclass_Control.Monad.Monad_0"]())(dictMonoid);
          }, function ($134) {
              return Control_Monad_Trans.lift(monadTransRWST(dictMonoid))(dictMonadEff["__superclass_Control.Monad.Monad_0"]())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($134));
          });
      };
  };
  var monadErrorRWST = function (dictMonadError) {
      return function (dictMonoid) {
          return new Control_Monad_Error_Class.MonadError(function () {
              return monadRWST(dictMonadError["__superclass_Control.Monad.Monad_0"]())(dictMonoid);
          }, function (m) {
              return function (h) {
                  return Data_Function.apply(RWST)(function (r) {
                      return function (s) {
                          return Control_Monad_Error_Class.catchError(dictMonadError)(m(r)(s))(function (e) {
                              var $99 = h(e);
                              return $99(r)(s);
                          });
                      };
                  });
              };
          }, function (e) {
              return Control_Monad_Trans.lift(monadTransRWST(dictMonoid))(dictMonadError["__superclass_Control.Monad.Monad_0"]())(Control_Monad_Error_Class.throwError(dictMonadError)(e));
          });
      };
  };
  var monadReaderRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Reader_Class.MonadReader(function () {
              return monadRWST(dictMonad)(dictMonoid);
          }, function (r) {
              return function (s) {
                  return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))(new RWSResult(s, r, Data_Monoid.mempty(dictMonoid)));
              };
          }, function (f) {
              return function (m) {
                  return function (r) {
                      return function (s) {
                          return m(f(r))(s);
                      };
                  };
              };
          });
      };
  };
  var monadRecRWST = function (dictMonadRec) {
      return function (dictMonoid) {
          return new Control_Monad_Rec_Class.MonadRec(function () {
              return monadRWST(dictMonadRec["__superclass_Control.Monad.Monad_0"]())(dictMonoid);
          }, function (k) {
              return function (a) {
                  var k$prime = function (r) {
                      return function (v) {
                          var $103 = k(v.value1);
                          return Control_Bind.bind((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())($103(r)(v.value0))(function (v1) {
                              return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())((function () {
                                  if (v1.value1 instanceof Data_Either.Left) {
                                      return new Data_Either.Left(new RWSResult(v1.value0, v1.value1.value0, Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(v.value2)(v1.value2)));
                                  };
                                  if (v1.value1 instanceof Data_Either.Right) {
                                      return new Data_Either.Right(new RWSResult(v1.value0, v1.value1.value0, Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(v.value2)(v1.value2)));
                                  };
                                  throw new Error("Failed pattern match at Control.Monad.RWS.Trans line 113, column 11 - line 115, column 69: " + [ v1.value1.constructor.name ]);
                              })());
                          });
                      };
                  };
                  return function (r) {
                      return function (s) {
                          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(k$prime(r))(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                      };
                  };
              };
          });
      };
  };
  var monadStateRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_State_Class.MonadState(function () {
              return monadRWST(dictMonad)(dictMonoid);
          }, function (f) {
              return function (v) {
                  return function (s) {
                      var $115 = f(s);
                      return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))(new RWSResult($115.value1, $115.value0, Data_Monoid.mempty(dictMonoid)));
                  };
              };
          });
      };
  };
  var monadWriterRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Writer_Class.MonadWriter(function () {
              return monadRWST(dictMonad)(dictMonoid);
          }, function (m) {
              return function (r) {
                  return function (s) {
                      return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(m(r)(s))(function (v) {
                          return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))(new RWSResult(v.value0, new Data_Tuple.Tuple(v.value1, v.value2), v.value2));
                      });
                  };
              };
          }, function (m) {
              return function (r) {
                  return function (s) {
                      return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(m(r)(s))(function (v) {
                          return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))(new RWSResult(v.value0, v.value1.value0, v.value1.value1(v.value2)));
                      });
                  };
              };
          }, function (v) {
              return function (v1) {
                  return function (s) {
                      return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))(new RWSResult(s, v.value0, v.value1));
                  };
              };
          });
      };
  };
  var monadRWSRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_RWS_Class.MonadRWS(function () {
              return monadReaderRWST(dictMonad)(dictMonoid);
          }, function () {
              return monadStateRWST(dictMonad)(dictMonoid);
          }, function () {
              return monadWriterRWST(dictMonad)(dictMonoid);
          });
      };
  };
  exports["RWSResult"] = RWSResult;
  exports["RWST"] = RWST;
  exports["evalRWST"] = evalRWST;
  exports["execRWST"] = execRWST;
  exports["mapRWST"] = mapRWST;
  exports["runRWST"] = runRWST;
  exports["withRWST"] = withRWST;
  exports["functorRWST"] = functorRWST;
  exports["applyRWST"] = applyRWST;
  exports["bindRWST"] = bindRWST;
  exports["applicativeRWST"] = applicativeRWST;
  exports["monadRWST"] = monadRWST;
  exports["monadTransRWST"] = monadTransRWST;
  exports["monadEffRWS"] = monadEffRWS;
  exports["monadReaderRWST"] = monadReaderRWST;
  exports["monadStateRWST"] = monadStateRWST;
  exports["monadWriterRWST"] = monadWriterRWST;
  exports["monadRWSRWST"] = monadRWSRWST;
  exports["monadErrorRWST"] = monadErrorRWST;
  exports["monadRecRWST"] = monadRecRWST;
})(PS["Control.Monad.RWS.Trans"] = PS["Control.Monad.RWS.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_RWS_Class = PS["Control.Monad.RWS.Class"];
  var Control_Monad_RWS_Trans = PS["Control.Monad.RWS.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var withRWS = Control_Monad_RWS_Trans.withRWST;
  var rws = function (f) {
      return function (r) {
          return function (s) {
              return Data_Function.apply(Control_Applicative.pure(Data_Identity.applicativeIdentity))(f(r)(s));
          };
      };
  };
  var runRWS = function (m) {
      return function (r) {
          return function (s) {
              var $1 = m(r)(s);
              return $1;
          };
      };
  };
  var mapRWS = function (f) {
      return Control_Monad_RWS_Trans.mapRWST(function ($2) {
          return Data_Identity.Identity(f(Data_Identity.runIdentity($2)));
      });
  };
  var execRWS = function (m) {
      return function (r) {
          return function (s) {
              return Data_Function.apply(Data_Identity.runIdentity)(Control_Monad_RWS_Trans.execRWST(Data_Identity.monadIdentity)(m)(r)(s));
          };
      };
  };
  var evalRWS = function (m) {
      return function (r) {
          return function (s) {
              return Data_Function.apply(Data_Identity.runIdentity)(Control_Monad_RWS_Trans.evalRWST(Data_Identity.monadIdentity)(m)(r)(s));
          };
      };
  };
  exports["evalRWS"] = evalRWS;
  exports["execRWS"] = execRWS;
  exports["mapRWS"] = mapRWS;
  exports["runRWS"] = runRWS;
  exports["rws"] = rws;
  exports["withRWS"] = withRWS;
})(PS["Control.Monad.RWS"] = PS["Control.Monad.RWS"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];        
  var Distributive = function (__superclass_Data$dotFunctor$dotFunctor_0, collect, distribute) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.collect = collect;
      this.distribute = distribute;
  };
  var distributiveIdentity = new Distributive(function () {
      return Data_Identity.functorIdentity;
  }, function (dictFunctor) {
      return function (f) {
          return function ($11) {
              return Data_Identity.Identity(Data_Functor.map(dictFunctor)(function ($12) {
                  return Data_Identity.runIdentity(f($12));
              })($11));
          };
      };
  }, function (dictFunctor) {
      return function ($13) {
          return Data_Identity.Identity(Data_Functor.map(dictFunctor)(Data_Identity.runIdentity)($13));
      };
  });
  var distribute = function (dict) {
      return dict.distribute;
  };
  var distributiveFunction = new Distributive(function () {
      return Data_Functor.functorFn;
  }, function (dictFunctor) {
      return function (f) {
          return function ($14) {
              return distribute(distributiveFunction)(dictFunctor)(Data_Functor.map(dictFunctor)(f)($14));
          };
      };
  }, function (dictFunctor) {
      return function (a) {
          return function (e) {
              return Data_Functor.map(dictFunctor)(function (v) {
                  return Data_Function.apply(v)(e);
              })(a);
          };
      };
  });
  var cotraverse = function (dictDistributive) {
      return function (dictFunctor) {
          return function (f) {
              return function ($15) {
                  return Data_Functor.map(dictDistributive["__superclass_Data.Functor.Functor_0"]())(f)(distribute(dictDistributive)(dictFunctor)($15));
              };
          };
      };
  };
  var collectDefault = function (dictDistributive) {
      return function (dictFunctor) {
          return function (f) {
              return function ($16) {
                  return distribute(dictDistributive)(dictFunctor)(Data_Functor.map(dictFunctor)(f)($16));
              };
          };
      };
  };
  var collect = function (dict) {
      return dict.collect;
  };
  var distributeDefault = function (dictDistributive) {
      return function (dictFunctor) {
          return collect(dictDistributive)(dictFunctor)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Distributive"] = Distributive;
  exports["collect"] = collect;
  exports["collectDefault"] = collectDefault;
  exports["cotraverse"] = cotraverse;
  exports["distribute"] = distribute;
  exports["distributeDefault"] = distributeDefault;
  exports["distributiveIdentity"] = distributiveIdentity;
  exports["distributiveFunction"] = distributiveFunction;
})(PS["Data.Distributive"] = PS["Data.Distributive"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];        
  var ReaderT = function (x) {
      return x;
  };
  var withReaderT = function (f) {
      return function (v) {
          return function ($48) {
              return v(f($48));
          };
      };
  };
  var runReaderT = function (v) {
      return v;
  };
  var monadTransReaderT = new Control_Monad_Trans.MonadTrans(function (dictMonad) {
      return function ($49) {
          return ReaderT(Data_Function["const"]($49));
      };
  });
  var mapReaderT = function (f) {
      return function (v) {
          return function ($50) {
              return f(v($50));
          };
      };
  };
  var functorReaderT = function (dictFunctor) {
      return new Data_Functor.Functor(function ($51) {
          return mapReaderT(Data_Functor.map(dictFunctor)($51));
      });
  };
  var distributiveReaderT = function (dictDistributive) {
      return new Data_Distributive.Distributive(function () {
          return functorReaderT(dictDistributive["__superclass_Data.Functor.Functor_0"]());
      }, function (dictFunctor) {
          return function (f) {
              return function ($52) {
                  return Data_Distributive.distribute(distributiveReaderT(dictDistributive))(dictFunctor)(Data_Functor.map(dictFunctor)(f)($52));
              };
          };
      }, function (dictFunctor) {
          return function (a) {
              return function (e) {
                  return Data_Distributive.collect(dictDistributive)(dictFunctor)(function (r) {
                      return r(e);
                  })(a);
              };
          };
      });
  };
  var applyReaderT = function (dictApply) {
      return new Control_Apply.Apply(function () {
          return functorReaderT(dictApply["__superclass_Data.Functor.Functor_0"]());
      }, function (v) {
          return function (v1) {
              return function (r) {
                  return Control_Apply.apply(dictApply)(v(r))(v1(r));
              };
          };
      });
  };
  var bindReaderT = function (dictBind) {
      return new Control_Bind.Bind(function () {
          return applyReaderT(dictBind["__superclass_Control.Apply.Apply_0"]());
      }, function (v) {
          return function (k) {
              return function (r) {
                  return Control_Bind.bind(dictBind)(v(r))(function (a) {
                      var $40 = k(a);
                      return $40(r);
                  });
              };
          };
      });
  };
  var applicativeReaderT = function (dictApplicative) {
      return new Control_Applicative.Applicative(function () {
          return applyReaderT(dictApplicative["__superclass_Control.Apply.Apply_0"]());
      }, function ($53) {
          return ReaderT(Data_Function["const"](Control_Applicative.pure(dictApplicative)($53)));
      });
  };
  var monadReaderT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeReaderT(dictMonad["__superclass_Control.Applicative.Applicative_0"]());
      }, function () {
          return bindReaderT(dictMonad["__superclass_Control.Bind.Bind_1"]());
      });
  };
  var monadContReaderT = function (dictMonadCont) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadReaderT(dictMonadCont["__superclass_Control.Monad.Monad_0"]());
      }, function (f) {
          return function (r) {
              return Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                  var $41 = f(function ($54) {
                      return ReaderT(Data_Function["const"](c($54)));
                  });
                  return $41(r);
              });
          };
      });
  };
  var monadEffReader = function (dictMonadEff) {
      return new Control_Monad_Eff_Class.MonadEff(function () {
          return monadReaderT(dictMonadEff["__superclass_Control.Monad.Monad_0"]());
      }, function ($55) {
          return Control_Monad_Trans.lift(monadTransReaderT)(dictMonadEff["__superclass_Control.Monad.Monad_0"]())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($55));
      });
  };
  var monadErrorReaderT = function (dictMonadError) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadReaderT(dictMonadError["__superclass_Control.Monad.Monad_0"]());
      }, function (v) {
          return function (h) {
              return function (r) {
                  return Control_Monad_Error_Class.catchError(dictMonadError)(v(r))(function (e) {
                      var $44 = h(e);
                      return $44(r);
                  });
              };
          };
      }, function ($56) {
          return Control_Monad_Trans.lift(monadTransReaderT)(dictMonadError["__superclass_Control.Monad.Monad_0"]())(Control_Monad_Error_Class.throwError(dictMonadError)($56));
      });
  };
  var monadReaderReaderT = function (dictMonad) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadReaderT(dictMonad);
      }, Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()), withReaderT);
  };
  var monadRecReaderT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadReaderT(dictMonadRec["__superclass_Control.Monad.Monad_0"]());
      }, function (k) {
          return function (a) {
              var k$prime = function (r) {
                  return function (a1) {
                      var $45 = k(a1);
                      return Control_Bind.bindFlipped((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(function ($57) {
                          return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(Data_Either.either(Data_Either.Left.create)(Data_Either.Right.create)($57));
                      })($45(r));
                  };
              };
              return function (r) {
                  return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(k$prime(r))(a);
              };
          };
      });
  };
  var monadStateReaderT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadReaderT(dictMonadState["__superclass_Control.Monad.Monad_0"]());
      }, function ($58) {
          return Control_Monad_Trans.lift(monadTransReaderT)(dictMonadState["__superclass_Control.Monad.Monad_0"]())(Control_Monad_State_Class.state(dictMonadState)($58));
      });
  };
  var monadWriterReaderT = function (dictMonadWriter) {
      return new Control_Monad_Writer_Class.MonadWriter(function () {
          return monadReaderT(dictMonadWriter["__superclass_Control.Monad.Monad_0"]());
      }, mapReaderT(Control_Monad_Writer_Class.listen(dictMonadWriter)), mapReaderT(Control_Monad_Writer_Class.pass(dictMonadWriter)), function ($59) {
          return Control_Monad_Trans.lift(monadTransReaderT)(dictMonadWriter["__superclass_Control.Monad.Monad_0"]())(Control_Monad_Writer_Class.writer(dictMonadWriter)($59));
      });
  };
  var altReaderT = function (dictAlt) {
      return new Control_Alt.Alt(function () {
          return functorReaderT(dictAlt["__superclass_Data.Functor.Functor_0"]());
      }, function (v) {
          return function (v1) {
              return function (r) {
                  return Control_Alt.alt(dictAlt)(v(r))(v1(r));
              };
          };
      });
  };
  var plusReaderT = function (dictPlus) {
      return new Control_Plus.Plus(function () {
          return altReaderT(dictPlus["__superclass_Control.Alt.Alt_0"]());
      }, Data_Function["const"](Control_Plus.empty(dictPlus)));
  };
  var alternativeReaderT = function (dictAlternative) {
      return new Control_Alternative.Alternative(function () {
          return applicativeReaderT(dictAlternative["__superclass_Control.Applicative.Applicative_0"]());
      }, function () {
          return plusReaderT(dictAlternative["__superclass_Control.Plus.Plus_1"]());
      });
  };
  var monadZeroReaderT = function (dictMonadZero) {
      return new Control_MonadZero.MonadZero(function () {
          return alternativeReaderT(dictMonadZero["__superclass_Control.Alternative.Alternative_1"]());
      }, function () {
          return monadReaderT(dictMonadZero["__superclass_Control.Monad.Monad_0"]());
      });
  };
  var monadPlusReaderT = function (dictMonadPlus) {
      return new Control_MonadPlus.MonadPlus(function () {
          return monadZeroReaderT(dictMonadPlus["__superclass_Control.MonadZero.MonadZero_0"]());
      });
  };
  exports["ReaderT"] = ReaderT;
  exports["mapReaderT"] = mapReaderT;
  exports["runReaderT"] = runReaderT;
  exports["withReaderT"] = withReaderT;
  exports["functorReaderT"] = functorReaderT;
  exports["applyReaderT"] = applyReaderT;
  exports["applicativeReaderT"] = applicativeReaderT;
  exports["altReaderT"] = altReaderT;
  exports["plusReaderT"] = plusReaderT;
  exports["alternativeReaderT"] = alternativeReaderT;
  exports["bindReaderT"] = bindReaderT;
  exports["monadReaderT"] = monadReaderT;
  exports["monadZeroReaderT"] = monadZeroReaderT;
  exports["monadPlusReaderT"] = monadPlusReaderT;
  exports["monadTransReaderT"] = monadTransReaderT;
  exports["monadEffReader"] = monadEffReader;
  exports["monadContReaderT"] = monadContReaderT;
  exports["monadErrorReaderT"] = monadErrorReaderT;
  exports["monadReaderReaderT"] = monadReaderReaderT;
  exports["monadStateReaderT"] = monadStateReaderT;
  exports["monadWriterReaderT"] = monadWriterReaderT;
  exports["distributiveReaderT"] = distributiveReaderT;
  exports["monadRecReaderT"] = monadRecReaderT;
})(PS["Control.Monad.Reader.Trans"] = PS["Control.Monad.Reader.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];        
  var withReader = Control_Monad_Reader_Trans.withReaderT;
  var runReader = function (v) {
      return function ($2) {
          return Data_Identity.runIdentity(v($2));
      };
  };
  var mapReader = function (f) {
      return Data_Function.apply(Control_Monad_Reader_Trans.mapReaderT)(function ($3) {
          return Data_Identity.Identity(f(Data_Identity.runIdentity($3)));
      });
  };
  exports["mapReader"] = mapReader;
  exports["runReader"] = runReader;
  exports["withReader"] = withReader;
})(PS["Control.Monad.Reader"] = PS["Control.Monad.Reader"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var StateT = function (x) {
      return x;
  };
  var withStateT = function (f) {
      return function (v) {
          return function ($92) {
              return v(f($92));
          };
      };
  };
  var runStateT = function (v) {
      return v;
  };
  var monadTransStateT = new Control_Monad_Trans.MonadTrans(function (dictMonad) {
      return function (m) {
          return function (s) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(m)(function (v) {
                  return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))(new Data_Tuple.Tuple(v, s));
              });
          };
      };
  });
  var mapStateT = function (f) {
      return function (v) {
          return function ($93) {
              return f(v($93));
          };
      };
  };
  var lazyStateT = new Control_Lazy.Lazy(function (f) {
      return function (s) {
          var $47 = f(Data_Unit.unit);
          return $47(s);
      };
  });
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var execStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.snd)(v(s));
          };
      };
  };
  var evalStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v(s))(function (v1) {
                      var $60 = f(v1.value0);
                      return $60(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadContStateT = function (dictMonadCont) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadStateT(dictMonadCont["__superclass_Control.Monad.Monad_0"]());
      }, function (f) {
          return function (s) {
              return Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                  var $63 = f(function (a) {
                      return function (s$prime) {
                          return c(new Data_Tuple.Tuple(a, s$prime));
                      };
                  });
                  return $63(s);
              });
          };
      });
  };
  var monadEffState = function (dictMonadEff) {
      return new Control_Monad_Eff_Class.MonadEff(function () {
          return monadStateT(dictMonadEff["__superclass_Control.Monad.Monad_0"]());
      }, function ($94) {
          return Control_Monad_Trans.lift(monadTransStateT)(dictMonadEff["__superclass_Control.Monad.Monad_0"]())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($94));
      });
  };
  var monadErrorStateT = function (dictMonadError) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadStateT(dictMonadError["__superclass_Control.Monad.Monad_0"]());
      }, function (v) {
          return function (h) {
              return function (s) {
                  return Control_Monad_Error_Class.catchError(dictMonadError)(v(s))(function (e) {
                      var $66 = h(e);
                      return $66(s);
                  });
              };
          };
      }, function (e) {
          return Control_Monad_Trans.lift(monadTransStateT)(dictMonadError["__superclass_Control.Monad.Monad_0"]())(Control_Monad_Error_Class.throwError(dictMonadError)(e));
      });
  };
  var monadReaderStateT = function (dictMonadReader) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadStateT(dictMonadReader["__superclass_Control.Monad.Monad_0"]());
      }, Control_Monad_Trans.lift(monadTransStateT)(dictMonadReader["__superclass_Control.Monad.Monad_0"]())(Control_Monad_Reader_Class.ask(dictMonadReader)), function (f) {
          return mapStateT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
      });
  };
  var monadRecStateT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadStateT(dictMonadRec["__superclass_Control.Monad.Monad_0"]());
      }, function (f) {
          return function (a) {
              var f$prime = function (v) {
                  return Control_Bind.bind((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())((function () {
                      var $68 = f(v.value0);
                      return $68;
                  })()(v.value1))(function (v1) {
                      return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())((function () {
                          if (v1.value0 instanceof Data_Either.Left) {
                              return new Data_Either.Left(new Data_Tuple.Tuple(v1.value0.value0, v1.value1));
                          };
                          if (v1.value0 instanceof Data_Either.Right) {
                              return new Data_Either.Right(new Data_Tuple.Tuple(v1.value0.value0, v1.value1));
                          };
                          throw new Error("Failed pattern match at Control.Monad.State.Trans line 86, column 11 - line 88, column 42: " + [ v1.value0.constructor.name ]);
                      })());
                  });
              };
              return function (s) {
                  return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(f$prime)(new Data_Tuple.Tuple(a, s));
              };
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return Data_Function.apply(StateT)(function ($95) {
              return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(f($95));
          });
      });
  };
  var monadWriterStateT = function (dictMonadWriter) {
      return new Control_Monad_Writer_Class.MonadWriter(function () {
          return monadStateT(dictMonadWriter["__superclass_Control.Monad.Monad_0"]());
      }, function (m) {
          return function (s) {
              return Control_Bind.bind((dictMonadWriter["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m(s)))(function (v) {
                  return Data_Function.apply(Control_Applicative.pure((dictMonadWriter["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]()))(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value0, v.value1), v.value0.value1));
              });
          };
      }, function (m) {
          return function (s) {
              return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind((dictMonadWriter["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(m(s))(function (v) {
                  return Data_Function.apply(Control_Applicative.pure((dictMonadWriter["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]()))(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value0, v.value1), v.value0.value1));
              }));
          };
      }, function (wd) {
          return Control_Monad_Trans.lift(monadTransStateT)(dictMonadWriter["__superclass_Control.Monad.Monad_0"]())(Control_Monad_Writer_Class.writer(dictMonadWriter)(wd));
      });
  };
  var altStateT = function (dictMonad) {
      return function (dictAlt) {
          return new Control_Alt.Alt(function () {
              return functorStateT(dictAlt["__superclass_Data.Functor.Functor_0"]());
          }, function (v) {
              return function (v1) {
                  return function (s) {
                      return Control_Alt.alt(dictAlt)(v(s))(v1(s));
                  };
              };
          });
      };
  };
  var plusStateT = function (dictMonad) {
      return function (dictPlus) {
          return new Control_Plus.Plus(function () {
              return altStateT(dictMonad)(dictPlus["__superclass_Control.Alt.Alt_0"]());
          }, function (v) {
              return Control_Plus.empty(dictPlus);
          });
      };
  };
  var alternativeStateT = function (dictMonad) {
      return function (dictAlternative) {
          return new Control_Alternative.Alternative(function () {
              return applicativeStateT(dictMonad);
          }, function () {
              return plusStateT(dictMonad)(dictAlternative["__superclass_Control.Plus.Plus_1"]());
          });
      };
  };
  var monadZeroStateT = function (dictMonadZero) {
      return new Control_MonadZero.MonadZero(function () {
          return alternativeStateT(dictMonadZero["__superclass_Control.Monad.Monad_0"]())(dictMonadZero["__superclass_Control.Alternative.Alternative_1"]());
      }, function () {
          return monadStateT(dictMonadZero["__superclass_Control.Monad.Monad_0"]());
      });
  };
  var monadPlusStateT = function (dictMonadPlus) {
      return new Control_MonadPlus.MonadPlus(function () {
          return monadZeroStateT(dictMonadPlus["__superclass_Control.MonadZero.MonadZero_0"]());
      });
  };
  exports["StateT"] = StateT;
  exports["evalStateT"] = evalStateT;
  exports["execStateT"] = execStateT;
  exports["mapStateT"] = mapStateT;
  exports["runStateT"] = runStateT;
  exports["withStateT"] = withStateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["altStateT"] = altStateT;
  exports["plusStateT"] = plusStateT;
  exports["alternativeStateT"] = alternativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadRecStateT"] = monadRecStateT;
  exports["monadZeroStateT"] = monadZeroStateT;
  exports["monadPlusStateT"] = monadPlusStateT;
  exports["monadTransStateT"] = monadTransStateT;
  exports["lazyStateT"] = lazyStateT;
  exports["monadEffState"] = monadEffState;
  exports["monadContStateT"] = monadContStateT;
  exports["monadErrorStateT"] = monadErrorStateT;
  exports["monadReaderStateT"] = monadReaderStateT;
  exports["monadStateStateT"] = monadStateStateT;
  exports["monadWriterStateT"] = monadWriterStateT;
})(PS["Control.Monad.State.Trans"] = PS["Control.Monad.State.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var withState = Control_Monad_State_Trans.withStateT;
  var runState = function (v) {
      return function ($14) {
          return Data_Identity.runIdentity(v($14));
      };
  };
  var mapState = function (f) {
      return Control_Monad_State_Trans.mapStateT(function ($15) {
          return Data_Identity.Identity(f(Data_Identity.runIdentity($15)));
      });
  };
  var execState = function (v) {
      return function (s) {
          var $6 = v(s);
          return $6.value1;
      };
  };
  var evalState = function (v) {
      return function (s) {
          var $11 = v(s);
          return $11.value0;
      };
  };
  exports["evalState"] = evalState;
  exports["execState"] = execState;
  exports["mapState"] = mapState;
  exports["runState"] = runState;
  exports["withState"] = withState;
})(PS["Control.Monad.State"] = PS["Control.Monad.State"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var WriterT = function (x) {
      return x;
  };
  var runWriterT = function (v) {
      return v;
  };
  var monadTransWriterT = function (dictMonoid) {
      return new Control_Monad_Trans.MonadTrans(function (dictMonad) {
          return function (m) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(m)(function (v) {
                  return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))(new Data_Tuple.Tuple(v, Data_Monoid.mempty(dictMonoid)));
              });
          };
      });
  };
  var mapWriterT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorWriterT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return Data_Function.apply(mapWriterT)(Data_Functor.map(dictFunctor)(function (v) {
              return new Data_Tuple.Tuple(f(v.value0), v.value1);
          }));
      });
  };
  var execWriterT = function (dictFunctor) {
      return function (v) {
          return Data_Functor.map(dictFunctor)(Data_Tuple.snd)(v);
      };
  };
  var applyWriterT = function (dictSemigroup) {
      return function (dictApply) {
          return new Control_Apply.Apply(function () {
              return functorWriterT(dictApply["__superclass_Data.Functor.Functor_0"]());
          }, function (v) {
              return function (v1) {
                  var k = function (v3) {
                      return function (v4) {
                          return new Data_Tuple.Tuple(v3.value0(v4.value0), Data_Semigroup.append(dictSemigroup)(v3.value1)(v4.value1));
                      };
                  };
                  return Control_Apply.apply(dictApply)(Data_Functor.map(dictApply["__superclass_Data.Functor.Functor_0"]())(k)(v))(v1);
              };
          });
      };
  };
  var bindWriterT = function (dictSemigroup) {
      return function (dictMonad) {
          return new Control_Bind.Bind(function () {
              return applyWriterT(dictSemigroup)((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]());
          }, function (v) {
              return function (k) {
                  return Data_Function.apply(WriterT)(Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v)(function (v1) {
                      return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())((function () {
                          var $74 = k(v1.value0);
                          return $74;
                      })())(function (v2) {
                          return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))(new Data_Tuple.Tuple(v2.value0, Data_Semigroup.append(dictSemigroup)(v1.value1)(v2.value1)));
                      });
                  }));
              };
          });
      };
  };
  var applicativeWriterT = function (dictMonoid) {
      return function (dictApplicative) {
          return new Control_Applicative.Applicative(function () {
              return applyWriterT(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(dictApplicative["__superclass_Control.Apply.Apply_0"]());
          }, function (a) {
              return Data_Function.apply(WriterT)(Data_Function.apply(Control_Applicative.pure(dictApplicative))(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
          });
      };
  };
  var monadWriterT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Monad.Monad(function () {
              return applicativeWriterT(dictMonoid)(dictMonad["__superclass_Control.Applicative.Applicative_0"]());
          }, function () {
              return bindWriterT(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(dictMonad);
          });
      };
  };
  var monadContWriterT = function (dictMonoid) {
      return function (dictMonadCont) {
          return new Control_Monad_Cont_Class.MonadCont(function () {
              return monadWriterT(dictMonoid)(dictMonadCont["__superclass_Control.Monad.Monad_0"]());
          }, function (f) {
              return Data_Function.apply(WriterT)(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                  var $80 = f(function (a) {
                      return Data_Function.apply(WriterT)(c(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
                  });
                  return $80;
              }));
          });
      };
  };
  var monadEffWriter = function (dictMonoid) {
      return function (dictMonadEff) {
          return new Control_Monad_Eff_Class.MonadEff(function () {
              return monadWriterT(dictMonoid)(dictMonadEff["__superclass_Control.Monad.Monad_0"]());
          }, function ($106) {
              return Control_Monad_Trans.lift(monadTransWriterT(dictMonoid))(dictMonadEff["__superclass_Control.Monad.Monad_0"]())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($106));
          });
      };
  };
  var monadErrorWriterT = function (dictMonoid) {
      return function (dictMonadError) {
          return new Control_Monad_Error_Class.MonadError(function () {
              return monadWriterT(dictMonoid)(dictMonadError["__superclass_Control.Monad.Monad_0"]());
          }, function (v) {
              return function (h) {
                  return Data_Function.apply(WriterT)(Control_Monad_Error_Class.catchError(dictMonadError)(v)(function (e) {
                      var $83 = h(e);
                      return $83;
                  }));
              };
          }, function (e) {
              return Control_Monad_Trans.lift(monadTransWriterT(dictMonoid))(dictMonadError["__superclass_Control.Monad.Monad_0"]())(Control_Monad_Error_Class.throwError(dictMonadError)(e));
          });
      };
  };
  var monadReaderWriterT = function (dictMonoid) {
      return function (dictMonadReader) {
          return new Control_Monad_Reader_Class.MonadReader(function () {
              return monadWriterT(dictMonoid)(dictMonadReader["__superclass_Control.Monad.Monad_0"]());
          }, Control_Monad_Trans.lift(monadTransWriterT(dictMonoid))(dictMonadReader["__superclass_Control.Monad.Monad_0"]())(Control_Monad_Reader_Class.ask(dictMonadReader)), function (f) {
              return mapWriterT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
          });
      };
  };
  var monadRecWriterT = function (dictMonoid) {
      return function (dictMonadRec) {
          return new Control_Monad_Rec_Class.MonadRec(function () {
              return monadWriterT(dictMonoid)(dictMonadRec["__superclass_Control.Monad.Monad_0"]());
          }, function (f) {
              return function (a) {
                  var f$prime = function (v) {
                      return Control_Bind.bind((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())((function () {
                          var $85 = f(v.value0);
                          return $85;
                      })())(function (v1) {
                          return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())((function () {
                              if (v1.value0 instanceof Data_Either.Left) {
                                  return new Data_Either.Left(new Data_Tuple.Tuple(v1.value0.value0, Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(v.value1)(v1.value1)));
                              };
                              if (v1.value0 instanceof Data_Either.Right) {
                                  return new Data_Either.Right(new Data_Tuple.Tuple(v1.value0.value0, Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(v.value1)(v1.value1)));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Writer.Trans line 83, column 11 - line 85, column 49: " + [ v1.value0.constructor.name ]);
                          })());
                      });
                  };
                  return Data_Function.apply(WriterT)(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(f$prime)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
              };
          });
      };
  };
  var monadStateWriterT = function (dictMonoid) {
      return function (dictMonadState) {
          return new Control_Monad_State_Class.MonadState(function () {
              return monadWriterT(dictMonoid)(dictMonadState["__superclass_Control.Monad.Monad_0"]());
          }, function (f) {
              return Control_Monad_Trans.lift(monadTransWriterT(dictMonoid))(dictMonadState["__superclass_Control.Monad.Monad_0"]())(Control_Monad_State_Class.state(dictMonadState)(f));
          });
      };
  };
  var monadWriterWriterT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Monad_Writer_Class.MonadWriter(function () {
              return monadWriterT(dictMonoid)(dictMonad);
          }, function (v) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v)(function (v1) {
                  return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v1.value0, v1.value1), v1.value1));
              });
          }, function (v) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v)(function (v1) {
                  return Data_Function.apply(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()))(new Data_Tuple.Tuple(v1.value0.value0, v1.value0.value1(v1.value1)));
              });
          }, function ($107) {
              return WriterT(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())($107));
          });
      };
  };
  var altWriterT = function (dictAlt) {
      return new Control_Alt.Alt(function () {
          return functorWriterT(dictAlt["__superclass_Data.Functor.Functor_0"]());
      }, function (v) {
          return function (v1) {
              return Control_Alt.alt(dictAlt)(v)(v1);
          };
      });
  };
  var plusWriterT = function (dictPlus) {
      return new Control_Plus.Plus(function () {
          return altWriterT(dictPlus["__superclass_Control.Alt.Alt_0"]());
      }, Control_Plus.empty(dictPlus));
  };
  var alternativeWriterT = function (dictMonoid) {
      return function (dictAlternative) {
          return new Control_Alternative.Alternative(function () {
              return applicativeWriterT(dictMonoid)(dictAlternative["__superclass_Control.Applicative.Applicative_0"]());
          }, function () {
              return plusWriterT(dictAlternative["__superclass_Control.Plus.Plus_1"]());
          });
      };
  };
  var monadZeroWriterT = function (dictMonoid) {
      return function (dictMonadZero) {
          return new Control_MonadZero.MonadZero(function () {
              return alternativeWriterT(dictMonoid)(dictMonadZero["__superclass_Control.Alternative.Alternative_1"]());
          }, function () {
              return monadWriterT(dictMonoid)(dictMonadZero["__superclass_Control.Monad.Monad_0"]());
          });
      };
  };
  var monadPlusWriterT = function (dictMonoid) {
      return function (dictMonadPlus) {
          return new Control_MonadPlus.MonadPlus(function () {
              return monadZeroWriterT(dictMonoid)(dictMonadPlus["__superclass_Control.MonadZero.MonadZero_0"]());
          });
      };
  };
  exports["WriterT"] = WriterT;
  exports["execWriterT"] = execWriterT;
  exports["mapWriterT"] = mapWriterT;
  exports["runWriterT"] = runWriterT;
  exports["functorWriterT"] = functorWriterT;
  exports["applyWriterT"] = applyWriterT;
  exports["applicativeWriterT"] = applicativeWriterT;
  exports["altWriterT"] = altWriterT;
  exports["plusWriterT"] = plusWriterT;
  exports["alternativeWriterT"] = alternativeWriterT;
  exports["bindWriterT"] = bindWriterT;
  exports["monadWriterT"] = monadWriterT;
  exports["monadRecWriterT"] = monadRecWriterT;
  exports["monadZeroWriterT"] = monadZeroWriterT;
  exports["monadPlusWriterT"] = monadPlusWriterT;
  exports["monadTransWriterT"] = monadTransWriterT;
  exports["monadEffWriter"] = monadEffWriter;
  exports["monadContWriterT"] = monadContWriterT;
  exports["monadErrorWriterT"] = monadErrorWriterT;
  exports["monadReaderWriterT"] = monadReaderWriterT;
  exports["monadStateWriterT"] = monadStateWriterT;
  exports["monadWriterWriterT"] = monadWriterWriterT;
})(PS["Control.Monad.Writer.Trans"] = PS["Control.Monad.Writer.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var runWriter = function ($0) {
      return Data_Identity.runIdentity(Control_Monad_Writer_Trans.runWriterT($0));
  };
  var mapWriter = function (f) {
      return Control_Monad_Writer_Trans.mapWriterT(function ($1) {
          return Data_Identity.Identity(f(Data_Identity.runIdentity($1)));
      });
  };
  var execWriter = function (m) {
      return Data_Tuple.snd(runWriter(m));
  };
  exports["execWriter"] = execWriter;
  exports["mapWriter"] = mapWriter;
  exports["runWriter"] = runWriter;
})(PS["Control.Monad.Writer"] = PS["Control.Monad.Writer"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array.Partial

  exports.unsafeIndexImpl = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
})(PS["Data.Array.Partial"] = PS["Data.Array.Partial"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Array.Partial"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Ring = PS["Data.Ring"];        
  var unsafeIndex = function (dictPartial) {
      return $foreign.unsafeIndexImpl;
  };
  var tail = function (dictPartial) {
      return function (xs) {
          return Data_Array.slice(1)(Data_Array.length(xs))(xs);
      };
  };
  var last = function (dictPartial) {
      return function (xs) {
          return unsafeIndex(dictPartial)(xs)(Data_Array.length(xs) - 1);
      };
  };
  var init = function (dictPartial) {
      return function (xs) {
          return Data_Array.slice(0)(Data_Array.length(xs) - 1)(xs);
      };
  };
  var head = function (dictPartial) {
      return function (xs) {
          return unsafeIndex(dictPartial)(xs)(0);
      };
  };
  exports["head"] = head;
  exports["init"] = init;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["unsafeIndex"] = unsafeIndex;
})(PS["Data.Array.Partial"] = PS["Data.Array.Partial"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array.ST

  exports.runSTArray = function (f) {
    return f;
  };

  exports.emptySTArray = function () {
    return [];
  };

  exports.peekSTArrayImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return function () {
            return i >= 0 && i < xs.length ? just(xs[i]) : nothing;
          };
        };
      };
    };
  };

  exports.pokeSTArray = function (xs) {
    return function (i) {
      return function (a) {
        return function () {
          var ret = i >= 0 && i < xs.length;
          if (ret) xs[i] = a;
          return ret;
        };
      };
    };
  };

  exports.pushAllSTArray = function (xs) {
    return function (as) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  exports.spliceSTArray = function (xs) {
    return function (i) {
      return function (howMany) {
        return function (bs) {
          return function () {
            return xs.splice.apply(xs, [i, howMany].concat(bs));
          };
        };
      };
    };
  };

  exports.copyImpl = function (xs) {
    return function () {
      return xs.slice();
    };
  };

  exports.toAssocArray = function (xs) {
    return function () {
      var n = xs.length;
      var as = new Array(n);
      for (var i = 0; i < n; i++) as[i] = { value: xs[i], index: i };
      return as;
    };
  };
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Array.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];        
  var thaw = $foreign.copyImpl;
  var pushSTArray = function (arr) {
      return function (a) {
          return $foreign.pushAllSTArray(arr)([ a ]);
      };
  };
  var peekSTArray = $foreign.peekSTArrayImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var freeze = $foreign.copyImpl;
  exports["freeze"] = freeze;
  exports["peekSTArray"] = peekSTArray;
  exports["pushSTArray"] = pushSTArray;
  exports["thaw"] = thaw;
  exports["emptySTArray"] = $foreign.emptySTArray;
  exports["pokeSTArray"] = $foreign.pokeSTArray;
  exports["pushAllSTArray"] = $foreign.pushAllSTArray;
  exports["runSTArray"] = $foreign.runSTArray;
  exports["spliceSTArray"] = $foreign.spliceSTArray;
  exports["toAssocArray"] = $foreign.toAssocArray;
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Functor = PS["Data.Functor"];        
  var Clown = function (x) {
      return x;
  };
  var runClown = function (v) {
      return v;
  };
  var functorClown = new Data_Functor.Functor(function (v) {
      return function ($12) {
          return Clown(runClown($12));
      };
  });
  var bifunctorClown = function (dictFunctor) {
      return new Data_Bifunctor.Bifunctor(function (f) {
          return function (v) {
              return function ($13) {
                  return Clown(Data_Functor.map(dictFunctor)(f)(runClown($13)));
              };
          };
      });
  };
  var biapplyClown = function (dictApply) {
      return new Control_Biapply.Biapply(function () {
          return bifunctorClown(dictApply["__superclass_Data.Functor.Functor_0"]());
      }, function (v) {
          return function (v1) {
              return Control_Apply.apply(dictApply)(v)(v1);
          };
      });
  };
  var biapplicativeClown = function (dictApplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return biapplyClown(dictApplicative["__superclass_Control.Apply.Apply_0"]());
      }, function (a) {
          return function (v) {
              return Control_Applicative.pure(dictApplicative)(a);
          };
      });
  };
  exports["Clown"] = Clown;
  exports["runClown"] = runClown;
  exports["bifunctorClown"] = bifunctorClown;
  exports["functorClown"] = functorClown;
  exports["biapplyClown"] = biapplyClown;
  exports["biapplicativeClown"] = biapplicativeClown;
})(PS["Data.Bifunctor.Clown"] = PS["Data.Bifunctor.Clown"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Functor = PS["Data.Functor"];        
  var Flip = function (x) {
      return x;
  };
  var runFlip = function (v) {
      return v;
  };
  var functorFlip = function (dictBifunctor) {
      return new Data_Functor.Functor(function (f) {
          return function ($10) {
              return Flip(Data_Bifunctor.lmap(dictBifunctor)(f)(runFlip($10)));
          };
      });
  };
  var bifunctorFlip = function (dictBifunctor) {
      return new Data_Bifunctor.Bifunctor(function (f) {
          return function (g) {
              return function ($11) {
                  return Flip(Data_Bifunctor.bimap(dictBifunctor)(g)(f)(runFlip($11)));
              };
          };
      });
  };
  var biapplyFlip = function (dictBiapply) {
      return new Control_Biapply.Biapply(function () {
          return bifunctorFlip(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]());
      }, function (v) {
          return function (v1) {
              return Control_Biapply.biapply(dictBiapply)(v)(v1);
          };
      });
  };
  var biapplicativeFlip = function (dictBiapplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return biapplyFlip(dictBiapplicative["__superclass_Control.Biapply.Biapply_0"]());
      }, function (a) {
          return function (b) {
              return Control_Biapplicative.bipure(dictBiapplicative)(b)(a);
          };
      });
  };
  exports["Flip"] = Flip;
  exports["runFlip"] = runFlip;
  exports["functorFlip"] = functorFlip;
  exports["bifunctorFlip"] = bifunctorFlip;
  exports["biapplyFlip"] = biapplyFlip;
  exports["biapplicativeFlip"] = biapplicativeFlip;
})(PS["Data.Bifunctor.Flip"] = PS["Data.Bifunctor.Flip"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Functor = PS["Data.Functor"];        
  var Join = function (x) {
      return x;
  };
  var runJoin = function (v) {
      return v;
  };
  var bifunctorJoin = function (dictBifunctor) {
      return new Data_Functor.Functor(function (f) {
          return Data_Functor.map(Data_Functor.functorFn)(Join)(function ($9) {
              return Data_Bifunctor.bimap(dictBifunctor)(f)(f)(runJoin($9));
          });
      });
  };
  var biapplyJoin = function (dictBiapply) {
      return new Control_Apply.Apply(function () {
          return bifunctorJoin(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]());
      }, function (v) {
          return function (v1) {
              return Control_Biapply.biapply(dictBiapply)(v)(v1);
          };
      });
  };
  var biapplicativeJoin = function (dictBiapplicative) {
      return new Control_Applicative.Applicative(function () {
          return biapplyJoin(dictBiapplicative["__superclass_Control.Biapply.Biapply_0"]());
      }, function (a) {
          return Control_Biapplicative.bipure(dictBiapplicative)(a)(a);
      });
  };
  exports["Join"] = Join;
  exports["runJoin"] = runJoin;
  exports["bifunctorJoin"] = bifunctorJoin;
  exports["biapplyJoin"] = biapplyJoin;
  exports["biapplicativeJoin"] = biapplicativeJoin;
})(PS["Data.Bifunctor.Join"] = PS["Data.Bifunctor.Join"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Functor = PS["Data.Functor"];        
  var Joker = function (x) {
      return x;
  };
  var runJoker = function (v) {
      return v;
  };
  var functorJoker = function (dictFunctor) {
      return new Data_Functor.Functor(function (g) {
          return function ($12) {
              return Joker(Data_Functor.map(dictFunctor)(g)(runJoker($12)));
          };
      });
  };
  var bifunctorJoker = function (dictFunctor) {
      return new Data_Bifunctor.Bifunctor(function (v) {
          return function (g) {
              return function ($13) {
                  return Joker(Data_Functor.map(dictFunctor)(g)(runJoker($13)));
              };
          };
      });
  };
  var biapplyJoker = function (dictApply) {
      return new Control_Biapply.Biapply(function () {
          return bifunctorJoker(dictApply["__superclass_Data.Functor.Functor_0"]());
      }, function (v) {
          return function (v1) {
              return Control_Apply.apply(dictApply)(v)(v1);
          };
      });
  };
  var biapplicativeJoker = function (dictApplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return biapplyJoker(dictApplicative["__superclass_Control.Apply.Apply_0"]());
      }, function (v) {
          return function (b) {
              return Control_Applicative.pure(dictApplicative)(b);
          };
      });
  };
  exports["Joker"] = Joker;
  exports["runJoker"] = runJoker;
  exports["functorJoker"] = functorJoker;
  exports["bifunctorJoker"] = bifunctorJoker;
  exports["biapplyJoker"] = biapplyJoker;
  exports["biapplicativeJoker"] = biapplicativeJoker;
})(PS["Data.Bifunctor.Joker"] = PS["Data.Bifunctor.Joker"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];        
  var Pair = (function () {
      function Pair(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Pair.create = function (value0) {
          return function (value1) {
              return new Pair(value0, value1);
          };
      };
      return Pair;
  })();
  var bifunctorProduct = function (dictBifunctor) {
      return function (dictBifunctor1) {
          return new Data_Bifunctor.Bifunctor(function (f) {
              return function (g) {
                  return function (v) {
                      return new Pair(Data_Bifunctor.bimap(dictBifunctor)(f)(g)(v.value0), Data_Bifunctor.bimap(dictBifunctor1)(f)(g)(v.value1));
                  };
              };
          });
      };
  };
  var biapplyProduct = function (dictBiapply) {
      return function (dictBiapply1) {
          return new Control_Biapply.Biapply(function () {
              return bifunctorProduct(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(dictBiapply1["__superclass_Data.Bifunctor.Bifunctor_0"]());
          }, function (v) {
              return function (v1) {
                  return new Pair(Control_Biapply.biapply(dictBiapply)(v.value0)(v1.value0), Control_Biapply.biapply(dictBiapply1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var biapplicativeProduct = function (dictBiapplicative) {
      return function (dictBiapplicative1) {
          return new Control_Biapplicative.Biapplicative(function () {
              return biapplyProduct(dictBiapplicative["__superclass_Control.Biapply.Biapply_0"]())(dictBiapplicative1["__superclass_Control.Biapply.Biapply_0"]());
          }, function (a) {
              return function (b) {
                  return new Pair(Control_Biapplicative.bipure(dictBiapplicative)(a)(b), Control_Biapplicative.bipure(dictBiapplicative1)(a)(b));
              };
          });
      };
  };
  exports["Pair"] = Pair;
  exports["bifunctorProduct"] = bifunctorProduct;
  exports["biapplyProduct"] = biapplyProduct;
  exports["biapplicativeProduct"] = biapplicativeProduct;
})(PS["Data.Bifunctor.Product"] = PS["Data.Bifunctor.Product"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Functor = PS["Data.Functor"];        
  var Wrap = function (x) {
      return x;
  };
  var unwrap = function (v) {
      return v;
  };
  var functorWrap = function (dictBifunctor) {
      return new Data_Functor.Functor(function (f) {
          return function ($10) {
              return Wrap(Data_Bifunctor.rmap(dictBifunctor)(f)(unwrap($10)));
          };
      });
  };
  var bifunctorWrap = function (dictBifunctor) {
      return new Data_Bifunctor.Bifunctor(function (f) {
          return function (g) {
              return function ($11) {
                  return Wrap(Data_Bifunctor.bimap(dictBifunctor)(f)(g)(unwrap($11)));
              };
          };
      });
  };
  var biapplyWrap = function (dictBiapply) {
      return new Control_Biapply.Biapply(function () {
          return bifunctorWrap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]());
      }, function (v) {
          return function (v1) {
              return Control_Biapply.biapply(dictBiapply)(v)(v1);
          };
      });
  };
  var biapplicativeWrap = function (dictBiapplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return biapplyWrap(dictBiapplicative["__superclass_Control.Biapply.Biapply_0"]());
      }, function (a) {
          return function (b) {
              return Control_Biapplicative.bipure(dictBiapplicative)(a)(b);
          };
      });
  };
  exports["Wrap"] = Wrap;
  exports["unwrap"] = unwrap;
  exports["bifunctorWrap"] = bifunctorWrap;
  exports["functorWrap"] = functorWrap;
  exports["biapplyWrap"] = biapplyWrap;
  exports["biapplicativeWrap"] = biapplicativeWrap;
})(PS["Data.Bifunctor.Wrap"] = PS["Data.Bifunctor.Wrap"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Char

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };

  exports.toLower = function (c) {
    return c.toLowerCase();
  };

  exports.toUpper = function (c) {
    return c.toUpperCase();
  };
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Char"];
  exports["fromCharCode"] = $foreign.fromCharCode;
  exports["toCharCode"] = $foreign.toCharCode;
  exports["toLower"] = $foreign.toLower;
  exports["toUpper"] = $foreign.toUpper;
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Void = PS["Data.Void"];        
  var Contravariant = function (cmap) {
      this.cmap = cmap;
  };
  var cmap = function (dict) {
      return dict.cmap;
  };
  var cmapFlipped = function (dictContravariant) {
      return function (x) {
          return function (f) {
              return cmap(dictContravariant)(f)(x);
          };
      };
  };
  var coerce = function (dictContravariant) {
      return function (dictFunctor) {
          return function (a) {
              return Data_Functor.map(dictFunctor)(Data_Void.absurd)(cmap(dictContravariant)(Data_Void.absurd)(a));
          };
      };
  };
  exports["Contravariant"] = Contravariant;
  exports["cmap"] = cmap;
  exports["cmapFlipped"] = cmapFlipped;
  exports["coerce"] = coerce;
})(PS["Data.Functor.Contravariant"] = PS["Data.Functor.Contravariant"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Data_Functor_Contravariant = PS["Data.Functor.Contravariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Ordering = PS["Data.Ordering"];        
  var Comparison = function (x) {
      return x;
  };
  var semigroupComparison = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return Data_Semigroup.append(Data_Semigroup.semigroupFn(Data_Semigroup.semigroupFn(Data_Ordering.semigroupOrdering)))(v)(v1);
      };
  });
  var runComparison = function (v) {
      return v;
  };
  var monoidComparison = new Data_Monoid.Monoid(function () {
      return semigroupComparison;
  }, function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  });
  var defaultComparison = function (dictOrd) {
      return Data_Ord.compare(dictOrd);
  };
  var contravariantComparison = new Data_Functor_Contravariant.Contravariant(function (f) {
      return function (v) {
          return Data_Function.on(v)(f);
      };
  });
  exports["Comparison"] = Comparison;
  exports["defaultComparison"] = defaultComparison;
  exports["runComparison"] = runComparison;
  exports["contravariantComparison"] = contravariantComparison;
  exports["semigroupComparison"] = semigroupComparison;
  exports["monoidComparison"] = monoidComparison;
})(PS["Data.Comparison"] = PS["Data.Comparison"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Contravariant = PS["Data.Functor.Contravariant"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];        
  var Const = function (x) {
      return x;
  };
  var showConst = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Const " + (Data_Show.show(dictShow)(v) + ")");
      });
  };
  var semiringConst = function (dictSemiring) {
      return new Data_Semiring.Semiring(function (v) {
          return function (v1) {
              return Data_Semiring.add(dictSemiring)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Data_Semiring.mul(dictSemiring)(v)(v1);
          };
      }, Data_Semiring.one(dictSemiring), Data_Semiring.zero(dictSemiring));
  };
  var semigroupoidConst = new Control_Semigroupoid.Semigroupoid(function (v) {
      return function (v1) {
          return v1;
      };
  });
  var semigroupConst = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_Semigroup.append(dictSemigroup)(v)(v1);
          };
      });
  };
  var ringConst = function (dictRing) {
      return new Data_Ring.Ring(function () {
          return semiringConst(dictRing["__superclass_Data.Semiring.Semiring_0"]());
      }, function (v) {
          return function (v1) {
              return Data_Ring.sub(dictRing)(v)(v1);
          };
      });
  };
  var monoidConst = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConst(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]());
      }, Data_Monoid.mempty(dictMonoid));
  };
  var heytingAlgebraConst = function (dictHeytingAlgebra) {
      return new Data_HeytingAlgebra.HeytingAlgebra(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra), function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.implies(dictHeytingAlgebra)(v)(v1);
          };
      }, function (v) {
          return Data_HeytingAlgebra.not(dictHeytingAlgebra)(v);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  var getConst = function (v) {
      return v;
  };
  var functorConst = new Data_Functor.Functor(function (v) {
      return function (v1) {
          return v1;
      };
  });
  var invariantConst = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorConst));
  var foldableConst = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (v) {
          return function (v1) {
              return Data_Monoid.mempty(dictMonoid);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              return z;
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              return z;
          };
      };
  });
  var traversableConst = new Data_Traversable.Traversable(function () {
      return foldableConst;
  }, function () {
      return functorConst;
  }, function (dictApplicative) {
      return function (v) {
          return Control_Applicative.pure(dictApplicative)(v);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              return Control_Applicative.pure(dictApplicative)(v1);
          };
      };
  });
  var eqConst = function (dictEq) {
      return new Data_Eq.Eq(function (v) {
          return function (v1) {
              return Data_Eq.eq(dictEq)(v)(v1);
          };
      });
  };
  var ordConst = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqConst(dictOrd["__superclass_Data.Eq.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Data_Ord.compare(dictOrd)(v)(v1);
          };
      });
  };
  var contravariantConst = new Data_Functor_Contravariant.Contravariant(function (v) {
      return function (v1) {
          return v1;
      };
  });
  var commutativeRingConst = function (dictCommutativeRing) {
      return new Data_CommutativeRing.CommutativeRing(function () {
          return ringConst(dictCommutativeRing["__superclass_Data.Ring.Ring_0"]());
      });
  };
  var euclideanRingConst = function (dictEuclideanRing) {
      return new Data_EuclideanRing.EuclideanRing(function () {
          return commutativeRingConst(dictEuclideanRing["__superclass_Data.CommutativeRing.CommutativeRing_0"]());
      }, function (v) {
          return Data_EuclideanRing.degree(dictEuclideanRing)(v);
      }, function (v) {
          return function (v1) {
              return Data_EuclideanRing.div(dictEuclideanRing)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Data_EuclideanRing.mod(dictEuclideanRing)(v)(v1);
          };
      });
  };
  var fieldConst = function (dictField) {
      return new Data_Field.Field(function () {
          return euclideanRingConst(dictField["__superclass_Data.EuclideanRing.EuclideanRing_0"]());
      });
  };
  var boundedConst = function (dictBounded) {
      return new Data_Bounded.Bounded(function () {
          return ordConst(dictBounded["__superclass_Data.Ord.Ord_0"]());
      }, Data_Bounded.bottom(dictBounded), Data_Bounded.top(dictBounded));
  };
  var booleanAlgebraConst = function (dictBooleanAlgebra) {
      return new Data_BooleanAlgebra.BooleanAlgebra(function () {
          return heytingAlgebraConst(dictBooleanAlgebra["__superclass_Data.HeytingAlgebra.HeytingAlgebra_0"]());
      });
  };
  var applyConst = function (dictSemigroup) {
      return new Control_Apply.Apply(function () {
          return functorConst;
      }, function (v) {
          return function (v1) {
              return Data_Semigroup.append(dictSemigroup)(v)(v1);
          };
      });
  };
  var bindConst = function (dictSemigroup) {
      return new Control_Bind.Bind(function () {
          return applyConst(dictSemigroup);
      }, function (v) {
          return function (v1) {
              return v;
          };
      });
  };
  var applicativeConst = function (dictMonoid) {
      return new Control_Applicative.Applicative(function () {
          return applyConst(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]());
      }, function (v) {
          return Data_Monoid.mempty(dictMonoid);
      });
  };
  exports["Const"] = Const;
  exports["getConst"] = getConst;
  exports["eqConst"] = eqConst;
  exports["ordConst"] = ordConst;
  exports["boundedConst"] = boundedConst;
  exports["showConst"] = showConst;
  exports["semigroupoidConst"] = semigroupoidConst;
  exports["semigroupConst"] = semigroupConst;
  exports["monoidConst"] = monoidConst;
  exports["semiringConst"] = semiringConst;
  exports["ringConst"] = ringConst;
  exports["euclideanRingConst"] = euclideanRingConst;
  exports["commutativeRingConst"] = commutativeRingConst;
  exports["fieldConst"] = fieldConst;
  exports["heytingAlgebraConst"] = heytingAlgebraConst;
  exports["booleanAlgebraConst"] = booleanAlgebraConst;
  exports["functorConst"] = functorConst;
  exports["invariantConst"] = invariantConst;
  exports["contravariantConst"] = contravariantConst;
  exports["applyConst"] = applyConst;
  exports["bindConst"] = bindConst;
  exports["applicativeConst"] = applicativeConst;
  exports["foldableConst"] = foldableConst;
  exports["traversableConst"] = traversableConst;
})(PS["Data.Const"] = PS["Data.Const"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var runExists = Unsafe_Coerce.unsafeCoerce;
  var mkExists = Unsafe_Coerce.unsafeCoerce;
  exports["mkExists"] = mkExists;
  exports["runExists"] = runExists;
})(PS["Data.Exists"] = PS["Data.Exists"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Exists = PS["Data.Exists"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Category = PS["Control.Category"];        
  var CoyonedaF = function (x) {
      return x;
  };
  var Coyoneda = function (x) {
      return x;
  };
  var lowerCoyoneda = function (dictFunctor) {
      return function (v) {
          return Data_Exists.runExists(function (v1) {
              return Data_Functor.map(dictFunctor)(v1.k)(v1.fi);
          })(v);
      };
  };
  var liftCoyoneda = function (fa) {
      return Data_Function.apply(Coyoneda)(Data_Function.apply(Data_Exists.mkExists)({
          k: Control_Category.id(Control_Category.categoryFn), 
          fi: fa
      }));
  };
  var monadTransCoyoneda = new Control_Monad_Trans.MonadTrans(function (dictMonad) {
      return liftCoyoneda;
  });
  var coyoneda = function (k) {
      return function (fi) {
          return Data_Function.apply(Coyoneda)(Data_Function.apply(Data_Exists.mkExists)({
              k: k, 
              fi: fi
          }));
      };
  };
  var functorCoyoneda = new Data_Functor.Functor(function (f) {
      return function (v) {
          return Data_Exists.runExists(function (v1) {
              return coyoneda(function ($36) {
                  return f(v1.k($36));
              })(v1.fi);
          })(v);
      };
  });
  var extendCoyoneda = function (dictExtend) {
      return new Control_Extend.Extend(function () {
          return functorCoyoneda;
      }, function (f) {
          return function (v) {
              return Data_Exists.runExists(function (v1) {
                  return Data_Function.apply(liftCoyoneda)(Control_Extend.extend(dictExtend)(function ($37) {
                      return f(coyoneda(v1.k)($37));
                  })(v1.fi));
              })(v);
          };
      });
  };
  var hoistCoyoneda = function (nat) {
      return function (v) {
          return Data_Exists.runExists(function (v1) {
              return coyoneda(v1.k)(nat(v1.fi));
          })(v);
      };
  };
  var comonadCoyoneda = function (dictComonad) {
      return new Control_Comonad.Comonad(function () {
          return extendCoyoneda(dictComonad["__superclass_Control.Extend.Extend_0"]());
      }, function (v) {
          return Data_Exists.runExists(function (v1) {
              return Data_Function.apply(v1.k)(Control_Comonad.extract(dictComonad)(v1.fi));
          })(v);
      });
  };
  var applyCoyoneda = function (dictApply) {
      return new Control_Apply.Apply(function () {
          return functorCoyoneda;
      }, function (f) {
          return function (g) {
              return Data_Function.apply(liftCoyoneda)(Control_Apply.apply(dictApply)(lowerCoyoneda(dictApply["__superclass_Data.Functor.Functor_0"]())(f))(lowerCoyoneda(dictApply["__superclass_Data.Functor.Functor_0"]())(g)));
          };
      });
  };
  var bindCoyoneda = function (dictBind) {
      return new Control_Bind.Bind(function () {
          return applyCoyoneda(dictBind["__superclass_Control.Apply.Apply_0"]());
      }, function (v) {
          return function (k) {
              return Data_Function.apply(liftCoyoneda)(Data_Exists.runExists(function (v1) {
                  return Control_Bind.bind(dictBind)(v1.fi)(function ($38) {
                      return lowerCoyoneda((dictBind["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(k(v1.k($38)));
                  });
              })(v));
          };
      });
  };
  var applicativeCoyoneda = function (dictApplicative) {
      return new Control_Applicative.Applicative(function () {
          return applyCoyoneda(dictApplicative["__superclass_Control.Apply.Apply_0"]());
      }, function ($39) {
          return liftCoyoneda(Control_Applicative.pure(dictApplicative)($39));
      });
  };
  var monadCoyoneda = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeCoyoneda(dictMonad["__superclass_Control.Applicative.Applicative_0"]());
      }, function () {
          return bindCoyoneda(dictMonad["__superclass_Control.Bind.Bind_1"]());
      });
  };
  exports["Coyoneda"] = Coyoneda;
  exports["coyoneda"] = coyoneda;
  exports["hoistCoyoneda"] = hoistCoyoneda;
  exports["liftCoyoneda"] = liftCoyoneda;
  exports["lowerCoyoneda"] = lowerCoyoneda;
  exports["functorCoyoneda"] = functorCoyoneda;
  exports["applyCoyoneda"] = applyCoyoneda;
  exports["applicativeCoyoneda"] = applicativeCoyoneda;
  exports["bindCoyoneda"] = bindCoyoneda;
  exports["monadCoyoneda"] = monadCoyoneda;
  exports["monadTransCoyoneda"] = monadTransCoyoneda;
  exports["extendCoyoneda"] = extendCoyoneda;
  exports["comonadCoyoneda"] = comonadCoyoneda;
})(PS["Data.Coyoneda"] = PS["Data.Coyoneda"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Comparison = PS["Data.Comparison"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor_Contravariant = PS["Data.Functor.Contravariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Equivalence = function (x) {
      return x;
  };
  var semigroupEquivalence = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return function (a) {
              return function (b) {
                  return v(a)(b) && v1(a)(b);
              };
          };
      };
  });
  var runEquivalence = function (v) {
      return v;
  };
  var monoidEquivalence = new Data_Monoid.Monoid(function () {
      return semigroupEquivalence;
  }, function (v) {
      return function (v1) {
          return true;
      };
  });
  var defaultEquivalence = function (dictEq) {
      return Data_Eq.eq(dictEq);
  };
  var contravariantEquivalence = new Data_Functor_Contravariant.Contravariant(function (f) {
      return function (v) {
          return Data_Function.on(v)(f);
      };
  });
  var comparisonEquivalence = function (v) {
      return function (a) {
          return function (b) {
              return Data_Eq.eq(Data_Ordering.eqOrdering)(v(a)(b))(Data_Ordering.EQ.value);
          };
      };
  };
  exports["Equivalence"] = Equivalence;
  exports["comparisonEquivalence"] = comparisonEquivalence;
  exports["defaultEquivalence"] = defaultEquivalence;
  exports["runEquivalence"] = runEquivalence;
  exports["contravariantEquivalence"] = contravariantEquivalence;
  exports["semigroupEquivalence"] = semigroupEquivalence;
  exports["monoidEquivalence"] = monoidEquivalence;
})(PS["Data.Equivalence"] = PS["Data.Equivalence"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor_Contravariant = PS["Data.Functor.Contravariant"];        
  var Op = function (x) {
      return x;
  };
  var semigroupoidOp = new Control_Semigroupoid.Semigroupoid(function (v) {
      return function (v1) {
          return function ($9) {
              return v1(v($9));
          };
      };
  });
  var runOp = function (v) {
      return v;
  };
  var contravariantOp = new Data_Functor_Contravariant.Contravariant(function (f) {
      return function (v) {
          return function ($10) {
              return v(f($10));
          };
      };
  });
  var categoryOp = new Control_Category.Category(function () {
      return semigroupoidOp;
  }, Control_Category.id(Control_Category.categoryFn));
  exports["Op"] = Op;
  exports["runOp"] = runOp;
  exports["semigroupoidOp"] = semigroupoidOp;
  exports["categoryOp"] = categoryOp;
  exports["contravariantOp"] = contravariantOp;
})(PS["Data.Op"] = PS["Data.Op"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor_Contravariant = PS["Data.Functor.Contravariant"];        
  var Predicate = function (x) {
      return x;
  };
  var runPredicate = function (v) {
      return v;
  };
  var contravariantPredicate = new Data_Functor_Contravariant.Contravariant(function (f) {
      return function (v) {
          return function ($5) {
              return v(f($5));
          };
      };
  });
  exports["Predicate"] = Predicate;
  exports["runPredicate"] = runPredicate;
  exports["contravariantPredicate"] = contravariantPredicate;
})(PS["Data.Predicate"] = PS["Data.Predicate"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Comparison = PS["Data.Comparison"];
  var Data_Equivalence = PS["Data.Equivalence"];
  var Data_Functor_Contravariant = PS["Data.Functor.Contravariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Op = PS["Data.Op"];
  var Data_Predicate = PS["Data.Predicate"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Ordering = PS["Data.Ordering"];        
  var Divide = function (__superclass_Data$dotFunctor$dotContravariant$dotContravariant_0, divide) {
      this["__superclass_Data.Functor.Contravariant.Contravariant_0"] = __superclass_Data$dotFunctor$dotContravariant$dotContravariant_0;
      this.divide = divide;
  };
  var dividePredicate = new Divide(function () {
      return Data_Predicate.contravariantPredicate;
  }, function (f) {
      return function (v) {
          return function (v1) {
              return function (a) {
                  var $13 = f(a);
                  return v($13.value0) && v1($13.value1);
              };
          };
      };
  });
  var divideOp = function (dictSemigroup) {
      return new Divide(function () {
          return Data_Op.contravariantOp;
      }, function (f) {
          return function (v) {
              return function (v1) {
                  return function (a) {
                      var $19 = f(a);
                      return Data_Semigroup.append(dictSemigroup)(v($19.value0))(v1($19.value1));
                  };
              };
          };
      });
  };
  var divideEquivalence = new Divide(function () {
      return Data_Equivalence.contravariantEquivalence;
  }, function (f) {
      return function (v) {
          return function (v1) {
              return function (a) {
                  return function (b) {
                      var $25 = f(a);
                      var $26 = f(b);
                      return v($25.value0)($26.value0) && v1($25.value1)($26.value1);
                  };
              };
          };
      };
  });
  var divideComparison = new Divide(function () {
      return Data_Comparison.contravariantComparison;
  }, function (f) {
      return function (v) {
          return function (v1) {
              return function (a) {
                  return function (b) {
                      var $34 = f(a);
                      var $35 = f(b);
                      return Data_Semigroup.append(Data_Ordering.semigroupOrdering)(v($34.value0)($35.value0))(v1($34.value1)($35.value1));
                  };
              };
          };
      };
  });
  var divide = function (dict) {
      return dict.divide;
  };
  var divided = function (dictDivide) {
      return divide(dictDivide)(Control_Category.id(Control_Category.categoryFn));
  };
  exports["Divide"] = Divide;
  exports["divide"] = divide;
  exports["divided"] = divided;
  exports["divideComparison"] = divideComparison;
  exports["divideEquivalence"] = divideEquivalence;
  exports["dividePredicate"] = dividePredicate;
  exports["divideOp"] = divideOp;
})(PS["Data.Divide"] = PS["Data.Divide"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Data_Comparison = PS["Data.Comparison"];
  var Data_Divide = PS["Data.Divide"];
  var Data_Either = PS["Data.Either"];
  var Data_Equivalence = PS["Data.Equivalence"];
  var Data_Function = PS["Data.Function"];
  var Data_Op = PS["Data.Op"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Predicate = PS["Data.Predicate"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];        
  var Decide = function (__superclass_Data$dotDivide$dotDivide_0, choose) {
      this["__superclass_Data.Divide.Divide_0"] = __superclass_Data$dotDivide$dotDivide_0;
      this.choose = choose;
  };
  var choosePredicate = new Decide(function () {
      return Data_Divide.dividePredicate;
  }, function (f) {
      return function (v) {
          return function (v1) {
              return function ($40) {
                  return Data_Either.either(v)(v1)(f($40));
              };
          };
      };
  });
  var chooseOp = function (dictSemigroup) {
      return new Decide(function () {
          return Data_Divide.divideOp(dictSemigroup);
      }, function (f) {
          return function (v) {
              return function (v1) {
                  return function ($41) {
                      return Data_Either.either(v)(v1)(f($41));
                  };
              };
          };
      });
  };
  var chooseEquivalence = new Decide(function () {
      return Data_Divide.divideEquivalence;
  }, function (f) {
      return function (v) {
          return function (v1) {
              return function (a) {
                  return function (b) {
                      var $19 = f(a);
                      if ($19 instanceof Data_Either.Left) {
                          var $20 = f(b);
                          if ($20 instanceof Data_Either.Left) {
                              return v($19.value0)($20.value0);
                          };
                          if ($20 instanceof Data_Either.Right) {
                              return false;
                          };
                          throw new Error("Failed pattern match at Data.Decide line 28, column 15 - line 30, column 23: " + [ $20.constructor.name ]);
                      };
                      if ($19 instanceof Data_Either.Right) {
                          var $24 = f(b);
                          if ($24 instanceof Data_Either.Left) {
                              return false;
                          };
                          if ($24 instanceof Data_Either.Right) {
                              return v1($19.value0)($24.value0);
                          };
                          throw new Error("Failed pattern match at Data.Decide line 31, column 16 - line 33, column 23: " + [ $24.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Decide line 27, column 66 - line 33, column 23: " + [ $19.constructor.name ]);
                  };
              };
          };
      };
  });
  var chooseComparison = new Decide(function () {
      return Data_Divide.divideComparison;
  }, function (f) {
      return function (v) {
          return function (v1) {
              return function (a) {
                  return function (b) {
                      var $31 = f(a);
                      if ($31 instanceof Data_Either.Left) {
                          var $32 = f(b);
                          if ($32 instanceof Data_Either.Left) {
                              return v($31.value0)($32.value0);
                          };
                          if ($32 instanceof Data_Either.Right) {
                              return Data_Ordering.LT.value;
                          };
                          throw new Error("Failed pattern match at Data.Decide line 19, column 15 - line 21, column 20: " + [ $32.constructor.name ]);
                      };
                      if ($31 instanceof Data_Either.Right) {
                          var $36 = f(b);
                          if ($36 instanceof Data_Either.Left) {
                              return Data_Ordering.GT.value;
                          };
                          if ($36 instanceof Data_Either.Right) {
                              return v1($31.value0)($36.value0);
                          };
                          throw new Error("Failed pattern match at Data.Decide line 22, column 16 - line 24, column 23: " + [ $36.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Decide line 18, column 63 - line 24, column 23: " + [ $31.constructor.name ]);
                  };
              };
          };
      };
  });
  var choose = function (dict) {
      return dict.choose;
  };
  var chosen = function (dictDecide) {
      return choose(dictDecide)(Control_Category.id(Control_Category.categoryFn));
  };
  exports["Decide"] = Decide;
  exports["choose"] = choose;
  exports["chosen"] = chosen;
  exports["chooseComparison"] = chooseComparison;
  exports["chooseEquivalence"] = chooseEquivalence;
  exports["choosePredicate"] = choosePredicate;
  exports["chooseOp"] = chooseOp;
})(PS["Data.Decide"] = PS["Data.Decide"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Data_Comparison = PS["Data.Comparison"];
  var Data_Divide = PS["Data.Divide"];
  var Data_Equivalence = PS["Data.Equivalence"];
  var Data_Function = PS["Data.Function"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Op = PS["Data.Op"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Predicate = PS["Data.Predicate"];        
  var Divisible = function (__superclass_Data$dotDivide$dotDivide_0, conquer) {
      this["__superclass_Data.Divide.Divide_0"] = __superclass_Data$dotDivide$dotDivide_0;
      this.conquer = conquer;
  };
  var divisiblePredicate = new Divisible(function () {
      return Data_Divide.dividePredicate;
  }, Data_Function["const"](true));
  var divisibleOp = function (dictMonoid) {
      return new Divisible(function () {
          return Data_Divide.divideOp(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]());
      }, Data_Function.apply(Data_Op.Op)(Data_Function["const"](Data_Monoid.mempty(dictMonoid))));
  };
  var divisibleEquivalence = new Divisible(function () {
      return Data_Divide.divideEquivalence;
  }, Data_Function.apply(Data_Equivalence.Equivalence)(function (v) {
      return function (v1) {
          return true;
      };
  }));
  var divisibleComparison = new Divisible(function () {
      return Data_Divide.divideComparison;
  }, Data_Function.apply(Data_Comparison.Comparison)(function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  }));
  var conquer = function (dict) {
      return dict.conquer;
  };
  exports["Divisible"] = Divisible;
  exports["conquer"] = conquer;
  exports["divisibleComparison"] = divisibleComparison;
  exports["divisibleEquivalence"] = divisibleEquivalence;
  exports["divisiblePredicate"] = divisiblePredicate;
  exports["divisibleOp"] = divisibleOp;
})(PS["Data.Divisible"] = PS["Data.Divisible"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Data_Comparison = PS["Data.Comparison"];
  var Data_Decide = PS["Data.Decide"];
  var Data_Divisible = PS["Data.Divisible"];
  var Data_Equivalence = PS["Data.Equivalence"];
  var Data_Function = PS["Data.Function"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Op = PS["Data.Op"];
  var Data_Predicate = PS["Data.Predicate"];
  var Data_Void = PS["Data.Void"];
  var Control_Category = PS["Control.Category"];        
  var Decidable = function (__superclass_Data$dotDecide$dotDecide_0, __superclass_Data$dotDivisible$dotDivisible_1, lose) {
      this["__superclass_Data.Decide.Decide_0"] = __superclass_Data$dotDecide$dotDecide_0;
      this["__superclass_Data.Divisible.Divisible_1"] = __superclass_Data$dotDivisible$dotDivisible_1;
      this.lose = lose;
  };
  var lose = function (dict) {
      return dict.lose;
  };
  var lost = function (dictDecidable) {
      return lose(dictDecidable)(Control_Category.id(Control_Category.categoryFn));
  };
  var decidablePredicate = new Decidable(function () {
      return Data_Decide.choosePredicate;
  }, function () {
      return Data_Divisible.divisiblePredicate;
  }, function (f) {
      return function (a) {
          return Data_Void.absurd(f(a));
      };
  });
  var decidableOp = function (dictMonoid) {
      return new Decidable(function () {
          return Data_Decide.chooseOp(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]());
      }, function () {
          return Data_Divisible.divisibleOp(dictMonoid);
      }, function (f) {
          return function (a) {
              return Data_Void.absurd(f(a));
          };
      });
  };
  var decidableEquivalence = new Decidable(function () {
      return Data_Decide.chooseEquivalence;
  }, function () {
      return Data_Divisible.divisibleEquivalence;
  }, function (f) {
      return function (a) {
          return Data_Void.absurd(f(a));
      };
  });
  var decidableComparison = new Decidable(function () {
      return Data_Decide.chooseComparison;
  }, function () {
      return Data_Divisible.divisibleComparison;
  }, function (f) {
      return function (a) {
          return function (v) {
              return Data_Void.absurd(f(a));
          };
      };
  });
  exports["Decidable"] = Decidable;
  exports["lose"] = lose;
  exports["lost"] = lost;
  exports["decidableComparison"] = decidableComparison;
  exports["decidableEquivalence"] = decidableEquivalence;
  exports["decidablePredicate"] = decidablePredicate;
  exports["decidableOp"] = decidableOp;
})(PS["Data.Decidable"] = PS["Data.Decidable"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Data_Either = PS["Data.Either"];        
  var either9of9 = function (v) {
      return new Data_Either.Right(v);
  };
  var either9of10 = function (v) {
      return new Data_Either.Left(new Data_Either.Right(v));
  };
  var either8of9 = function (v) {
      return new Data_Either.Left(new Data_Either.Right(v));
  };
  var either8of8 = function (v) {
      return new Data_Either.Right(v);
  };
  var either8of10 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
  };
  var either7of9 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
  };
  var either7of8 = function (v) {
      return new Data_Either.Left(new Data_Either.Right(v));
  };
  var either7of7 = function (v) {
      return new Data_Either.Right(v);
  };
  var either7of10 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))));
  };
  var either6of9 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))));
  };
  var either6of8 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
  };
  var either6of7 = function (v) {
      return new Data_Either.Left(new Data_Either.Right(v));
  };
  var either6of6 = function (v) {
      return new Data_Either.Right(v);
  };
  var either6of10 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))));
  };
  var either5of9 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))));
  };
  var either5of8 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))));
  };
  var either5of7 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
  };
  var either5of6 = function (v) {
      return new Data_Either.Left(new Data_Either.Right(v));
  };
  var either5of5 = function (v) {
      return new Data_Either.Right(v);
  };
  var either5of10 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))))));
  };
  var either4of9 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))))));
  };
  var either4of8 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))));
  };
  var either4of7 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))));
  };
  var either4of6 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
  };
  var either4of5 = function (v) {
      return new Data_Either.Left(new Data_Either.Right(v));
  };
  var either4of4 = function (v) {
      return new Data_Either.Right(v);
  };
  var either4of10 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))))));
  };
  var either3of9 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))))));
  };
  var either3of8 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))))));
  };
  var either3of7 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))));
  };
  var either3of6 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))));
  };
  var either3of5 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
  };
  var either3of4 = function (v) {
      return new Data_Either.Left(new Data_Either.Right(v));
  };
  var either3of3 = function (v) {
      return new Data_Either.Right(v);
  };
  var either3of10 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))))))));
  };
  var either2of9 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))))))));
  };
  var either2of8 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))))));
  };
  var either2of7 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))))));
  };
  var either2of6 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))));
  };
  var either2of5 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))));
  };
  var either2of4 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
  };
  var either2of3 = function (v) {
      return new Data_Either.Left(new Data_Either.Right(v));
  };
  var either2of2 = Data_Either.Right.create;
  var either2of10 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))))))));
  };
  var either2 = Data_Either.either;
  var either3 = function (a) {
      return function (b) {
          return function (z) {
              return Data_Either.either(either2(a)(b))(z);
          };
      };
  };
  var either4 = function (a) {
      return function (b) {
          return function (c) {
              return function (z) {
                  return Data_Either.either(either3(a)(b)(c))(z);
              };
          };
      };
  };
  var either5 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (z) {
                      return Data_Either.either(either4(a)(b)(c)(d))(z);
                  };
              };
          };
      };
  };
  var either6 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (z) {
                          return Data_Either.either(either5(a)(b)(c)(d)(e))(z);
                      };
                  };
              };
          };
      };
  };
  var either7 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (z) {
                              return Data_Either.either(either6(a)(b)(c)(d)(e)(f))(z);
                          };
                      };
                  };
              };
          };
      };
  };
  var either8 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (z) {
                                  return Data_Either.either(either7(a)(b)(c)(d)(e)(f)(g))(z);
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var either9 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (z) {
                                      return Data_Either.either(either8(a)(b)(c)(d)(e)(f)(g)(h))(z);
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var either1of9 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v))))))));
  };
  var either1of8 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v)))))));
  };
  var either1of7 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v))))));
  };
  var either1of6 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v)))));
  };
  var either1of5 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v))));
  };
  var either1of4 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v)));
  };
  var either1of3 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(v));
  };
  var either1of2 = Data_Either.Left.create;
  var either1of10 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v)))))))));
  };
  var either10of10 = function (v) {
      return new Data_Either.Right(v);
  };
  var either10 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return function (z) {
                                          return Data_Either.either(either9(a)(b)(c)(d)(e)(f)(g)(h)(i))(z);
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  exports["either10"] = either10;
  exports["either10of10"] = either10of10;
  exports["either1of10"] = either1of10;
  exports["either1of2"] = either1of2;
  exports["either1of3"] = either1of3;
  exports["either1of4"] = either1of4;
  exports["either1of5"] = either1of5;
  exports["either1of6"] = either1of6;
  exports["either1of7"] = either1of7;
  exports["either1of8"] = either1of8;
  exports["either1of9"] = either1of9;
  exports["either2"] = either2;
  exports["either2of10"] = either2of10;
  exports["either2of2"] = either2of2;
  exports["either2of3"] = either2of3;
  exports["either2of4"] = either2of4;
  exports["either2of5"] = either2of5;
  exports["either2of6"] = either2of6;
  exports["either2of7"] = either2of7;
  exports["either2of8"] = either2of8;
  exports["either2of9"] = either2of9;
  exports["either3"] = either3;
  exports["either3of10"] = either3of10;
  exports["either3of3"] = either3of3;
  exports["either3of4"] = either3of4;
  exports["either3of5"] = either3of5;
  exports["either3of6"] = either3of6;
  exports["either3of7"] = either3of7;
  exports["either3of8"] = either3of8;
  exports["either3of9"] = either3of9;
  exports["either4"] = either4;
  exports["either4of10"] = either4of10;
  exports["either4of4"] = either4of4;
  exports["either4of5"] = either4of5;
  exports["either4of6"] = either4of6;
  exports["either4of7"] = either4of7;
  exports["either4of8"] = either4of8;
  exports["either4of9"] = either4of9;
  exports["either5"] = either5;
  exports["either5of10"] = either5of10;
  exports["either5of5"] = either5of5;
  exports["either5of6"] = either5of6;
  exports["either5of7"] = either5of7;
  exports["either5of8"] = either5of8;
  exports["either5of9"] = either5of9;
  exports["either6"] = either6;
  exports["either6of10"] = either6of10;
  exports["either6of6"] = either6of6;
  exports["either6of7"] = either6of7;
  exports["either6of8"] = either6of8;
  exports["either6of9"] = either6of9;
  exports["either7"] = either7;
  exports["either7of10"] = either7of10;
  exports["either7of7"] = either7of7;
  exports["either7of8"] = either7of8;
  exports["either7of9"] = either7of9;
  exports["either8"] = either8;
  exports["either8of10"] = either8of10;
  exports["either8of8"] = either8of8;
  exports["either8of9"] = either8of9;
  exports["either9"] = either9;
  exports["either9of10"] = either9of10;
  exports["either9of9"] = either9of9;
})(PS["Data.Either.Nested"] = PS["Data.Either.Nested"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Data_Char = PS["Data.Char"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Function = PS["Data.Function"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];
  var Data_Unit = PS["Data.Unit"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Boolean = PS["Data.Boolean"];
  var Control_Apply = PS["Control.Apply"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Control_Bind = PS["Control.Bind"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Eq = PS["Data.Eq"];        
  var Cardinality = function (x) {
      return x;
  };
  var Enum = function (__superclass_Data$dotOrd$dotOrd_0, pred, succ) {
      this["__superclass_Data.Ord.Ord_0"] = __superclass_Data$dotOrd$dotOrd_0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (__superclass_Data$dotBounded$dotBounded_0, __superclass_Data$dotEnum$dotEnum_1, cardinality, fromEnum, toEnum) {
      this["__superclass_Data.Bounded.Bounded_0"] = __superclass_Data$dotBounded$dotBounded_0;
      this["__superclass_Data.Enum.Enum_1"] = __superclass_Data$dotEnum$dotEnum_1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var succ = function (dict) {
      return dict.succ;
  };
  var runCardinality = function (v) {
      return v;
  };
  var pred = function (dict) {
      return dict.pred;
  };
  var intStepFromTo = function (step) {
      return function (from) {
          return function (to) {
              return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(function (e) {
                  var $51 = e <= to;
                  if ($51) {
                      return Data_Function.apply(Data_Maybe.Just.create)(new Data_Tuple.Tuple(e, e + step | 0));
                  };
                  if (!$51) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.Enum line 120, column 13 - line 122, column 25: " + [ $51.constructor.name ]);
              })(from);
          };
      };
  };
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var enumUnit = new Enum(function () {
      return Data_Ord.ordUnit;
  }, Data_Function["const"](Data_Maybe.Nothing.value), Data_Function["const"](Data_Maybe.Nothing.value));
  var enumTuple = function (dictEnum) {
      return function (dictBoundedEnum) {
          return new Enum(function () {
              return Data_Tuple.ordTuple(dictEnum["__superclass_Data.Ord.Ord_0"]())((dictBoundedEnum["__superclass_Data.Enum.Enum_1"]())["__superclass_Data.Ord.Ord_0"]());
          }, function (v) {
              return Data_Maybe.maybe(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Bounded.top(dictBoundedEnum["__superclass_Data.Bounded.Bounded_0"]())))(pred(dictEnum)(v.value0)))(function ($98) {
                  return Data_Maybe.Just.create(Data_Tuple.Tuple.create(v.value0)($98));
              })(pred(dictBoundedEnum["__superclass_Data.Enum.Enum_1"]())(v.value1));
          }, function (v) {
              return Data_Maybe.maybe(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Bounded.bottom(dictBoundedEnum["__superclass_Data.Bounded.Bounded_0"]())))(succ(dictEnum)(v.value0)))(function ($99) {
                  return Data_Maybe.Just.create(Data_Tuple.Tuple.create(v.value0)($99));
              })(succ(dictBoundedEnum["__superclass_Data.Enum.Enum_1"]())(v.value1));
          });
      };
  };
  var enumOrdering = new Enum(function () {
      return Data_Ord.ordOrdering;
  }, function (v) {
      if (v instanceof Data_Ordering.LT) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_Ordering.EQ) {
          return new Data_Maybe.Just(Data_Ordering.LT.value);
      };
      if (v instanceof Data_Ordering.GT) {
          return new Data_Maybe.Just(Data_Ordering.EQ.value);
      };
      throw new Error("Failed pattern match at Data.Enum line 70, column 3 - line 70, column 20: " + [ v.constructor.name ]);
  }, function (v) {
      if (v instanceof Data_Ordering.LT) {
          return new Data_Maybe.Just(Data_Ordering.EQ.value);
      };
      if (v instanceof Data_Ordering.EQ) {
          return new Data_Maybe.Just(Data_Ordering.GT.value);
      };
      if (v instanceof Data_Ordering.GT) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Enum line 67, column 3 - line 67, column 20: " + [ v.constructor.name ]);
  });
  var enumMaybe = function (dictBoundedEnum) {
      return new Enum(function () {
          return Data_Maybe.ordMaybe((dictBoundedEnum["__superclass_Data.Enum.Enum_1"]())["__superclass_Data.Ord.Ord_0"]());
      }, function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Maybe.Nothing.value;
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Function.apply(Data_Maybe.Just.create)(pred(dictBoundedEnum["__superclass_Data.Enum.Enum_1"]())(v.value0));
          };
          throw new Error("Failed pattern match at Data.Enum line 77, column 3 - line 77, column 25: " + [ v.constructor.name ]);
      }, function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Function.apply(Data_Maybe.Just.create)(new Data_Maybe.Just(Data_Bounded.bottom(dictBoundedEnum["__superclass_Data.Bounded.Bounded_0"]())));
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Maybe.Just.create)(succ(dictBoundedEnum["__superclass_Data.Enum.Enum_1"]())(v.value0));
          };
          throw new Error("Failed pattern match at Data.Enum line 75, column 3 - line 75, column 36: " + [ v.constructor.name ]);
      });
  };
  var enumInt = new Enum(function () {
      return Data_Ord.ordInt;
  }, function (n) {
      var $64 = n > Data_Bounded.bottom(Data_Bounded.boundedInt);
      if ($64) {
          return new Data_Maybe.Just(n - 1);
      };
      if (!$64) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Enum line 52, column 12 - line 52, column 56: " + [ $64.constructor.name ]);
  }, function (n) {
      var $65 = n < Data_Bounded.top(Data_Bounded.boundedInt);
      if ($65) {
          return new Data_Maybe.Just(n + 1 | 0);
      };
      if (!$65) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Enum line 51, column 12 - line 51, column 53: " + [ $65.constructor.name ]);
  });
  var enumFromTo = function (dictEnum) {
      return function (dictUnfoldable) {
          return function (from) {
              return function (to) {
                  var go = function (mx) {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(mx)(function (v) {
                          return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(Data_Ord.lessThanOrEq(dictEnum["__superclass_Data.Ord.Ord_0"]())(v)(to)))(function () {
                              return Data_Function.apply(Control_Applicative.pure(Data_Maybe.applicativeMaybe))(new Data_Tuple.Tuple(v, succ(dictEnum)(v)));
                          });
                      });
                  };
                  return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_Maybe.Just(from));
              };
          };
      };
  };
  var enumFromThenTo = function (dictBoundedEnum) {
      return Partial_Unsafe.unsafePartial(function (dictPartial) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      var c$prime = fromEnum(dictBoundedEnum)(c);
                      var b$prime = fromEnum(dictBoundedEnum)(b);
                      var a$prime = fromEnum(dictBoundedEnum)(a);
                      return Data_Functor.map(Data_Functor.functorArray)(function ($100) {
                          return Data_Maybe.fromJust(dictPartial)(toEnum(dictBoundedEnum)($100));
                      })(intStepFromTo(b$prime - a$prime)(a$prime)(c$prime));
                  };
              };
          };
      });
  };
  var enumEither = function (dictBoundedEnum) {
      return function (dictBoundedEnum1) {
          return new Enum(function () {
              return Data_Either.ordEither((dictBoundedEnum["__superclass_Data.Enum.Enum_1"]())["__superclass_Data.Ord.Ord_0"]())((dictBoundedEnum1["__superclass_Data.Enum.Enum_1"]())["__superclass_Data.Ord.Ord_0"]());
          }, function (v) {
              if (v instanceof Data_Either.Left) {
                  return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function ($101) {
                      return Data_Maybe.Just.create(Data_Either.Left.create($101));
                  })(pred(dictBoundedEnum["__superclass_Data.Enum.Enum_1"]())(v.value0));
              };
              if (v instanceof Data_Either.Right) {
                  return Data_Maybe.maybe(Data_Function.apply(Data_Maybe.Just.create)(new Data_Either.Left(Data_Bounded.top(dictBoundedEnum["__superclass_Data.Bounded.Bounded_0"]()))))(function ($102) {
                      return Data_Maybe.Just.create(Data_Either.Right.create($102));
                  })(pred(dictBoundedEnum1["__superclass_Data.Enum.Enum_1"]())(v.value0));
              };
              throw new Error("Failed pattern match at Data.Enum line 83, column 3 - line 83, column 59: " + [ v.constructor.name ]);
          }, function (v) {
              if (v instanceof Data_Either.Left) {
                  return Data_Maybe.maybe(Data_Function.apply(Data_Maybe.Just.create)(new Data_Either.Right(Data_Bounded.bottom(dictBoundedEnum1["__superclass_Data.Bounded.Bounded_0"]()))))(function ($103) {
                      return Data_Maybe.Just.create(Data_Either.Left.create($103));
                  })(succ(dictBoundedEnum["__superclass_Data.Enum.Enum_1"]())(v.value0));
              };
              if (v instanceof Data_Either.Right) {
                  return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function ($104) {
                      return Data_Maybe.Just.create(Data_Either.Right.create($104));
                  })(succ(dictBoundedEnum1["__superclass_Data.Enum.Enum_1"]())(v.value0));
              };
              throw new Error("Failed pattern match at Data.Enum line 81, column 3 - line 81, column 71: " + [ v.constructor.name ]);
          });
      };
  };
  var enumBoolean = new Enum(function () {
      return Data_Ord.ordBoolean;
  }, function (v) {
      if (v) {
          return new Data_Maybe.Just(false);
      };
      return Data_Maybe.Nothing.value;
  }, function (v) {
      if (!v) {
          return new Data_Maybe.Just(true);
      };
      return Data_Maybe.Nothing.value;
  });
  var diag = function (a) {
      return new Data_Tuple.Tuple(a, a);
  };
  var downFrom = function (dictEnum) {
      return function (dictUnfoldable) {
          return Data_Unfoldable.unfoldr(dictUnfoldable)(function ($105) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(diag)(pred(dictEnum)($105));
          });
      };
  };
  var upFrom = function (dictEnum) {
      return function (dictUnfoldable) {
          return Data_Unfoldable.unfoldr(dictUnfoldable)(function ($106) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(diag)(succ(dictEnum)($106));
          });
      };
  };
  var defaultToEnum = function (dictBounded) {
      return function (dictEnum) {
          return function (n) {
              if (n < 0) {
                  return Data_Maybe.Nothing.value;
              };
              if (n === 0) {
                  return new Data_Maybe.Just(Data_Bounded.bottom(dictBounded));
              };
              if (Data_Boolean.otherwise) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(defaultToEnum(dictBounded)(dictEnum)(n - 1))(succ(dictEnum));
              };
              throw new Error("Failed pattern match at Data.Enum line 237, column 1 - line 240, column 47: " + [ n.constructor.name ]);
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1);
          };
      };
  };
  var defaultFromEnum = function (dictEnum) {
      return function ($107) {
          return Data_Maybe.maybe(0)(function (prd) {
              return defaultFromEnum(dictEnum)(prd) + 1 | 0;
          })(pred(dictEnum)($107));
      };
  };
  var defaultCardinality = function (dictBounded) {
      return function (dictEnum) {
          var defaultCardinality$prime = function (i) {
              return function ($108) {
                  return Data_Maybe.maybe(i)(Data_Function.apply(defaultCardinality$prime)(i + 1 | 0))(succ(dictEnum)($108));
              };
          };
          return Data_Function.apply(Cardinality)(defaultCardinality$prime(1)(Data_Bounded.bottom(dictBounded)));
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return Data_Function.apply(Data_Maybe.Just.create)(Data_Char.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)(Data_Char.toCharCode), defaultSucc(charToEnum)(Data_Char.toCharCode));
  var cardinality = function (dict) {
      return dict.cardinality;
  };
  var boundedEnumUnit = new BoundedEnum(function () {
      return Data_Bounded.boundedUnit;
  }, function () {
      return enumUnit;
  }, 1, Data_Function["const"](0), function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(Data_Unit.unit);
      };
      return Data_Maybe.Nothing.value;
  });
  var boundedEnumTuple = function (dictBoundedEnum) {
      return function (dictBoundedEnum1) {
          return new BoundedEnum(function () {
              return Data_Tuple.boundedTuple(dictBoundedEnum["__superclass_Data.Bounded.Bounded_0"]())(dictBoundedEnum1["__superclass_Data.Bounded.Bounded_0"]());
          }, function () {
              return enumTuple(dictBoundedEnum["__superclass_Data.Enum.Enum_1"]())(dictBoundedEnum1);
          }, Data_Function.apply(Cardinality)(runCardinality(cardinality(dictBoundedEnum)) * runCardinality(cardinality(dictBoundedEnum1)) | 0), (function () {
              var from = function (v) {
                  return function (v1) {
                      return (fromEnum(dictBoundedEnum)(v1.value0) * v | 0) + fromEnum(dictBoundedEnum1)(v1.value1) | 0;
                  };
              };
              return from(cardinality(dictBoundedEnum1));
          })(), (function () {
              var to = function (v) {
                  return function (n) {
                      return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create)(toEnum(dictBoundedEnum)(n / v | 0)))(toEnum(dictBoundedEnum1)(n % v));
                  };
              };
              return to(cardinality(dictBoundedEnum1));
          })());
      };
  };
  var boundedEnumOrdering = new BoundedEnum(function () {
      return Data_Bounded.boundedOrdering;
  }, function () {
      return enumOrdering;
  }, 3, function (v) {
      if (v instanceof Data_Ordering.LT) {
          return 0;
      };
      if (v instanceof Data_Ordering.EQ) {
          return 1;
      };
      if (v instanceof Data_Ordering.GT) {
          return 2;
      };
      throw new Error("Failed pattern match at Data.Enum line 186, column 3 - line 187, column 3: " + [ v.constructor.name ]);
  }, function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(Data_Ordering.LT.value);
      };
      if (v === 1) {
          return new Data_Maybe.Just(Data_Ordering.EQ.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(Data_Ordering.GT.value);
      };
      return Data_Maybe.Nothing.value;
  });
  var boundedEnumMaybe = function (dictBoundedEnum) {
      return new BoundedEnum(function () {
          return Data_Maybe.boundedMaybe(dictBoundedEnum["__superclass_Data.Bounded.Bounded_0"]());
      }, function () {
          return enumMaybe(dictBoundedEnum);
      }, Data_Function.apply(Cardinality)(runCardinality(cardinality(dictBoundedEnum)) + 1 | 0), function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return 0;
          };
          if (v instanceof Data_Maybe.Just) {
              return fromEnum(dictBoundedEnum)(v.value0) + 1 | 0;
          };
          throw new Error("Failed pattern match at Data.Enum line 198, column 3 - line 199, column 3: " + [ v.constructor.name ]);
      }, (function () {
          var to = function (v) {
              return function (v1) {
                  if (v1 === 0) {
                      return Data_Maybe.Nothing.value;
                  };
                  if (v1 <= v) {
                      return Data_Function.apply(Data_Maybe.Just.create)(toEnum(dictBoundedEnum)(v1 - 1));
                  };
                  return Data_Maybe.Nothing.value;
              };
          };
          return to(cardinality(dictBoundedEnum));
      })());
  };
  var boundedEnumInt = new BoundedEnum(function () {
      return Data_Bounded.boundedInt;
  }, function () {
      return enumInt;
  }, Data_Bounded.top(Data_Bounded.boundedInt) - Data_Bounded.bottom(Data_Bounded.boundedInt), Control_Category.id(Control_Category.categoryFn), Data_Maybe.Just.create);
  var boundedEnumEither = function (dictBoundedEnum) {
      return function (dictBoundedEnum1) {
          return new BoundedEnum(function () {
              return Data_Either.boundedEither(dictBoundedEnum["__superclass_Data.Bounded.Bounded_0"]())(dictBoundedEnum1["__superclass_Data.Bounded.Bounded_0"]());
          }, function () {
              return enumEither(dictBoundedEnum)(dictBoundedEnum1);
          }, Data_Function.apply(Cardinality)(runCardinality(cardinality(dictBoundedEnum)) + runCardinality(cardinality(dictBoundedEnum1)) | 0), function (v) {
              if (v instanceof Data_Either.Left) {
                  return fromEnum(dictBoundedEnum)(v.value0);
              };
              if (v instanceof Data_Either.Right) {
                  return fromEnum(dictBoundedEnum1)(v.value0) + runCardinality(cardinality(dictBoundedEnum)) | 0;
              };
              throw new Error("Failed pattern match at Data.Enum line 213, column 3 - line 213, column 33: " + [ v.constructor.name ]);
          }, (function () {
              var to = function (v) {
                  return function (v1) {
                      return function (n) {
                          if (n >= 0 && n < v) {
                              return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Either.Left.create)(toEnum(dictBoundedEnum)(n));
                          };
                          if (n >= v && n < v1) {
                              return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Either.Right.create)(toEnum(dictBoundedEnum1)(n - v));
                          };
                          if (Data_Boolean.otherwise) {
                              return Data_Maybe.Nothing.value;
                          };
                          throw new Error("Failed pattern match at Data.Enum line 209, column 5 - line 212, column 28: " + [ v.constructor.name, v1.constructor.name, n.constructor.name ]);
                      };
                  };
              };
              return to(cardinality(dictBoundedEnum))(cardinality(boundedEnumEither(dictBoundedEnum)(dictBoundedEnum1)));
          })());
      };
  };
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, Data_Char.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - Data_Char.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)), Data_Char.toCharCode, charToEnum);
  var boundedEnumBoolean = new BoundedEnum(function () {
      return Data_Bounded.boundedBoolean;
  }, function () {
      return enumBoolean;
  }, 2, function (v) {
      if (!v) {
          return 0;
      };
      if (v) {
          return 1;
      };
      throw new Error("Failed pattern match at Data.Enum line 161, column 3 - line 162, column 3: " + [ v.constructor.name ]);
  }, function (v) {
      if (v === 0) {
          return new Data_Maybe.Just(false);
      };
      if (v === 1) {
          return new Data_Maybe.Just(true);
      };
      return Data_Maybe.Nothing.value;
  });
  exports["Cardinality"] = Cardinality;
  exports["BoundedEnum"] = BoundedEnum;
  exports["Enum"] = Enum;
  exports["cardinality"] = cardinality;
  exports["defaultCardinality"] = defaultCardinality;
  exports["defaultFromEnum"] = defaultFromEnum;
  exports["defaultPred"] = defaultPred;
  exports["defaultSucc"] = defaultSucc;
  exports["defaultToEnum"] = defaultToEnum;
  exports["downFrom"] = downFrom;
  exports["enumFromThenTo"] = enumFromThenTo;
  exports["enumFromTo"] = enumFromTo;
  exports["fromEnum"] = fromEnum;
  exports["pred"] = pred;
  exports["runCardinality"] = runCardinality;
  exports["succ"] = succ;
  exports["toEnum"] = toEnum;
  exports["upFrom"] = upFrom;
  exports["enumBoolean"] = enumBoolean;
  exports["enumInt"] = enumInt;
  exports["enumChar"] = enumChar;
  exports["enumUnit"] = enumUnit;
  exports["enumOrdering"] = enumOrdering;
  exports["enumMaybe"] = enumMaybe;
  exports["enumEither"] = enumEither;
  exports["enumTuple"] = enumTuple;
  exports["boundedEnumBoolean"] = boundedEnumBoolean;
  exports["boundedEnumInt"] = boundedEnumInt;
  exports["boundedEnumChar"] = boundedEnumChar;
  exports["boundedEnumUnit"] = boundedEnumUnit;
  exports["boundedEnumOrdering"] = boundedEnumOrdering;
  exports["boundedEnumMaybe"] = boundedEnumMaybe;
  exports["boundedEnumEither"] = boundedEnumEither;
  exports["boundedEnumTuple"] = boundedEnumTuple;
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foreign

  // jshint maxparams: 3
  exports.parseJSONImpl = function (left, right, str) {
    try {
      return right(JSON.parse(str));
    } catch (e) {
      return left(e.toString());
    }
  };

  // jshint maxparams: 1
  exports.toForeign = function (value) {
    return value;
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };

  exports.isNull = function (value) {
    return value === null;
  };

  exports.isUndefined = function (value) {
    return value === undefined;
  };

  exports.isArray = Array.isArray || function (value) {
    return Object.prototype.toString.call(value) === "[object Array]";
  };
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
    "use strict";

  // module Data.Function.Uncurried

  exports.mkFn0 = function (fn) {
    return function () {
      return fn({});
    };
  };

  exports.mkFn1 = function (fn) {
    return function (a) {
      return fn(a);
    };
  };

  exports.mkFn2 = function (fn) {
    /* jshint maxparams: 2 */
    return function (a, b) {
      return fn(a)(b);
    };
  };

  exports.mkFn3 = function (fn) {
    /* jshint maxparams: 3 */
    return function (a, b, c) {
      return fn(a)(b)(c);
    };
  };

  exports.mkFn4 = function (fn) {
    /* jshint maxparams: 4 */
    return function (a, b, c, d) {
      return fn(a)(b)(c)(d);
    };
  };

  exports.mkFn5 = function (fn) {
    /* jshint maxparams: 5 */
    return function (a, b, c, d, e) {
      return fn(a)(b)(c)(d)(e);
    };
  };

  exports.mkFn6 = function (fn) {
    /* jshint maxparams: 6 */
    return function (a, b, c, d, e, f) {
      return fn(a)(b)(c)(d)(e)(f);
    };
  };

  exports.mkFn7 = function (fn) {
    /* jshint maxparams: 7 */
    return function (a, b, c, d, e, f, g) {
      return fn(a)(b)(c)(d)(e)(f)(g);
    };
  };

  exports.mkFn8 = function (fn) {
    /* jshint maxparams: 8 */
    return function (a, b, c, d, e, f, g, h) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h);
    };
  };

  exports.mkFn9 = function (fn) {
    /* jshint maxparams: 9 */
    return function (a, b, c, d, e, f, g, h, i) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);
    };
  };

  exports.mkFn10 = function (fn) {
    /* jshint maxparams: 10 */
    return function (a, b, c, d, e, f, g, h, i, j) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);
    };
  };

  exports.runFn0 = function (fn) {
    return fn();
  };

  exports.runFn1 = function (fn) {
    return function (a) {
      return fn(a);
    };
  };

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };

  exports.runFn3 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return fn(a, b, c);
        };
      };
    };
  };

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };

  exports.runFn5 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return fn(a, b, c, d, e);
            };
          };
        };
      };
    };
  };

  exports.runFn6 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return fn(a, b, c, d, e, f);
              };
            };
          };
        };
      };
    };
  };

  exports.runFn7 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return fn(a, b, c, d, e, f, g);
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runFn8 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return function (h) {
                    return fn(a, b, c, d, e, f, g, h);
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runFn9 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return function (h) {
                    return function (i) {
                      return fn(a, b, c, d, e, f, g, h, i);
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runFn10 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return function (h) {
                    return function (i) {
                      return function (j) {
                        return fn(a, b, c, d, e, f, g, h, i, j);
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];
  exports["mkFn0"] = $foreign.mkFn0;
  exports["mkFn1"] = $foreign.mkFn1;
  exports["mkFn10"] = $foreign.mkFn10;
  exports["mkFn2"] = $foreign.mkFn2;
  exports["mkFn3"] = $foreign.mkFn3;
  exports["mkFn4"] = $foreign.mkFn4;
  exports["mkFn5"] = $foreign.mkFn5;
  exports["mkFn6"] = $foreign.mkFn6;
  exports["mkFn7"] = $foreign.mkFn7;
  exports["mkFn8"] = $foreign.mkFn8;
  exports["mkFn9"] = $foreign.mkFn9;
  exports["runFn0"] = $foreign.runFn0;
  exports["runFn1"] = $foreign.runFn1;
  exports["runFn10"] = $foreign.runFn10;
  exports["runFn2"] = $foreign.runFn2;
  exports["runFn3"] = $foreign.runFn3;
  exports["runFn4"] = $foreign.runFn4;
  exports["runFn5"] = $foreign.runFn5;
  exports["runFn6"] = $foreign.runFn6;
  exports["runFn7"] = $foreign.runFn7;
  exports["runFn8"] = $foreign.runFn8;
  exports["runFn9"] = $foreign.runFn9;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Foreign"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var JSONError = (function () {
      function JSONError(value0) {
          this.value0 = value0;
      };
      JSONError.create = function (value0) {
          return new JSONError(value0);
      };
      return JSONError;
  })();
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Control_Applicative.pure(Data_Either.applicativeEither)($foreign.unsafeFromForeign(value));
          };
          return new Data_Either.Left(new TypeMismatch(tag, $foreign.tagOf(value)));
      };
  };
  var showForeignError = new Data_Show.Show(function (v) {
      if (v instanceof TypeMismatch) {
          return "Type mismatch: expected " + (v.value0 + (", found " + v.value1));
      };
      if (v instanceof ErrorAtIndex) {
          return "Error at array index " + (Data_Show.show(Data_Show.showInt)(v.value0) + (": " + Data_Show.show(showForeignError)(v.value1)));
      };
      if (v instanceof ErrorAtProperty) {
          return "Error at property " + (Data_Show.show(Data_Show.showString)(v.value0) + (": " + Data_Show.show(showForeignError)(v.value1)));
      };
      if (v instanceof JSONError) {
          return "JSON error: " + v.value0;
      };
      throw new Error("Failed pattern match at Data.Foreign line 53, column 3 - line 53, column 87: " + [ v.constructor.name ]);
  });
  var readString = unsafeReadTagged("String");
  var readNumber = unsafeReadTagged("Number");
  var readInt = function (value) {
      var error = Data_Function.apply(Data_Either.Left.create)(new TypeMismatch("Int", $foreign.tagOf(value)));
      var fromNumber = function ($30) {
          return Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither))(Data_Int.fromNumber($30));
      };
      return Data_Either.either(Data_Function["const"](error))(fromNumber)(readNumber(value));
  };
  var readChar = function (value) {
      var error = Data_Function.apply(Data_Either.Left.create)(new TypeMismatch("Char", $foreign.tagOf(value)));
      var fromString = function ($31) {
          return Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither))(Data_String.toChar($31));
      };
      return Data_Either.either(Data_Function["const"](error))(fromString)(readString(value));
  };
  var readBoolean = unsafeReadTagged("Boolean");
  var readArray = function (value) {
      if ($foreign.isArray(value)) {
          return Data_Function.apply(Control_Applicative.pure(Data_Either.applicativeEither))($foreign.unsafeFromForeign(value));
      };
      return new Data_Either.Left(new TypeMismatch("array", $foreign.tagOf(value)));
  };
  var parseJSON = function (json) {
      return Data_Function_Uncurried.runFn3($foreign.parseJSONImpl)(function ($32) {
          return Data_Either.Left.create(JSONError.create($32));
      })(Data_Either.Right.create)(json);
  };
  var eqForeignError = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof TypeMismatch && v1 instanceof TypeMismatch) {
              return v.value0 === v1.value0 && v.value1 === v1.value1;
          };
          if (v instanceof ErrorAtIndex && v1 instanceof ErrorAtIndex) {
              return v.value0 === v1.value0 && Data_Eq.eq(eqForeignError)(v.value1)(v1.value1);
          };
          if (v instanceof ErrorAtProperty && v1 instanceof ErrorAtProperty) {
              return v.value0 === v1.value0 && Data_Eq.eq(eqForeignError)(v.value1)(v1.value1);
          };
          if (v instanceof JSONError && v1 instanceof JSONError) {
              return v.value0 === v1.value0;
          };
          return false;
      };
  });
  exports["TypeMismatch"] = TypeMismatch;
  exports["ErrorAtIndex"] = ErrorAtIndex;
  exports["ErrorAtProperty"] = ErrorAtProperty;
  exports["JSONError"] = JSONError;
  exports["parseJSON"] = parseJSON;
  exports["readArray"] = readArray;
  exports["readBoolean"] = readBoolean;
  exports["readChar"] = readChar;
  exports["readInt"] = readInt;
  exports["readNumber"] = readNumber;
  exports["readString"] = readString;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["showForeignError"] = showForeignError;
  exports["eqForeignError"] = eqForeignError;
  exports["isArray"] = $foreign.isArray;
  exports["isNull"] = $foreign.isNull;
  exports["isUndefined"] = $foreign.isUndefined;
  exports["tagOf"] = $foreign.tagOf;
  exports["toForeign"] = $foreign.toForeign;
  exports["typeOf"] = $foreign.typeOf;
  exports["unsafeFromForeign"] = $foreign.unsafeFromForeign;
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foreign.Index

  // jshint maxparams: 4
  exports.unsafeReadPropImpl = function (f, s, key, value) {
    return value == null ? f : s(value[key]);
  };

  // jshint maxparams: 2
  exports.unsafeHasOwnProperty = function (prop, value) {
    return Object.prototype.hasOwnProperty.call(value, prop);
  };

  exports.unsafeHasProperty = function (prop, value) {
    return prop in value;
  };
})(PS["Data.Foreign.Index"] = PS["Data.Foreign.Index"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Foreign.Index"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Eq = PS["Data.Eq"];        
  var Index = function (errorAt, hasOwnProperty, hasProperty, ix) {
      this.errorAt = errorAt;
      this.hasOwnProperty = hasOwnProperty;
      this.hasProperty = hasProperty;
      this.ix = ix;
  };
  var unsafeReadProp = function (k) {
      return function (value) {
          return Data_Function_Uncurried.runFn4($foreign.unsafeReadPropImpl)(new Data_Either.Left(new Data_Foreign.TypeMismatch("object", Data_Foreign.typeOf(value))))(Control_Applicative.pure(Data_Either.applicativeEither))(k)(value);
      };
  };
  var prop = unsafeReadProp;
  var ix = function (dict) {
      return dict.ix;
  };
  var index = unsafeReadProp;
  var hasPropertyImpl = function (v) {
      return function (value) {
          if (Data_Foreign.isNull(value)) {
              return false;
          };
          if (Data_Foreign.isUndefined(value)) {
              return false;
          };
          if (Data_Foreign.typeOf(value) === "object" || Data_Foreign.typeOf(value) === "function") {
              return Data_Function_Uncurried.runFn2($foreign.unsafeHasProperty)(v)(value);
          };
          return false;
      };
  };
  var hasProperty = function (dict) {
      return dict.hasProperty;
  };
  var hasOwnPropertyImpl = function (v) {
      return function (value) {
          if (Data_Foreign.isNull(value)) {
              return false;
          };
          if (Data_Foreign.isUndefined(value)) {
              return false;
          };
          if (Data_Foreign.typeOf(value) === "object" || Data_Foreign.typeOf(value) === "function") {
              return Data_Function_Uncurried.runFn2($foreign.unsafeHasOwnProperty)(v)(value);
          };
          return false;
      };
  };
  var indexInt = new Index(Data_Foreign.ErrorAtIndex.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(index));
  var indexString = new Index(Data_Foreign.ErrorAtProperty.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(prop));
  var hasOwnProperty = function (dict) {
      return dict.hasOwnProperty;
  };
  var errorAt = function (dict) {
      return dict.errorAt;
  };
  exports["Index"] = Index;
  exports["errorAt"] = errorAt;
  exports["hasOwnProperty"] = hasOwnProperty;
  exports["hasProperty"] = hasProperty;
  exports["index"] = index;
  exports["ix"] = ix;
  exports["prop"] = prop;
  exports["indexString"] = indexString;
  exports["indexInt"] = indexInt;
})(PS["Data.Foreign.Index"] = PS["Data.Foreign.Index"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Foreign = PS["Data.Foreign"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Null = function (x) {
      return x;
  };
  var unNull = function (v) {
      return v;
  };
  var readNull = function (v) {
      return function (value) {
          if (Data_Foreign.isNull(value)) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
          };
          return Data_Functor.map(Data_Either.functorEither)(function ($5) {
              return Null(Data_Maybe.Just.create($5));
          })(v(value));
      };
  };
  exports["Null"] = Null;
  exports["readNull"] = readNull;
  exports["unNull"] = unNull;
})(PS["Data.Foreign.Null"] = PS["Data.Foreign.Null"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var NullOrUndefined = function (x) {
      return x;
  };
  var unNullOrUndefined = function (v) {
      return v;
  };
  var readNullOrUndefined = function (v) {
      return function (value) {
          if (Data_Foreign.isNull(value) || Data_Foreign.isUndefined(value)) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
          };
          return Data_Functor.map(Data_Either.functorEither)(function ($5) {
              return NullOrUndefined(Data_Maybe.Just.create($5));
          })(v(value));
      };
  };
  exports["NullOrUndefined"] = NullOrUndefined;
  exports["readNullOrUndefined"] = readNullOrUndefined;
  exports["unNullOrUndefined"] = unNullOrUndefined;
})(PS["Data.Foreign.NullOrUndefined"] = PS["Data.Foreign.NullOrUndefined"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Foreign = PS["Data.Foreign"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Undefined = function (x) {
      return x;
  };
  var unUndefined = function (v) {
      return v;
  };
  var readUndefined = function (v) {
      return function (value) {
          if (Data_Foreign.isUndefined(value)) {
              return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
          };
          return Data_Functor.map(Data_Either.functorEither)(function ($5) {
              return Undefined(Data_Maybe.Just.create($5));
          })(v(value));
      };
  };
  exports["Undefined"] = Undefined;
  exports["readUndefined"] = readUndefined;
  exports["unUndefined"] = unUndefined;
})(PS["Data.Foreign.Undefined"] = PS["Data.Foreign.Undefined"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Index = PS["Data.Foreign.Index"];
  var Data_Foreign_Null = PS["Data.Foreign.Null"];
  var Data_Foreign_NullOrUndefined = PS["Data.Foreign.NullOrUndefined"];
  var Data_Foreign_Undefined = PS["Data.Foreign.Undefined"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var IsForeign = function (read) {
      this.read = read;
  };
  var stringIsForeign = new IsForeign(Data_Foreign.readString);
  var read = function (dict) {
      return dict.read;
  };
  var readJSON = function (dictIsForeign) {
      return function (json) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Foreign.parseJSON(json))(read(dictIsForeign));
      };
  };
  var readWith = function (dictIsForeign) {
      return function (f) {
          return function (value) {
              return Data_Either.either(function ($8) {
                  return Data_Either.Left.create(f($8));
              })(Data_Either.Right.create)(read(dictIsForeign)(value));
          };
      };
  };
  var readProp = function (dictIsForeign) {
      return function (dictIndex) {
          return function (prop) {
              return function (value) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Foreign_Index.ix(dictIndex)(value)(prop))(readWith(dictIsForeign)(Data_Foreign_Index.errorAt(dictIndex)(prop)));
              };
          };
      };
  };
  var undefinedIsForeign = function (dictIsForeign) {
      return new IsForeign(Data_Foreign_Undefined.readUndefined(read(dictIsForeign)));
  };
  var numberIsForeign = new IsForeign(Data_Foreign.readNumber);
  var nullOrUndefinedIsForeign = function (dictIsForeign) {
      return new IsForeign(Data_Foreign_NullOrUndefined.readNullOrUndefined(read(dictIsForeign)));
  };
  var nullIsForeign = function (dictIsForeign) {
      return new IsForeign(Data_Foreign_Null.readNull(read(dictIsForeign)));
  };
  var intIsForeign = new IsForeign(Data_Foreign.readInt);
  var foreignIsForeign = new IsForeign(Control_Applicative.pure(Data_Either.applicativeEither));
  var charIsForeign = new IsForeign(Data_Foreign.readChar);
  var booleanIsForeign = new IsForeign(Data_Foreign.readBoolean);
  var arrayIsForeign = function (dictIsForeign) {
      return new IsForeign(function (value) {
          var readElement = function (i) {
              return function (value1) {
                  return readWith(dictIsForeign)(Data_Foreign.ErrorAtIndex.create(i))(value1);
              };
          };
          var readElements = function (arr) {
              return Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Data_Array.zipWith(readElement)(Data_Array.range(0)(Data_Array.length(arr)))(arr));
          };
          return Control_Bind.bind(Data_Either.bindEither)(Data_Foreign.readArray(value))(readElements);
      });
  };
  exports["IsForeign"] = IsForeign;
  exports["read"] = read;
  exports["readJSON"] = readJSON;
  exports["readProp"] = readProp;
  exports["readWith"] = readWith;
  exports["foreignIsForeign"] = foreignIsForeign;
  exports["stringIsForeign"] = stringIsForeign;
  exports["charIsForeign"] = charIsForeign;
  exports["booleanIsForeign"] = booleanIsForeign;
  exports["numberIsForeign"] = numberIsForeign;
  exports["intIsForeign"] = intIsForeign;
  exports["arrayIsForeign"] = arrayIsForeign;
  exports["nullIsForeign"] = nullIsForeign;
  exports["undefinedIsForeign"] = undefinedIsForeign;
  exports["nullOrUndefinedIsForeign"] = nullOrUndefinedIsForeign;
})(PS["Data.Foreign.Class"] = PS["Data.Foreign.Class"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foreign.Keys

  exports.unsafeKeys = Object.keys || function (value) {
    var keys = [];
    for (var prop in value) {
      if (Object.prototype.hasOwnProperty.call(value, prop)) {
        keys.push(prop);
      }
    }
    return keys;
  };
})(PS["Data.Foreign.Keys"] = PS["Data.Foreign.Keys"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.Foreign.Keys"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Eq = PS["Data.Eq"];        
  var keys = function (value) {
      if (Data_Foreign.isNull(value)) {
          return Data_Function.apply(Data_Either.Left.create)(new Data_Foreign.TypeMismatch("object", "null"));
      };
      if (Data_Foreign.isUndefined(value)) {
          return Data_Function.apply(Data_Either.Left.create)(new Data_Foreign.TypeMismatch("object", "undefined"));
      };
      if (Data_Foreign.typeOf(value) === "object") {
          return Data_Function.apply(Data_Either.Right.create)($foreign.unsafeKeys(value));
      };
      return Data_Function.apply(Data_Either.Left.create)(new Data_Foreign.TypeMismatch("object", Data_Foreign.typeOf(value)));
  };
  exports["keys"] = keys;
})(PS["Data.Foreign.Keys"] = PS["Data.Foreign.Keys"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Data_Functor_Coproduct = PS["Data.Functor.Coproduct"];        
  var coproduct9of9 = function (v) {
      return Data_Functor_Coproduct.right(v);
  };
  var coproduct9of10 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v));
  };
  var coproduct8of9 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v));
  };
  var coproduct8of8 = function (v) {
      return Data_Functor_Coproduct.right(v);
  };
  var coproduct8of10 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v)));
  };
  var coproduct7of9 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v)));
  };
  var coproduct7of8 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v));
  };
  var coproduct7of7 = function (v) {
      return Data_Functor_Coproduct.right(v);
  };
  var coproduct7of10 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v))));
  };
  var coproduct6of9 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v))));
  };
  var coproduct6of8 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v)));
  };
  var coproduct6of7 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v));
  };
  var coproduct6of6 = function (v) {
      return Data_Functor_Coproduct.right(v);
  };
  var coproduct6of10 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v)))));
  };
  var coproduct5of9 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v)))));
  };
  var coproduct5of8 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v))));
  };
  var coproduct5of7 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v)));
  };
  var coproduct5of6 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v));
  };
  var coproduct5of5 = function (v) {
      return Data_Functor_Coproduct.right(v);
  };
  var coproduct5of10 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v))))));
  };
  var coproduct4of9 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v))))));
  };
  var coproduct4of8 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v)))));
  };
  var coproduct4of7 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v))));
  };
  var coproduct4of6 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v)));
  };
  var coproduct4of5 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v));
  };
  var coproduct4of4 = function (v) {
      return Data_Functor_Coproduct.right(v);
  };
  var coproduct4of10 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v)))))));
  };
  var coproduct3of9 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v)))))));
  };
  var coproduct3of8 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v))))));
  };
  var coproduct3of7 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v)))));
  };
  var coproduct3of6 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v))));
  };
  var coproduct3of5 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v)));
  };
  var coproduct3of4 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v));
  };
  var coproduct3of3 = function (v) {
      return Data_Functor_Coproduct.right(v);
  };
  var coproduct3of10 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v))))))));
  };
  var coproduct2of9 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v))))))));
  };
  var coproduct2of8 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v)))))));
  };
  var coproduct2of7 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v))))));
  };
  var coproduct2of6 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v)))));
  };
  var coproduct2of5 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v))));
  };
  var coproduct2of4 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v)));
  };
  var coproduct2of3 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v));
  };
  var coproduct2of2 = Data_Functor_Coproduct.right;
  var coproduct2of10 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.right(v)))))))));
  };
  var coproduct2 = Data_Functor_Coproduct.coproduct;
  var coproduct3 = function (a) {
      return function (b) {
          return function (z) {
              return Data_Functor_Coproduct.coproduct(coproduct2(a)(b))(z);
          };
      };
  };
  var coproduct4 = function (a) {
      return function (b) {
          return function (c) {
              return function (z) {
                  return Data_Functor_Coproduct.coproduct(coproduct3(a)(b)(c))(z);
              };
          };
      };
  };
  var coproduct5 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (z) {
                      return Data_Functor_Coproduct.coproduct(coproduct4(a)(b)(c)(d))(z);
                  };
              };
          };
      };
  };
  var coproduct6 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (z) {
                          return Data_Functor_Coproduct.coproduct(coproduct5(a)(b)(c)(d)(e))(z);
                      };
                  };
              };
          };
      };
  };
  var coproduct7 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (z) {
                              return Data_Functor_Coproduct.coproduct(coproduct6(a)(b)(c)(d)(e)(f))(z);
                          };
                      };
                  };
              };
          };
      };
  };
  var coproduct8 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (z) {
                                  return Data_Functor_Coproduct.coproduct(coproduct7(a)(b)(c)(d)(e)(f)(g))(z);
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var coproduct9 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (z) {
                                      return Data_Functor_Coproduct.coproduct(coproduct8(a)(b)(c)(d)(e)(f)(g)(h))(z);
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var coproduct1of9 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(v))))))));
  };
  var coproduct1of8 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(v)))))));
  };
  var coproduct1of7 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(v))))));
  };
  var coproduct1of6 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(v)))));
  };
  var coproduct1of5 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(v))));
  };
  var coproduct1of4 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(v)));
  };
  var coproduct1of3 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(v));
  };
  var coproduct1of2 = Data_Functor_Coproduct.left;
  var coproduct1of10 = function (v) {
      return Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(Data_Functor_Coproduct.left(v)))))))));
  };
  var coproduct10of10 = function (v) {
      return Data_Functor_Coproduct.right(v);
  };
  var coproduct10 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return function (z) {
                                          return Data_Functor_Coproduct.coproduct(coproduct9(a)(b)(c)(d)(e)(f)(g)(h)(i))(z);
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  exports["coproduct10"] = coproduct10;
  exports["coproduct10of10"] = coproduct10of10;
  exports["coproduct1of10"] = coproduct1of10;
  exports["coproduct1of2"] = coproduct1of2;
  exports["coproduct1of3"] = coproduct1of3;
  exports["coproduct1of4"] = coproduct1of4;
  exports["coproduct1of5"] = coproduct1of5;
  exports["coproduct1of6"] = coproduct1of6;
  exports["coproduct1of7"] = coproduct1of7;
  exports["coproduct1of8"] = coproduct1of8;
  exports["coproduct1of9"] = coproduct1of9;
  exports["coproduct2"] = coproduct2;
  exports["coproduct2of10"] = coproduct2of10;
  exports["coproduct2of2"] = coproduct2of2;
  exports["coproduct2of3"] = coproduct2of3;
  exports["coproduct2of4"] = coproduct2of4;
  exports["coproduct2of5"] = coproduct2of5;
  exports["coproduct2of6"] = coproduct2of6;
  exports["coproduct2of7"] = coproduct2of7;
  exports["coproduct2of8"] = coproduct2of8;
  exports["coproduct2of9"] = coproduct2of9;
  exports["coproduct3"] = coproduct3;
  exports["coproduct3of10"] = coproduct3of10;
  exports["coproduct3of3"] = coproduct3of3;
  exports["coproduct3of4"] = coproduct3of4;
  exports["coproduct3of5"] = coproduct3of5;
  exports["coproduct3of6"] = coproduct3of6;
  exports["coproduct3of7"] = coproduct3of7;
  exports["coproduct3of8"] = coproduct3of8;
  exports["coproduct3of9"] = coproduct3of9;
  exports["coproduct4"] = coproduct4;
  exports["coproduct4of10"] = coproduct4of10;
  exports["coproduct4of4"] = coproduct4of4;
  exports["coproduct4of5"] = coproduct4of5;
  exports["coproduct4of6"] = coproduct4of6;
  exports["coproduct4of7"] = coproduct4of7;
  exports["coproduct4of8"] = coproduct4of8;
  exports["coproduct4of9"] = coproduct4of9;
  exports["coproduct5"] = coproduct5;
  exports["coproduct5of10"] = coproduct5of10;
  exports["coproduct5of5"] = coproduct5of5;
  exports["coproduct5of6"] = coproduct5of6;
  exports["coproduct5of7"] = coproduct5of7;
  exports["coproduct5of8"] = coproduct5of8;
  exports["coproduct5of9"] = coproduct5of9;
  exports["coproduct6"] = coproduct6;
  exports["coproduct6of10"] = coproduct6of10;
  exports["coproduct6of6"] = coproduct6of6;
  exports["coproduct6of7"] = coproduct6of7;
  exports["coproduct6of8"] = coproduct6of8;
  exports["coproduct6of9"] = coproduct6of9;
  exports["coproduct7"] = coproduct7;
  exports["coproduct7of10"] = coproduct7of10;
  exports["coproduct7of7"] = coproduct7of7;
  exports["coproduct7of8"] = coproduct7of8;
  exports["coproduct7of9"] = coproduct7of9;
  exports["coproduct8"] = coproduct8;
  exports["coproduct8of10"] = coproduct8of10;
  exports["coproduct8of8"] = coproduct8of8;
  exports["coproduct8of9"] = coproduct8of9;
  exports["coproduct9"] = coproduct9;
  exports["coproduct9of10"] = coproduct9of10;
  exports["coproduct9of9"] = coproduct9of9;
})(PS["Data.Functor.Coproduct.Nested"] = PS["Data.Functor.Coproduct.Nested"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Function = PS["Data.Function"];        
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List.semigroupList)(Control_Applicative.pure(Data_List.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List.semigroupList)(Control_Applicative.pure(Data_List.applicativeList)(v.value2))(Data_Semigroup.append(Data_List.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List.semigroupList)(Control_Applicative.pure(Data_List.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map line 323, column 1 - line 323, column 18: " + [ v.constructor.name ]);
  };
  var toList = function (v) {
      if (v instanceof Leaf) {
          return Data_List.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List.semigroupList)(toList(v.value0))(Data_Semigroup.append(Data_List.semigroupList)(Control_Applicative.pure(Data_List.applicativeList)(new Data_Tuple.Tuple(v.value1, v.value2)))(toList(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List.semigroupList)(toList(v.value0))(Data_Semigroup.append(Data_List.semigroupList)(Control_Applicative.pure(Data_List.applicativeList)(new Data_Tuple.Tuple(v.value1, v.value2)))(Data_Semigroup.append(Data_List.semigroupList)(toList(v.value3))(Data_Semigroup.append(Data_List.semigroupList)(Control_Applicative.pure(Data_List.applicativeList)(new Data_Tuple.Tuple(v.value4, v.value5)))(toList(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map line 302, column 1 - line 302, column 18: " + [ v.constructor.name ]);
  };
  var size = function ($494) {
      return Data_List.length(values($494));
  };
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var showTree = function (dictShow) {
      return function (dictShow1) {
          return function (v) {
              if (v instanceof Leaf) {
                  return "Leaf";
              };
              if (v instanceof Two) {
                  return "Two (" + (showTree(dictShow)(dictShow1)(v.value0) + (") (" + (Data_Show.show(dictShow)(v.value1) + (") (" + (Data_Show.show(dictShow1)(v.value2) + (") (" + (showTree(dictShow)(dictShow1)(v.value3) + ")")))))));
              };
              if (v instanceof Three) {
                  return "Three (" + (showTree(dictShow)(dictShow1)(v.value0) + (") (" + (Data_Show.show(dictShow)(v.value1) + (") (" + (Data_Show.show(dictShow1)(v.value2) + (") (" + (showTree(dictShow)(dictShow1)(v.value3) + (") (" + (Data_Show.show(dictShow)(v.value4) + (") (" + (Data_Show.show(dictShow1)(v.value5) + (") (" + (showTree(dictShow)(dictShow1)(v.value6) + ")")))))))))))));
              };
              throw new Error("Failed pattern match at Data.Map line 79, column 1 - line 80, column 1: " + [ v.constructor.name ]);
          };
      };
  };
  var showMap = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (m) {
              return "(fromList " + (Data_Show.show(Data_List.showList(Data_Tuple.showTuple(dictShow)(dictShow1)))(toList(m)) + ")");
          });
      };
  };
  var lookup = function (dictOrd) {
      return Partial_Unsafe.unsafePartial(function (dictPartial) {
          return function (k) {
              return function (tree) {
                  if (tree instanceof Leaf) {
                      return Data_Maybe.Nothing.value;
                  };
                  var comp = Data_Ord.compare(dictOrd);
                  var __unused = function (dictPartial1) {
                      return function ($dollar23) {
                          return $dollar23;
                      };
                  };
                  return __unused(dictPartial)((function () {
                      if (tree instanceof Two) {
                          var $103 = comp(k)(tree.value1);
                          if ($103 instanceof Data_Ordering.EQ) {
                              return new Data_Maybe.Just(tree.value2);
                          };
                          if ($103 instanceof Data_Ordering.LT) {
                              return lookup(dictOrd)(k)(tree.value0);
                          };
                          return lookup(dictOrd)(k)(tree.value3);
                      };
                      if (tree instanceof Three) {
                          var $108 = comp(k)(tree.value1);
                          if ($108 instanceof Data_Ordering.EQ) {
                              return new Data_Maybe.Just(tree.value2);
                          };
                          var $110 = comp(k)(tree.value4);
                          if ($110 instanceof Data_Ordering.EQ) {
                              return new Data_Maybe.Just(tree.value5);
                          };
                          if ($108 instanceof Data_Ordering.LT) {
                              return lookup(dictOrd)(k)(tree.value0);
                          };
                          if ($110 instanceof Data_Ordering.GT) {
                              return lookup(dictOrd)(k)(tree.value6);
                          };
                          return lookup(dictOrd)(k)(tree.value3);
                      };
                      throw new Error("Failed pattern match at Data.Map line 126, column 10 - line 140, column 39: " + [ tree.constructor.name ]);
                  })());
              };
          };
      });
  };
  var member = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
          };
      };
  };
  var keys = function (v) {
      if (v instanceof Leaf) {
          return Data_List.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List.semigroupList)(Control_Applicative.pure(Data_List.applicativeList)(v.value1))(keys(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List.semigroupList)(Control_Applicative.pure(Data_List.applicativeList)(v.value1))(Data_Semigroup.append(Data_List.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List.semigroupList)(Control_Applicative.pure(Data_List.applicativeList)(v.value4))(keys(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map line 317, column 1 - line 317, column 16: " + [ v.constructor.name ]);
  };
  var isEmpty = function (v) {
      if (v instanceof Leaf) {
          return true;
      };
      return false;
  };
  var functorMap = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Leaf) {
              return Leaf.value;
          };
          if (v1 instanceof Two) {
              return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
          };
          if (v1 instanceof Three) {
              return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
          };
          throw new Error("Failed pattern match at Data.Map line 64, column 3 - line 64, column 20: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var fromZipper = function (__copy_dictOrd) {
      return function (__copy_v) {
          return function (__copy_tree) {
              var dictOrd = __copy_dictOrd;
              var v = __copy_v;
              var tree = __copy_tree;
              tco: while (true) {
                  if (v instanceof Data_List.Nil) {
                      return tree;
                  };
                  if (v instanceof Data_List.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          var __tco_dictOrd = dictOrd;
                          var __tco_v = v.value1;
                          var __tco_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          dictOrd = __tco_dictOrd;
                          v = __tco_v;
                          tree = __tco_tree;
                          continue tco;
                      };
                      if (v.value0 instanceof TwoRight) {
                          var __tco_dictOrd = dictOrd;
                          var __tco_v = v.value1;
                          var __tco_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          dictOrd = __tco_dictOrd;
                          v = __tco_v;
                          tree = __tco_tree;
                          continue tco;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          var __tco_dictOrd = dictOrd;
                          var __tco_v = v.value1;
                          var __tco_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          dictOrd = __tco_dictOrd;
                          v = __tco_v;
                          tree = __tco_tree;
                          continue tco;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          var __tco_dictOrd = dictOrd;
                          var __tco_v = v.value1;
                          var __tco_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          dictOrd = __tco_dictOrd;
                          v = __tco_v;
                          tree = __tco_tree;
                          continue tco;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          var __tco_dictOrd = dictOrd;
                          var __tco_v = v.value1;
                          var __tco_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          dictOrd = __tco_dictOrd;
                          v = __tco_v;
                          tree = __tco_tree;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.Map line 156, column 3 - line 161, column 88: " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map line 154, column 1 - line 154, column 27: " + [ v.constructor.name, tree.constructor.name ]);
              };
          };
      };
  };
  var insert = function (dictOrd) {
      var up = function (__copy_v) {
          return function (__copy_v1) {
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v instanceof Data_List.Nil) {
                      return new Two(v1.value0, v1.value1, v1.value2, v1.value3);
                  };
                  if (v instanceof Data_List.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          return fromZipper(dictOrd)(v.value1)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, v.value0.value0, v.value0.value1, v.value0.value2));
                      };
                      if (v.value0 instanceof TwoRight) {
                          return fromZipper(dictOrd)(v.value1)(new Three(v.value0.value0, v.value0.value1, v.value0.value2, v1.value0, v1.value1, v1.value2, v1.value3));
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          var __tco_v = v.value1;
                          var __tco_v1 = new KickUp(new Two(v1.value0, v1.value1, v1.value2, v1.value3), v.value0.value0, v.value0.value1, new Two(v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5));
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          var __tco_v = v.value1;
                          var __tco_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2, v1.value0), v1.value1, v1.value2, new Two(v1.value3, v.value0.value3, v.value0.value4, v.value0.value5));
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          var __tco_v = v.value1;
                          var __tco_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3), v.value0.value4, v.value0.value5, new Two(v1.value0, v1.value1, v1.value2, v1.value3));
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.Map line 192, column 5 - line 197, column 104: " + [ v.value0.constructor.name, v1.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map line 190, column 3 - line 190, column 54: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
      var comp = Data_Ord.compare(dictOrd);
      var down = function (__copy_ctx) {
          return function (__copy_k) {
              return function (__copy_v) {
                  return function (__copy_v1) {
                      var ctx = __copy_ctx;
                      var k = __copy_k;
                      var v = __copy_v;
                      var v1 = __copy_v1;
                      tco: while (true) {
                          if (v1 instanceof Leaf) {
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var $231 = comp(k)(v1.value1);
                              if ($231 instanceof Data_Ordering.EQ) {
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if ($231 instanceof Data_Ordering.LT) {
                                  var __tco_ctx = new Data_List.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  var __tco_k = k;
                                  var __tco_v = v;
                                  var __tco_v1 = v1.value0;
                                  ctx = __tco_ctx;
                                  k = __tco_k;
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              var __tco_ctx = new Data_List.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              var __tco_k = k;
                              var __tco_v = v;
                              var __tco_v1 = v1.value3;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          if (v1 instanceof Three) {
                              var $236 = comp(k)(v1.value1);
                              if ($236 instanceof Data_Ordering.EQ) {
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var $238 = comp(k)(v1.value4);
                              if ($238 instanceof Data_Ordering.EQ) {
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if ($236 instanceof Data_Ordering.LT) {
                                  var __tco_ctx = new Data_List.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  var __tco_k = k;
                                  var __tco_v = v;
                                  var __tco_v1 = v1.value0;
                                  ctx = __tco_ctx;
                                  k = __tco_k;
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              if ($236 instanceof Data_Ordering.GT && $238 instanceof Data_Ordering.LT) {
                                  var __tco_ctx = new Data_List.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  var __tco_k = k;
                                  var __tco_v = v;
                                  var __tco_v1 = v1.value3;
                                  ctx = __tco_ctx;
                                  k = __tco_k;
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              var __tco_ctx = new Data_List.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              var __tco_k = k;
                              var __tco_v = v;
                              var __tco_v1 = v1.value6;
                              ctx = __tco_ctx;
                              k = __tco_k;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.Map line 173, column 3 - line 173, column 52: " + [ ctx.constructor.name, k.constructor.name, v.constructor.name, v1.constructor.name ]);
                      };
                  };
              };
          };
      };
      return down(Data_List.Nil.value);
  };
  var pop = function (dictOrd) {
      var up = Partial_Unsafe.unsafePartial(function (dictPartial) {
          return function (ctxs) {
              return function (tree) {
                  if (ctxs instanceof Data_List.Nil) {
                      return tree;
                  };
                  if (ctxs instanceof Data_List.Cons) {
                      var __unused = function (dictPartial1) {
                          return function ($dollar31) {
                              return $dollar31;
                          };
                      };
                      return __unused(dictPartial)((function () {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              return up(ctxs.value1)(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              return up(ctxs.value1)(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map line 242, column 9 - line 259, column 136: " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Map line 239, column 5 - line 259, column 136: " + [ ctxs.constructor.name ]);
              };
          };
      });
      var removeMaxNode = Partial_Unsafe.unsafePartial(function (dictPartial) {
          return function (ctx) {
              return function (m) {
                  var __unused = function (dictPartial1) {
                      return function ($dollar33) {
                          return $dollar33;
                      };
                  };
                  return __unused(dictPartial)((function () {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          return removeMaxNode(new Data_List.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx))(m.value3);
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          return up(new Data_List.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          return removeMaxNode(new Data_List.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx))(m.value6);
                      };
                      throw new Error("Failed pattern match at Data.Map line 271, column 5 - line 275, column 107: " + [ m.constructor.name ]);
                  })());
              };
          };
      });
      var maxNode = Partial_Unsafe.unsafePartial(function (dictPartial) {
          return function (m) {
              var __unused = function (dictPartial1) {
                  return function ($dollar35) {
                      return $dollar35;
                  };
              };
              return __unused(dictPartial)((function () {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      return {
                          key: m.value1, 
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      return maxNode(m.value3);
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      return {
                          key: m.value4, 
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      return maxNode(m.value6);
                  };
                  throw new Error("Failed pattern match at Data.Map line 262, column 33 - line 266, column 45: " + [ m.constructor.name ]);
              })());
          };
      });
      var comp = Data_Ord.compare(dictOrd);
      var down = Partial_Unsafe.unsafePartial(function (dictPartial) {
          return function (ctx) {
              return function (k) {
                  return function (m) {
                      if (m instanceof Leaf) {
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var $449 = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && $449 instanceof Data_Ordering.EQ) {
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if ($449 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if ($449 instanceof Data_Ordering.LT) {
                              return down(new Data_List.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx))(k)(m.value0);
                          };
                          return down(new Data_List.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx))(k)(m.value3);
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var $458 = comp(k)(m.value1);
                          var $459 = comp(k)(m.value4);
                          if (leaves && $458 instanceof Data_Ordering.EQ) {
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && $459 instanceof Data_Ordering.EQ) {
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if ($458 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if ($459 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if ($458 instanceof Data_Ordering.LT) {
                              return down(new Data_List.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx))(k)(m.value0);
                          };
                          if ($458 instanceof Data_Ordering.GT && $459 instanceof Data_Ordering.LT) {
                              return down(new Data_List.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx))(k)(m.value3);
                          };
                          return down(new Data_List.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx))(k)(m.value6);
                      };
                      throw new Error("Failed pattern match at Data.Map line 212, column 36 - line 235, column 82: " + [ m.constructor.name ]);
                  };
              };
          };
      });
      return down(Data_List.Nil.value);
  };
  var foldableMap = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (m) {
              return Data_Foldable.foldMap(Data_List.foldableList)(dictMonoid)(f)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldl(Data_List.foldableList)(f)(z)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List.foldableList)(f)(z)(values(m));
          };
      };
  });
  var eqMap = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (m1) {
              return function (m2) {
                  return Data_Eq.eq(Data_List.eqList(Data_Tuple.eqTuple(dictEq)(dictEq1)))(toList(m1))(toList(m2));
              };
          });
      };
  };
  var ordMap = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqMap(dictOrd["__superclass_Data.Eq.Eq_0"]())(dictOrd1["__superclass_Data.Eq.Eq_0"]());
          }, function (m1) {
              return function (m2) {
                  return Data_Ord.compare(Data_List.ordList(Data_Tuple.ordTuple(dictOrd)(dictOrd1)))(toList(m1))(toList(m2));
              };
          });
      };
  };
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  var fromList = function (dictOrd) {
      return fromFoldable(dictOrd)(Data_List.foldableList);
  };
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  var checkValid = function (tree) {
      var allHeights = function (v) {
          if (v instanceof Leaf) {
              return Control_Applicative.pure(Data_List.applicativeList)(0);
          };
          if (v instanceof Two) {
              return Data_Functor.map(Data_List.functorList)(function (n) {
                  return n + 1 | 0;
              })(Data_Semigroup.append(Data_List.semigroupList)(allHeights(v.value0))(allHeights(v.value3)));
          };
          if (v instanceof Three) {
              return Data_Functor.map(Data_List.functorList)(function (n) {
                  return n + 1 | 0;
              })(Data_Semigroup.append(Data_List.semigroupList)(allHeights(v.value0))(Data_Semigroup.append(Data_List.semigroupList)(allHeights(v.value3))(allHeights(v.value6))));
          };
          throw new Error("Failed pattern match at Data.Map line 114, column 3 - line 114, column 30: " + [ v.constructor.name ]);
      };
      return Data_List.length(Data_List.nub(Data_Eq.eqInt)(allHeights(tree))) === 1;
  };
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var $482 = f(lookup(dictOrd)(k)(m));
                  if ($482 instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if ($482 instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)($482.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map line 280, column 15 - line 282, column 25: " + [ $482.constructor.name ]);
              };
          };
      };
  };
  var fromFoldableWith = function (dictOrd) {
      return function (dictFoldable) {
          return function (f) {
              var combine = function (v) {
                  return function (v1) {
                      if (v1 instanceof Data_Maybe.Just) {
                          return Data_Function.apply(Data_Maybe.Just.create)(f(v)(v1.value0));
                      };
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return new Data_Maybe.Just(v);
                      };
                      throw new Error("Failed pattern match at Data.Map line 297, column 3 - line 297, column 38: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Data_Foldable.foldl(dictFoldable)(function (m) {
                  return function (v) {
                      return alter(dictOrd)(combine(v.value1))(v.value0)(m);
                  };
              })(empty);
          };
      };
  };
  var fromListWith = function (dictOrd) {
      return fromFoldableWith(dictOrd)(Data_List.foldableList);
  };
  var unionWith = function (dictOrd) {
      return function (f) {
          return function (m1) {
              return function (m2) {
                  var go = function (m) {
                      return function (v) {
                          return alter(dictOrd)(function ($495) {
                              return Data_Maybe.Just.create(Data_Maybe.maybe(v.value1)(f(v.value1))($495));
                          })(v.value0)(m);
                      };
                  };
                  return Data_Foldable.foldl(Data_List.foldableList)(go)(m2)(toList(m1));
              };
          };
      };
  };
  var union = function (dictOrd) {
      return unionWith(dictOrd)(Data_Function["const"]);
  };
  var semigroupMap = function (dictOrd) {
      return new Data_Semigroup.Semigroup(union(dictOrd));
  };
  var monoidMap = function (dictOrd) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMap(dictOrd);
      }, empty);
  };
  var traversableMap = function (dictOrd) {
      return new Data_Traversable.Traversable(function () {
          return foldableMap;
      }, function () {
          return functorMap;
      }, function (dictApplicative) {
          return Data_Traversable.traverse(traversableMap(dictOrd))(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
      }, function (dictApplicative) {
          return function (f) {
              return function (ms) {
                  return Data_Foldable.foldr(Data_List.foldableList)(function (x) {
                      return function (acc) {
                          return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(union(dictOrd))(x))(acc);
                      };
                  })(Control_Applicative.pure(dictApplicative)(empty))(Data_Functor.map(Data_List.functorList)(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Tuple.uncurry(singleton)))(Data_Functor.map(Data_List.functorList)(Data_Traversable.traverse(Data_Tuple.traversableTuple)(dictApplicative)(f))(toList(ms))));
              };
          };
      });
  };
  var unions = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(union(dictOrd))(empty);
      };
  };
  var update = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  return alter(dictOrd)(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
              };
          };
      };
  };
  exports["alter"] = alter;
  exports["checkValid"] = checkValid;
  exports["delete"] = $$delete;
  exports["empty"] = empty;
  exports["fromFoldable"] = fromFoldable;
  exports["fromFoldableWith"] = fromFoldableWith;
  exports["fromList"] = fromList;
  exports["fromListWith"] = fromListWith;
  exports["insert"] = insert;
  exports["isEmpty"] = isEmpty;
  exports["keys"] = keys;
  exports["lookup"] = lookup;
  exports["member"] = member;
  exports["pop"] = pop;
  exports["showTree"] = showTree;
  exports["singleton"] = singleton;
  exports["size"] = size;
  exports["toList"] = toList;
  exports["union"] = union;
  exports["unionWith"] = unionWith;
  exports["unions"] = unions;
  exports["update"] = update;
  exports["values"] = values;
  exports["eqMap"] = eqMap;
  exports["showMap"] = showMap;
  exports["ordMap"] = ordMap;
  exports["semigroupMap"] = semigroupMap;
  exports["monoidMap"] = monoidMap;
  exports["functorMap"] = functorMap;
  exports["foldableMap"] = foldableMap;
  exports["traversableMap"] = traversableMap;
})(PS["Data.Map"] = PS["Data.Map"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var AcyclicSCC = (function () {
      function AcyclicSCC(value0) {
          this.value0 = value0;
      };
      AcyclicSCC.create = function (value0) {
          return new AcyclicSCC(value0);
      };
      return AcyclicSCC;
  })();
  var CyclicSCC = (function () {
      function CyclicSCC(value0) {
          this.value0 = value0;
      };
      CyclicSCC.create = function (value0) {
          return new CyclicSCC(value0);
      };
      return CyclicSCC;
  })();
  var Edge = (function () {
      function Edge(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Edge.create = function (value0) {
          return function (value1) {
              return new Edge(value0, value1);
          };
      };
      return Edge;
  })();
  var Graph = (function () {
      function Graph(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Graph.create = function (value0) {
          return function (value1) {
              return new Graph(value0, value1);
          };
      };
      return Graph;
  })();
  var vertices = function (v) {
      if (v instanceof AcyclicSCC) {
          return Data_List.singleton(v.value0);
      };
      if (v instanceof CyclicSCC) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Data.Graph line 51, column 1 - line 51, column 38: " + [ v.constructor.name ]);
  };
  var showSCC = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof AcyclicSCC) {
              return "(AcyclicSCC " + (Data_Show.show(dictShow)(v.value0) + ")");
          };
          if (v instanceof CyclicSCC) {
              return "(CyclicSCC " + (Data_Show.show(Data_List.showList(dictShow))(v.value0) + ")");
          };
          throw new Error("Failed pattern match at Data.Graph line 41, column 3 - line 42, column 3: " + [ v.constructor.name ]);
      });
  };
  var popUntil = function (__copy_dictEq) {
      return function (__copy_v) {
          return function (__copy_v1) {
              return function (__copy_v2) {
                  return function (__copy_popped) {
                      var dictEq = __copy_dictEq;
                      var v = __copy_v;
                      var v1 = __copy_v1;
                      var v2 = __copy_v2;
                      var popped = __copy_popped;
                      tco: while (true) {
                          if (v2 instanceof Data_List.Nil) {
                              return {
                                  path: Data_List.Nil.value, 
                                  component: popped
                              };
                          };
                          if (v2 instanceof Data_List.Cons && Data_Eq.eq(dictEq)(v(v1))(v(v2.value0))) {
                              return {
                                  path: v2.value1, 
                                  component: new Data_List.Cons(v2.value0, popped)
                              };
                          };
                          if (v2 instanceof Data_List.Cons) {
                              var __tco_dictEq = dictEq;
                              var __tco_v = v;
                              var __tco_v1 = v1;
                              var __tco_v2 = v2.value1;
                              var __tco_popped = new Data_List.Cons(v2.value0, popped);
                              dictEq = __tco_dictEq;
                              v = __tco_v;
                              v1 = __tco_v1;
                              v2 = __tco_v2;
                              popped = __tco_popped;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.Graph line 133, column 1 - line 133, column 75: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name, popped.constructor.name ]);
                      };
                  };
              };
          };
      };
  };
  var maybeMin = function (i) {
      return function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return new Data_Maybe.Just(i);
          };
          if (v instanceof Data_Maybe.Just) {
              var min = function (x) {
                  return function (y) {
                      var $52 = x < y;
                      if ($52) {
                          return x;
                      };
                      if (!$52) {
                          return y;
                      };
                      throw new Error("Failed pattern match at Data.Graph line 141, column 13 - line 141, column 35: " + [ $52.constructor.name ]);
                  };
              };
              return Data_Function.apply(Data_Maybe.Just.create)(min(i)(v.value0));
          };
          throw new Error("Failed pattern match at Data.Graph line 138, column 1 - line 138, column 28: " + [ i.constructor.name, v.constructor.name ]);
      };
  };
  var scc$prime = function (dictOrd) {
      return function (makeKey) {
          return function (makeVert) {
              return function (v) {
                  return Control_Monad_Eff.runPure(function __do() {
                      var v1 = {
                          value: 0
                      };
                      var v2 = {
                          value: Data_List.Nil.value
                      };
                      var v3 = {
                          value: Data_Map.empty
                      };
                      var v4 = {
                          value: Data_Map.empty
                      };
                      var v5 = {
                          value: Data_List.Nil.value
                      };
                      var lowlinkOfKey = function (k) {
                          return function __do() {
                              return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(Data_Map.lookup(dictOrd)(k)(v4.value))();
                          };
                      };
                      var lowlinkOf = function (v6) {
                          return lowlinkOfKey(makeKey(v6));
                      };
                      var isCycle = function (k) {
                          return Data_Foldable.any(Data_List.foldableList)(Data_BooleanAlgebra.booleanAlgebraBoolean)(function (v6) {
                              return Data_Eq.eq(dictOrd["__superclass_Data.Eq.Eq_0"]())(v6.value0)(k) && Data_Eq.eq(dictOrd["__superclass_Data.Eq.Eq_0"]())(v6.value1)(k);
                          })(v.value1);
                      };
                      var makeComponent = function (v6) {
                          if (v6 instanceof Data_List.Cons && (v6.value1 instanceof Data_List.Nil && !isCycle(makeKey(v6.value0)))) {
                              return new AcyclicSCC(v6.value0);
                          };
                          return new CyclicSCC(v6);
                      };
                      var indexOfKey = function (k) {
                          return function __do() {
                              return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(Data_Map.lookup(dictOrd)(k)(v3.value))();
                          };
                      };
                      var strongConnect = function (k) {
                          var v6 = makeVert(k);
                          return function __do() {
                              Data_Function.apply(Control_Monad_ST.modifySTRef(v3))(Data_Map.insert(dictOrd)(k)(v1.value))();
                              Data_Function.apply(Control_Monad_ST.modifySTRef(v4))(Data_Map.insert(dictOrd)(k)(v1.value))();
                              Data_Function.apply(Control_Monad_ST.writeSTRef(v1))(v1.value + 1 | 0)();
                              Data_Function.apply(Control_Monad_ST.modifySTRef(v2))(Data_List.Cons.create(v6))();
                              Data_Function.apply(Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_List.traversableList)(v.value1))(function (v8) {
                                  return Data_Function.apply(Control_Applicative.when(Control_Monad_Eff.applicativeEff)(Data_Eq.eq(dictOrd["__superclass_Data.Eq.Eq_0"]())(k)(v8.value0)))(function __do() {
                                      var v9 = indexOfKey(v8.value1)();
                                      if (v9 instanceof Data_Maybe.Nothing) {
                                          var w = makeVert(v8.value1);
                                          strongConnect(v8.value1)();
                                          var v11 = lowlinkOfKey(v8.value1)();
                                          return Data_Function.apply(Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v11))(function (lowlink) {
                                              return Data_Function.apply(Control_Monad_ST.modifySTRef(v4))(Data_Map.alter(dictOrd)(maybeMin(lowlink))(k));
                                          })();
                                      };
                                      return Data_Function.apply(Control_Applicative.when(Control_Monad_Eff.applicativeEff)(Data_Foldable.elem(Data_List.foldableList)(dictOrd["__superclass_Data.Eq.Eq_0"]())(v8.value1)(Data_Functor.map(Data_List.functorList)(makeKey)(v2.value))))(function __do() {
                                          var v11 = indexOfKey(v8.value1)();
                                          return Data_Function.apply(Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v11))(function (index$prime) {
                                              return Data_Function.apply(Control_Monad_ST.modifySTRef(v4))(Data_Map.alter(dictOrd)(maybeMin(index$prime))(k));
                                          })();
                                      })();
                                  });
                              })();
                              var v8 = indexOfKey(k)();
                              var v9 = lowlinkOfKey(k)();
                              return Data_Function.apply(Control_Applicative.when(Control_Monad_Eff.applicativeEff)(Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqInt))(v8)(v9)))(function __do() {
                                  var v10 = v2.value;
                                  var newPath = popUntil(dictOrd["__superclass_Data.Eq.Eq_0"]())(makeKey)(v6)(v10)(Data_List.Nil.value);
                                  Data_Function.apply(Control_Monad_ST.modifySTRef(v5))(Data_Function.flip(Data_Semigroup.append(Data_List.semigroupList))(Data_List.singleton(makeComponent(newPath.component))))();
                                  v2.value = newPath.path;
                                  return Data_Unit.unit;
                              })();
                          };
                      };
                      var indexOf = function (v6) {
                          return indexOfKey(makeKey(v6));
                      };
                      var go = function (v6) {
                          if (v6 instanceof Data_List.Nil) {
                              return Control_Monad_ST.readSTRef(v5);
                          };
                          if (v6 instanceof Data_List.Cons) {
                              return function __do() {
                                  var v8 = indexOf(v6.value0)();
                                  Data_Function.apply(Control_Applicative.when(Control_Monad_Eff.applicativeEff)(Data_Maybe.isNothing(v8)))(strongConnect(makeKey(v6.value0)))();
                                  return go(v6.value1)();
                              };
                          };
                          throw new Error("Failed pattern match at Data.Graph line 70, column 4 - line 130, column 12: " + [ v6.constructor.name ]);
                      };
                      return go(v.value0)();
                  });
              };
          };
      };
  };
  var scc = function (dictOrd) {
      return scc$prime(dictOrd)(Control_Category.id(Control_Category.categoryFn))(Control_Category.id(Control_Category.categoryFn));
  };
  var topSort$prime = function (dictOrd) {
      return function (makeKey) {
          return function (makeVert) {
              return function ($94) {
                  return Data_List.reverse(Data_List.concatMap(vertices)(scc$prime(dictOrd)(makeKey)(makeVert)($94)));
              };
          };
      };
  };
  var topSort = function (dictOrd) {
      return topSort$prime(dictOrd)(Control_Category.id(Control_Category.categoryFn))(Control_Category.id(Control_Category.categoryFn));
  };
  var eqSCC = function (dictEq) {
      return new Data_Eq.Eq(function (v) {
          return function (v1) {
              if (v instanceof AcyclicSCC && v1 instanceof AcyclicSCC) {
                  return Data_Eq.eq(dictEq)(v.value0)(v1.value0);
              };
              if (v instanceof CyclicSCC && v1 instanceof CyclicSCC) {
                  return Data_Eq.eq(Data_List.eqList(dictEq))(v.value0)(v1.value0);
              };
              return false;
          };
      });
  };
  exports["Edge"] = Edge;
  exports["Graph"] = Graph;
  exports["AcyclicSCC"] = AcyclicSCC;
  exports["CyclicSCC"] = CyclicSCC;
  exports["scc"] = scc;
  exports["scc'"] = scc$prime;
  exports["topSort"] = topSort;
  exports["topSort'"] = topSort$prime;
  exports["vertices"] = vertices;
  exports["showSCC"] = showSCC;
  exports["eqSCC"] = eqSCC;
})(PS["Data.Graph"] = PS["Data.Graph"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Category = PS["Control.Category"];        
  var List = function (x) {
      return x;
  };
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var runList = function (v) {
      return v;
  };
  var step = function ($262) {
      return Data_Lazy.force(runList($262));
  };
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return step(ys);
              };
              if (v instanceof Cons) {
                  return new Cons(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(ys));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 770, column 5 - line 770, column 21: " + [ v.constructor.name ]);
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(runList(xs));
      };
  });
  var showList = function (dictShow) {
      return new Data_Show.Show(function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return "Nil";
              };
              if (v instanceof Cons) {
                  return "(Cons " + (Data_Show.show(dictShow)(v.value0) + (" " + (go(step(v.value1)) + ")")));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 740, column 3 - line 745, column 1: " + [ v.constructor.name ]);
          };
          return "fromStrict (" + (go(step(xs)) + ")");
      });
  };
  var uncons = function (xs) {
      var $87 = step(xs);
      if ($87 instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if ($87 instanceof Cons) {
          return new Data_Maybe.Just({
              head: $87.value0, 
              tail: $87.value1
          });
      };
      throw new Error("Failed pattern match at Data.List.Lazy line 302, column 13 - line 304, column 54: " + [ $87.constructor.name ]);
  };
  var tail = function (xs) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return v.tail;
      })(uncons(xs));
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var take = function (n) {
      return function (xs) {
          var go = function (v) {
              return function (v1) {
                  if (v <= 0) {
                      return Nil.value;
                  };
                  if (v1 instanceof Nil) {
                      return Nil.value;
                  };
                  if (v1 instanceof Cons) {
                      return new Cons(v1.value0, take(v - 1)(v1.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 511, column 3 - line 511, column 24: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(runList(xs));
      };
  };
  var takeWhile = function (p) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Cons && p(v.value0)) {
                  return new Cons(v.value0, takeWhile(p)(v.value1));
              };
              return Nil.value;
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(runList(xs));
      };
  };
  var updateAt = function (n) {
      return function (x) {
          return function (xs) {
              var go = function (v) {
                  return function (v1) {
                      if (v1 instanceof Nil) {
                          return Nil.value;
                      };
                      if (v === 0 && v1 instanceof Cons) {
                          return new Cons(x, v1.value1);
                      };
                      if (v1 instanceof Cons) {
                          return new Cons(v1.value0, updateAt(v - 1)(x)(v1.value1));
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy line 384, column 3 - line 384, column 17: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(runList(xs));
          };
      };
  };
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function (v) {
                  return function (v1) {
                      if (v instanceof Nil) {
                          return Nil.value;
                      };
                      if (v1 instanceof Nil) {
                          return Nil.value;
                      };
                      if (v instanceof Cons && v1 instanceof Cons) {
                          return new Cons(f(v.value0)(v1.value0), zipWith(f)(v.value1)(v1.value1));
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy line 677, column 3 - line 677, column 17: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Control_Apply.apply(Data_Lazy.applyLazy)(Data_Functor.map(Data_Lazy.functorLazy)(go)(runList(xs)))(runList(ys));
          };
      };
  };
  var zip = zipWith(Data_Tuple.Tuple.create);
  var $$null = function ($263) {
      return Data_Maybe.isNothing(uncons($263));
  };
  var nil = Data_Function.apply(List)(Data_Lazy.defer(function (v) {
      return Nil.value;
  }));
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, nil);
  var mapMaybe = function (f) {
      return function (xs) {
          var go = function (__copy_v) {
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return Nil.value;
                  };
                  if (v instanceof Cons) {
                      var $111 = f(v.value0);
                      if ($111 instanceof Data_Maybe.Nothing) {
                          var __tco_v = step(v.value1);
                          v = __tco_v;
                          continue tco;
                      };
                      if ($111 instanceof Data_Maybe.Just) {
                          return new Cons($111.value0, mapMaybe(f)(v.value1));
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy line 483, column 5 - line 485, column 39: " + [ $111.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 479, column 1 - line 485, column 39: " + [ v.constructor.name ]);
              };
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(runList(xs));
      };
  };
  var length = function (xs) {
      var go = function (v) {
          if (v instanceof Nil) {
              return 0;
          };
          if (v instanceof Cons) {
              return 1 + go(step(v.value1)) | 0;
          };
          throw new Error("Failed pattern match at Data.List.Lazy line 214, column 1 - line 217, column 36: " + [ v.constructor.name ]);
      };
      return go(step(xs));
  };
  var lazyList = new Control_Lazy.Lazy(function (f) {
      return Data_Function.apply(List)(Data_Lazy.defer(function ($264) {
          return step(f($264));
      }));
  });
  var last = function (xs) {
      var go = function (__copy_v) {
          var v = __copy_v;
          tco: while (true) {
              if (v instanceof Cons) {
                  if ($$null(v.value1)) {
                      return new Data_Maybe.Just(v.value0);
                  };
                  if (Data_Boolean.otherwise) {
                      var __tco_v = step(v.value1);
                      v = __tco_v;
                      continue tco;
                  };
              };
              return Data_Maybe.Nothing.value;
          };
      };
      return go(step(xs));
  };
  var index = function (xs) {
      var go = function (__copy_v) {
          return function (__copy_v1) {
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Cons && v1 === 0) {
                      return new Data_Maybe.Just(v.value0);
                  };
                  if (v instanceof Cons) {
                      var __tco_v = step(v.value1);
                      var __tco_v1 = v1 - 1;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 314, column 1 - line 318, column 42: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
      return go(step(xs));
  };
  var head = function (xs) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return v.head;
      })(uncons(xs));
  };
  var functorList = new Data_Functor.Functor(function (f) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return new Cons(f(v.value0), Data_Functor.map(functorList)(f)(v.value1));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 779, column 5 - line 779, column 17: " + [ v.constructor.name ]);
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(runList(xs));
      };
  });
  var fromStep = function ($265) {
      return List(Control_Applicative.pure(Data_Lazy.applicativeLazy)($265));
  };
  var insertBy = function (cmp) {
      return function (x) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Nil) {
                      return new Cons(x, nil);
                  };
                  if (v instanceof Cons) {
                      var $131 = cmp(x)(v.value0);
                      if ($131 instanceof Data_Ordering.GT) {
                          return new Cons(v.value0, insertBy(cmp)(x)(v.value1));
                      };
                      return new Cons(x, fromStep(v));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 254, column 3 - line 254, column 22: " + [ v.constructor.name ]);
              };
              return Data_Functor.map(Data_Lazy.functorLazy)(go)(runList(xs));
          };
      };
  };
  var insert = function (dictOrd) {
      return insertBy(Data_Ord.compare(dictOrd));
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Nil) {
                      return Data_Monoid.mempty(dictMonoid);
                  };
                  if (v instanceof Cons) {
                      return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(v.value0))(Data_Foldable.foldMap(foldableList)(dictMonoid)(f)(v.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 798, column 5 - line 798, column 20: " + [ v.constructor.name ]);
              };
              return go(step(xs));
          };
      };
  }, function (o) {
      return function (b) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Nil) {
                      return b;
                  };
                  if (v instanceof Cons) {
                      return Data_Foldable.foldl(foldableList)(o)(o(b)(v.value0))(v.value1);
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 792, column 5 - line 792, column 15: " + [ v.constructor.name ]);
              };
              return go(step(xs));
          };
      };
  }, function (o) {
      return function (b) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Nil) {
                      return b;
                  };
                  if (v instanceof Cons) {
                      return o(v.value0)(Data_Foldable.foldr(foldableList)(o)(b)(v.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 786, column 5 - line 786, column 15: " + [ v.constructor.name ]);
              };
              return go(step(xs));
          };
      };
  });
  var foldM = function (dictMonad) {
      return function (f) {
          return function (a) {
              return function (xs) {
                  var $143 = uncons(xs);
                  if ($143 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(a);
                  };
                  if ($143 instanceof Data_Maybe.Just) {
                      return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f(a)($143.value0.head))(function (a$prime) {
                          return foldM(dictMonad)(f)(a$prime)($143.value0.tail);
                      });
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 730, column 5 - line 733, column 54: " + [ $143.constructor.name ]);
              };
          };
      };
  };
  var findIndex = function (fn) {
      var go = function (n) {
          return function (list) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(uncons(list))(function (v) {
                  var $148 = fn(v.head);
                  if ($148) {
                      return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(n);
                  };
                  if (!$148) {
                      return go(n + 1 | 0)(v.tail);
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 338, column 7 - line 340, column 32: " + [ $148.constructor.name ]);
              });
          };
      };
      return go(0);
  };
  var filter = function (p) {
      return function (xs) {
          var go = function (__copy_v) {
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return Nil.value;
                  };
                  if (v instanceof Cons) {
                      if (p(v.value0)) {
                          return new Cons(v.value0, filter(p)(v.value1));
                      };
                      if (Data_Boolean.otherwise) {
                          var __tco_v = step(v.value1);
                          v = __tco_v;
                          continue tco;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 449, column 1 - line 454, column 31: " + [ v.constructor.name ]);
              };
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(runList(xs));
      };
  };
  var intersectBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return filter(function (x) {
                  return Data_Foldable.any(foldableList)(Data_BooleanAlgebra.booleanAlgebraBoolean)(eq(x))(ys);
              })(xs);
          };
      };
  };
  var intersect = function (dictEq) {
      return intersectBy(Data_Eq.eq(dictEq));
  };
  var nubBy = function (eq) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return new Cons(v.value0, nubBy(eq)(filter(function (y) {
                      return !eq(v.value0)(y);
                  })(v.value1)));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 604, column 3 - line 604, column 15: " + [ v.constructor.name ]);
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(runList(xs));
      };
  };
  var nub = function (dictEq) {
      return nubBy(Data_Eq.eq(dictEq));
  };
  var eqList = function (dictEq) {
      return new Data_Eq.Eq(function (xs) {
          return function (ys) {
              var go = function (__copy_v) {
                  return function (__copy_v1) {
                      var v = __copy_v;
                      var v1 = __copy_v1;
                      tco: while (true) {
                          if (v instanceof Nil && v1 instanceof Nil) {
                              return true;
                          };
                          if (v instanceof Cons && (v1 instanceof Cons && Data_Eq.eq(dictEq)(v.value0)(v1.value0))) {
                              var __tco_v = step(v.value1);
                              var __tco_v1 = step(v1.value1);
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          return false;
                      };
                  };
              };
              return go(step(xs))(step(ys));
          };
      });
  };
  var ordList = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqList(dictOrd["__superclass_Data.Eq.Eq_0"]());
      }, function (xs) {
          return function (ys) {
              var go = function (__copy_v) {
                  return function (__copy_v1) {
                      var v = __copy_v;
                      var v1 = __copy_v1;
                      tco: while (true) {
                          if (v instanceof Nil && v1 instanceof Nil) {
                              return Data_Ordering.EQ.value;
                          };
                          if (v instanceof Nil) {
                              return Data_Ordering.LT.value;
                          };
                          if (v1 instanceof Nil) {
                              return Data_Ordering.GT.value;
                          };
                          if (v instanceof Cons && v1 instanceof Cons) {
                              var $163 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                              if ($163 instanceof Data_Ordering.EQ) {
                                  var __tco_v = step(v.value1);
                                  var __tco_v1 = step(v1.value1);
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              return $163;
                          };
                          throw new Error("Failed pattern match at Data.List.Lazy line 754, column 3 - line 762, column 23: " + [ v.constructor.name, v1.constructor.name ]);
                      };
                  };
              };
              return go(step(xs))(step(ys));
          };
      });
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var dropWhile = function (p) {
      return function (xs) {
          var go = function (__copy_v) {
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Cons && p(v.value0)) {
                      var __tco_v = step(v.value1);
                      v = __tco_v;
                      continue tco;
                  };
                  return fromStep(v);
              };
          };
          return go(step(xs));
      };
  };
  var drop = function (n) {
      return function (xs) {
          var go = function (__copy_v) {
              return function (__copy_v1) {
                  var v = __copy_v;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      if (v === 0) {
                          return v1;
                      };
                      if (v1 instanceof Nil) {
                          return Nil.value;
                      };
                      if (v1 instanceof Cons) {
                          var __tco_v = v - 1;
                          var __tco_v1 = step(v1.value1);
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy line 528, column 1 - line 532, column 42: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(runList(xs));
      };
  };
  var slice = function (start) {
      return function (end) {
          return function (xs) {
              return take(end - start)(drop(start)(xs));
          };
      };
  };
  var deleteBy = function (eq) {
      return function (x) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Nil) {
                      return Nil.value;
                  };
                  if (v instanceof Cons) {
                      if (eq(x)(v.value0)) {
                          return step(v.value1);
                      };
                      if (Data_Boolean.otherwise) {
                          return new Cons(v.value0, deleteBy(eq)(x)(v.value1));
                      };
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 633, column 3 - line 633, column 15: " + [ v.constructor.name ]);
              };
              return Data_Functor.map(Data_Lazy.functorLazy)(go)(runList(xs));
          };
      };
  };
  var unionBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return Data_Semigroup.append(semigroupList)(xs)(Data_Foldable.foldl(foldableList)(Data_Function.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
          };
      };
  };
  var union = function (dictEq) {
      return unionBy(Data_Eq.eq(dictEq));
  };
  var deleteAt = function (n) {
      return function (xs) {
          var go = function (v) {
              return function (v1) {
                  if (v1 instanceof Nil) {
                      return Nil.value;
                  };
                  if (v === 0 && v1 instanceof Cons) {
                      return step(v1.value1);
                  };
                  if (v1 instanceof Cons) {
                      return new Cons(v1.value0, deleteAt(v - 1)(v1.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 370, column 3 - line 370, column 17: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(runList(xs));
      };
  };
  var $$delete = function (dictEq) {
      return deleteBy(Data_Eq.eq(dictEq));
  };
  var difference = function (dictEq) {
      return Data_Foldable.foldl(foldableList)(Data_Function.flip($$delete(dictEq)));
  };
  var cycle = function (xs) {
      return Control_Lazy.fix(lazyList)(function (ys) {
          return Data_Semigroup.append(semigroupList)(xs)(ys);
      });
  };
  var cons = function (x) {
      return function (xs) {
          return Data_Function.apply(List)(Data_Lazy.defer(function (v) {
              return new Cons(x, xs);
          }));
      };
  };
  var filterM = function (dictMonad) {
      return function (p) {
          return function (list) {
              var $185 = uncons(list);
              if ($185 instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(nil);
              };
              if ($185 instanceof Data_Maybe.Just) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(p($185.value0.head))(function (v) {
                      return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(filterM(dictMonad)(p)($185.value0.tail))(function (v1) {
                          return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())((function () {
                              if (v) {
                                  return cons($185.value0.head)(v1);
                              };
                              if (!v) {
                                  return v1;
                              };
                              throw new Error("Failed pattern match at Data.List.Lazy line 471, column 14 - line 471, column 48: " + [ v.constructor.name ]);
                          })());
                      });
                  });
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 466, column 5 - line 471, column 48: " + [ $185.constructor.name ]);
          };
      };
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(cons)(nil);
  };
  var init = function (xs) {
      var go = function (v) {
          if (v instanceof Cons) {
              if ($$null(v.value1)) {
                  return new Data_Maybe.Just(nil);
              };
              if (Data_Boolean.otherwise) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(cons(v.value0))(go(step(v.value1)));
              };
          };
          return Data_Maybe.Nothing.value;
      };
      return go(step(xs));
  };
  var insertAt = function (v) {
      return function (x) {
          return function (xs) {
              if (v === 0) {
                  return cons(x)(xs);
              };
              var go = function (v1) {
                  if (v1 instanceof Nil) {
                      return new Cons(x, nil);
                  };
                  if (v1 instanceof Cons) {
                      return new Cons(v1.value0, insertAt(v - 1)(x)(v1.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 357, column 3 - line 357, column 22: " + [ v1.constructor.name ]);
              };
              return Data_Functor.map(Data_Lazy.functorLazy)(go)(runList(xs));
          };
      };
  };
  var iterate = function (f) {
      return function (x) {
          return Control_Lazy.fix(lazyList)(function (xs) {
              return cons(x)(Data_Functor.map(functorList)(f)(xs));
          });
      };
  };
  var repeat = function (x) {
      return Control_Lazy.fix(lazyList)(function (xs) {
          return cons(x)(xs);
      });
  };
  var replicate = function (i) {
      return function (xs) {
          return take(i)(repeat(xs));
      };
  };
  var replicateM = function (dictMonad) {
      return function (n) {
          return function (m) {
              if (n < 1) {
                  return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(nil);
              };
              if (Data_Boolean.otherwise) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(m)(function (v) {
                      return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(replicateM(dictMonad)(n - 1)(m))(function (v1) {
                          return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(cons(v)(v1));
                      });
                  });
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 181, column 1 - line 186, column 23: " + [ n.constructor.name, m.constructor.name ]);
          };
      };
  };
  var reverse = function (xs) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return acc;
                  };
                  if (v instanceof Cons) {
                      var __tco_acc = cons(v.value0)(acc);
                      var __tco_v = step(v.value1);
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 424, column 1 - line 427, column 49: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(nil)(step(xs));
  };
  var findLastIndex = function (fn) {
      return function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
              return length(xs) - 1 - v;
          })(findIndex(fn)(reverse(xs)));
      };
  };
  var elemLastIndex = function (dictEq) {
      return function (x) {
          return findLastIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  var singleton = function (a) {
      return cons(a)(nil);
  };
  var snoc = function (xs) {
      return function (x) {
          return Data_Foldable.foldr(foldableList)(cons)(cons(x)(nil))(xs);
      };
  };
  var span = function (p) {
      return function (xs) {
          var $209 = uncons(xs);
          if ($209 instanceof Data_Maybe.Just && p($209.value0.head)) {
              var $210 = span(p)($209.value0.tail);
              return {
                  init: cons($209.value0.head)($210.init), 
                  rest: $210.rest
              };
          };
          return {
              init: nil, 
              rest: xs
          };
      };
  };
  var groupBy = function (eq) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  var $217 = span(eq(v.value0))(v.value1);
                  return new Cons(cons(v.value0)($217.init), groupBy(eq)($217.rest));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 582, column 3 - line 582, column 15: " + [ v.constructor.name ]);
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(runList(xs));
      };
  };
  var group = function (dictEq) {
      return groupBy(Data_Eq.eq(dictEq));
  };
  var transpose = function (xs) {
      var $222 = uncons(xs);
      if ($222 instanceof Data_Maybe.Nothing) {
          return xs;
      };
      if ($222 instanceof Data_Maybe.Just) {
          var $223 = uncons($222.value0.head);
          if ($223 instanceof Data_Maybe.Nothing) {
              return transpose($222.value0.tail);
          };
          if ($223 instanceof Data_Maybe.Just) {
              return cons(cons($223.value0.head)(mapMaybe(head)($222.value0.tail)))(transpose(cons($223.value0.tail)(mapMaybe(tail)($222.value0.tail))));
          };
          throw new Error("Failed pattern match at Data.List.Lazy line 717, column 7 - line 721, column 71: " + [ $223.constructor.name ]);
      };
      throw new Error("Failed pattern match at Data.List.Lazy line 713, column 3 - line 721, column 71: " + [ $222.constructor.name ]);
  };
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Control_Applicative.pure(dictApplicative)(nil);
              };
              if (v instanceof Cons) {
                  return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(cons)(v.value0))(Data_Traversable.sequence(traversableList)(dictApplicative)(v.value1));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 819, column 5 - line 819, column 22: " + [ v.constructor.name ]);
          };
          return go(step(xs));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Nil) {
                      return Control_Applicative.pure(dictApplicative)(nil);
                  };
                  if (v instanceof Cons) {
                      return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(cons)(f(v.value0)))(Data_Traversable.traverse(traversableList)(dictApplicative)(f)(v.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 813, column 5 - line 813, column 22: " + [ v.constructor.name ]);
              };
              return go(step(xs));
          };
      };
  });
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Traversable.sequence(traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var unfoldableList = new Data_Unfoldable.Unfoldable(function (f) {
      return function (b) {
          var go = function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return nil;
              };
              if (v instanceof Data_Maybe.Just) {
                  return cons(v.value0.value0)(Control_Lazy.defer(lazyList)(function (v1) {
                      return go(f(v.value0.value1));
                  }));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 803, column 3 - line 807, column 55: " + [ v.constructor.name ]);
          };
          return go(f(b));
      };
  });
  var range = function (start) {
      return function (end) {
          if (start > end) {
              var g = function (x) {
                  if (x >= end) {
                      return new Data_Maybe.Just(new Data_Tuple.Tuple(x, x - 1));
                  };
                  if (Data_Boolean.otherwise) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 167, column 13 - line 168, column 38: " + [ x.constructor.name ]);
              };
              return Data_Unfoldable.unfoldr(unfoldableList)(g)(start);
          };
          if (Data_Boolean.otherwise) {
              var f = function (x) {
                  if (x <= end) {
                      return new Data_Maybe.Just(new Data_Tuple.Tuple(x, x + 1 | 0));
                  };
                  if (Data_Boolean.otherwise) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 172, column 5 - line 173, column 30: " + [ x.constructor.name ]);
              };
              return Data_Unfoldable.unfoldr(unfoldableList)(f)(start);
          };
          throw new Error("Failed pattern match at Data.List.Lazy line 165, column 1 - line 173, column 30: " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  var unzip = Data_Foldable.foldr(foldableList)(function (v) {
      return function (v1) {
          return new Data_Tuple.Tuple(cons(v.value0)(v1.value0), cons(v.value1)(v1.value1));
      };
  })(new Data_Tuple.Tuple(nil, nil));
  var concatMap = function (f) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return step(Data_Semigroup.append(semigroupList)(f(v.value0))(concatMap(f)(v.value1)));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 442, column 3 - line 442, column 15: " + [ v.constructor.name ]);
          };
          return Data_Functor.map(Data_Lazy.functorLazy)(go)(runList(xs));
      };
  };
  var catMaybes = mapMaybe(Control_Category.id(Control_Category.categoryFn));
  var monadList = new Control_Monad.Monad(function () {
      return applicativeList;
  }, function () {
      return bindList;
  });
  var bindList = new Control_Bind.Bind(function () {
      return applyList;
  }, Data_Function.flip(concatMap));
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, Control_Monad.ap(monadList));
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, singleton);
  var concat = function (v) {
      return Control_Bind.bind(bindList)(v)(Control_Category.id(Control_Category.categoryFn));
  };
  var alterAt = function (n) {
      return function (f) {
          return function (xs) {
              var go = function (v) {
                  return function (v1) {
                      if (v1 instanceof Nil) {
                          return Nil.value;
                      };
                      if (v === 0 && v1 instanceof Cons) {
                          var $256 = f(v1.value0);
                          if ($256 instanceof Data_Maybe.Nothing) {
                              return step(v1.value1);
                          };
                          if ($256 instanceof Data_Maybe.Just) {
                              return new Cons($256.value0, v1.value1);
                          };
                          throw new Error("Failed pattern match at Data.List.Lazy line 411, column 22 - line 413, column 26: " + [ $256.constructor.name ]);
                      };
                      if (v1 instanceof Cons) {
                          return new Cons(v1.value0, alterAt(v - 1)(f)(v1.value1));
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy line 410, column 3 - line 410, column 17: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Data_Functor.map(Data_Lazy.functorLazy)(go(n))(runList(xs));
          };
      };
  };
  var modifyAt = function (n) {
      return function (f) {
          return alterAt(n)(function ($266) {
              return Data_Maybe.Just.create(f($266));
          });
      };
  };
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, nil);
  var alternativeList = new Control_Alternative.Alternative(function () {
      return applicativeList;
  }, function () {
      return plusList;
  });
  var monadZeroList = new Control_MonadZero.MonadZero(function () {
      return alternativeList;
  }, function () {
      return monadList;
  });
  var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
      return monadZeroList;
  });
  exports["List"] = List;
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["alterAt"] = alterAt;
  exports["catMaybes"] = catMaybes;
  exports["concat"] = concat;
  exports["concatMap"] = concatMap;
  exports["cons"] = cons;
  exports["cycle"] = cycle;
  exports["delete"] = $$delete;
  exports["deleteAt"] = deleteAt;
  exports["deleteBy"] = deleteBy;
  exports["difference"] = difference;
  exports["drop"] = drop;
  exports["dropWhile"] = dropWhile;
  exports["elemIndex"] = elemIndex;
  exports["elemLastIndex"] = elemLastIndex;
  exports["filter"] = filter;
  exports["filterM"] = filterM;
  exports["findIndex"] = findIndex;
  exports["findLastIndex"] = findLastIndex;
  exports["foldM"] = foldM;
  exports["fromFoldable"] = fromFoldable;
  exports["group"] = group;
  exports["groupBy"] = groupBy;
  exports["head"] = head;
  exports["index"] = index;
  exports["init"] = init;
  exports["insert"] = insert;
  exports["insertAt"] = insertAt;
  exports["insertBy"] = insertBy;
  exports["intersect"] = intersect;
  exports["intersectBy"] = intersectBy;
  exports["iterate"] = iterate;
  exports["last"] = last;
  exports["length"] = length;
  exports["mapMaybe"] = mapMaybe;
  exports["modifyAt"] = modifyAt;
  exports["nil"] = nil;
  exports["nub"] = nub;
  exports["nubBy"] = nubBy;
  exports["null"] = $$null;
  exports["range"] = range;
  exports["repeat"] = repeat;
  exports["replicate"] = replicate;
  exports["replicateM"] = replicateM;
  exports["reverse"] = reverse;
  exports["runList"] = runList;
  exports["singleton"] = singleton;
  exports["slice"] = slice;
  exports["snoc"] = snoc;
  exports["span"] = span;
  exports["step"] = step;
  exports["tail"] = tail;
  exports["take"] = take;
  exports["takeWhile"] = takeWhile;
  exports["toUnfoldable"] = toUnfoldable;
  exports["transpose"] = transpose;
  exports["uncons"] = uncons;
  exports["union"] = union;
  exports["unionBy"] = unionBy;
  exports["unzip"] = unzip;
  exports["updateAt"] = updateAt;
  exports["zip"] = zip;
  exports["zipWith"] = zipWith;
  exports["zipWithA"] = zipWithA;
  exports["showList"] = showList;
  exports["eqList"] = eqList;
  exports["ordList"] = ordList;
  exports["lazyList"] = lazyList;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["traversableList"] = traversableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
  exports["monadList"] = monadList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["alternativeList"] = alternativeList;
  exports["monadZeroList"] = monadZeroList;
  exports["monadPlusList"] = monadPlusList;
})(PS["Data.List.Lazy"] = PS["Data.List.Lazy"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Data_List = PS["Data.List"];        
  var tail = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar5) {
                  return $dollar5;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Data_List.Cons) {
                  return v.value1;
              };
              throw new Error("Failed pattern match at Data.List.Partial line 16, column 1 - line 16, column 22: " + [ v.constructor.name ]);
          })());
      };
  };
  var last = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar9) {
                  return $dollar9;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Data_List.Cons && v.value1 instanceof Data_List.Nil) {
                  return v.value0;
              };
              if (v instanceof Data_List.Cons) {
                  return last(dictPartial)(v.value1);
              };
              throw new Error("Failed pattern match at Data.List.Partial line 22, column 1 - line 22, column 22: " + [ v.constructor.name ]);
          })());
      };
  };
  var init = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar13) {
                  return $dollar13;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Data_List.Cons && v.value1 instanceof Data_List.Nil) {
                  return Data_List.Nil.value;
              };
              if (v instanceof Data_List.Cons) {
                  return new Data_List.Cons(v.value0, init(dictPartial)(v.value1));
              };
              throw new Error("Failed pattern match at Data.List.Partial line 29, column 1 - line 29, column 24: " + [ v.constructor.name ]);
          })());
      };
  };
  var head = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar17) {
                  return $dollar17;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Data_List.Cons) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.List.Partial line 10, column 1 - line 10, column 20: " + [ v.constructor.name ]);
          })());
      };
  };
  exports["head"] = head;
  exports["init"] = init;
  exports["last"] = last;
  exports["tail"] = tail;
})(PS["Data.List.Partial"] = PS["Data.List.Partial"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List_Lazy = PS["Data.List.Lazy"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];        
  var ZipList = function (x) {
      return x;
  };
  var showZipList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(ZipList " + (Data_Show.show(Data_List_Lazy.showList(dictShow))(v) + ")");
      });
  };
  var runZipList = function (v) {
      return v;
  };
  var semigroupZipList = new Data_Semigroup.Semigroup(function (z1) {
      return function (z2) {
          return Data_Semigroup.append(Data_List_Lazy.semigroupList)(runZipList(z1))(runZipList(z2));
      };
  });
  var monoidZipList = new Data_Monoid.Monoid(function () {
      return semigroupZipList;
  }, Data_Monoid.mempty(Data_List_Lazy.monoidList));
  var functorZipList = new Data_Functor.Functor(function (f) {
      return function (v) {
          return Data_Functor.map(Data_List_Lazy.functorList)(f)(v);
      };
  });
  var foldableZipList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return Data_Foldable.foldMap(Data_List_Lazy.foldableList)(dictMonoid)(f)(v);
          };
      };
  }, function (f) {
      return function (b) {
          return function (v) {
              return Data_Foldable.foldl(Data_List_Lazy.foldableList)(f)(b)(v);
          };
      };
  }, function (f) {
      return function (b) {
          return function (v) {
              return Data_Foldable.foldr(Data_List_Lazy.foldableList)(f)(b)(v);
          };
      };
  });
  var traversableZipList = new Data_Traversable.Traversable(function () {
      return foldableZipList;
  }, function () {
      return functorZipList;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(ZipList)(Data_Traversable.sequence(Data_List_Lazy.traversableList)(dictApplicative)(v));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(ZipList)(Data_Traversable.traverse(Data_List_Lazy.traversableList)(dictApplicative)(f)(v));
          };
      };
  });
  var eqZipList = function (dictEq) {
      return new Data_Eq.Eq(function (z1) {
          return function (z2) {
              return Data_Eq.eq(Data_List_Lazy.eqList(dictEq))(runZipList(z1))(runZipList(z2));
          };
      });
  };
  var ordZipList = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqZipList(dictOrd["__superclass_Data.Eq.Eq_0"]());
      }, function (z1) {
          return function (z2) {
              return Data_Ord.compare(Data_List_Lazy.ordList(dictOrd))(runZipList(z1))(runZipList(z2));
          };
      });
  };
  var applyZipList = new Control_Apply.Apply(function () {
      return functorZipList;
  }, function (v) {
      return function (v1) {
          return Data_List_Lazy.zipWith(Data_Function.apply)(v)(v1);
      };
  });
  var zipListIsNotBind = function (dictFail) {
      return new Control_Bind.Bind(function () {
          return applyZipList;
      }, Partial_Unsafe.unsafeCrashWith("bind: unreachable"));
  };
  var applicativeZipList = new Control_Applicative.Applicative(function () {
      return applyZipList;
  }, function ($34) {
      return ZipList(Data_List_Lazy.repeat($34));
  });
  var altZipList = new Control_Alt.Alt(function () {
      return functorZipList;
  }, Data_Semigroup.append(semigroupZipList));
  var plusZipList = new Control_Plus.Plus(function () {
      return altZipList;
  }, Data_Monoid.mempty(monoidZipList));
  var alternativeZipList = new Control_Alternative.Alternative(function () {
      return applicativeZipList;
  }, function () {
      return plusZipList;
  });
  exports["ZipList"] = ZipList;
  exports["runZipList"] = runZipList;
  exports["showZipList"] = showZipList;
  exports["eqZipList"] = eqZipList;
  exports["ordZipList"] = ordZipList;
  exports["semigroupZipList"] = semigroupZipList;
  exports["monoidZipList"] = monoidZipList;
  exports["foldableZipList"] = foldableZipList;
  exports["traversableZipList"] = traversableZipList;
  exports["functorZipList"] = functorZipList;
  exports["applyZipList"] = applyZipList;
  exports["applicativeZipList"] = applicativeZipList;
  exports["altZipList"] = altZipList;
  exports["plusZipList"] = plusZipList;
  exports["alternativeZipList"] = alternativeZipList;
  exports["zipListIsNotBind"] = zipListIsNotBind;
})(PS["Data.List.ZipList"] = PS["Data.List.ZipList"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];        
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  };
  var profunctorFn = new Profunctor(function (a2b) {
      return function (c2d) {
          return function (b2c) {
              return function ($4) {
                  return c2d(b2c(a2b($4)));
              };
          };
      };
  });
  var dimap = function (dict) {
      return dict.dimap;
  };
  var lmap = function (dictProfunctor) {
      return function (a2b) {
          return dimap(dictProfunctor)(a2b)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var rmap = function (dictProfunctor) {
      return function (b2c) {
          return dimap(dictProfunctor)(Control_Category.id(Control_Category.categoryFn))(b2c);
      };
  };
  var arr = function (dictCategory) {
      return function (dictProfunctor) {
          return function (f) {
              return rmap(dictProfunctor)(f)(Control_Category.id(dictCategory));
          };
      };
  };
  exports["Profunctor"] = Profunctor;
  exports["arr"] = arr;
  exports["dimap"] = dimap;
  exports["lmap"] = lmap;
  exports["rmap"] = rmap;
  exports["profunctorFn"] = profunctorFn;
})(PS["Data.Profunctor"] = PS["Data.Profunctor"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];        
  var Choice = function (__superclass_Data$dotProfunctor$dotProfunctor_0, left, right) {
      this["__superclass_Data.Profunctor.Profunctor_0"] = __superclass_Data$dotProfunctor$dotProfunctor_0;
      this.left = left;
      this.right = right;
  };
  var right = function (dict) {
      return dict.right;
  };
  var left = function (dict) {
      return dict.left;
  };
  var splitChoice = function (dictCategory) {
      return function (dictChoice) {
          return function (l) {
              return function (r) {
                  return Control_Semigroupoid.composeFlipped(dictCategory["__superclass_Control.Semigroupoid.Semigroupoid_0"]())(left(dictChoice)(l))(right(dictChoice)(r));
              };
          };
      };
  };
  var fanin = function (dictCategory) {
      return function (dictChoice) {
          return function (l) {
              return function (r) {
                  var join = Data_Profunctor.dimap(dictChoice["__superclass_Data.Profunctor.Profunctor_0"]())(Data_Either.either(Control_Category.id(Control_Category.categoryFn))(Control_Category.id(Control_Category.categoryFn)))(Control_Category.id(Control_Category.categoryFn))(Control_Category.id(dictCategory));
                  return Control_Semigroupoid.composeFlipped(dictCategory["__superclass_Control.Semigroupoid.Semigroupoid_0"]())(splitChoice(dictCategory)(dictChoice)(l)(r))(join);
              };
          };
      };
  };
  var choiceFn = new Choice(function () {
      return Data_Profunctor.profunctorFn;
  }, function (v) {
      return function (v1) {
          if (v1 instanceof Data_Either.Left) {
              return Data_Function.apply(Data_Either.Left.create)(v(v1.value0));
          };
          if (v1 instanceof Data_Either.Right) {
              return new Data_Either.Right(v1.value0);
          };
          throw new Error("Failed pattern match at Data.Profunctor.Choice line 33, column 3 - line 33, column 36: " + [ v.constructor.name, v1.constructor.name ]);
      };
  }, Data_Functor.map(Data_Either.functorEither));
  exports["Choice"] = Choice;
  exports["fanin"] = fanin;
  exports["left"] = left;
  exports["right"] = right;
  exports["splitChoice"] = splitChoice;
  exports["choiceFn"] = choiceFn;
})(PS["Data.Profunctor.Choice"] = PS["Data.Profunctor.Choice"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Closed = function (__superclass_Data$dotProfunctor$dotProfunctor_0, closed) {
      this["__superclass_Data.Profunctor.Profunctor_0"] = __superclass_Data$dotProfunctor$dotProfunctor_0;
      this.closed = closed;
  };
  var closedFunction = new Closed(function () {
      return Data_Profunctor.profunctorFn;
  }, Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var closed = function (dict) {
      return dict.closed;
  };
  exports["Closed"] = Closed;
  exports["closed"] = closed;
  exports["closedFunction"] = closedFunction;
})(PS["Data.Profunctor.Closed"] = PS["Data.Profunctor.Closed"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Profunctor = PS["Data.Profunctor"];        
  var Cochoice = function (__superclass_Data$dotProfunctor$dotProfunctor_0, unleft, unright) {
      this["__superclass_Data.Profunctor.Profunctor_0"] = __superclass_Data$dotProfunctor$dotProfunctor_0;
      this.unleft = unleft;
      this.unright = unright;
  };
  var unright = function (dict) {
      return dict.unright;
  };
  var unleft = function (dict) {
      return dict.unleft;
  };
  exports["Cochoice"] = Cochoice;
  exports["unleft"] = unleft;
  exports["unright"] = unright;
})(PS["Data.Profunctor.Cochoice"] = PS["Data.Profunctor.Cochoice"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Profunctor = PS["Data.Profunctor"];        
  var Costrong = function (__superclass_Data$dotProfunctor$dotProfunctor_0, unfirst, unsecond) {
      this["__superclass_Data.Profunctor.Profunctor_0"] = __superclass_Data$dotProfunctor$dotProfunctor_0;
      this.unfirst = unfirst;
      this.unsecond = unsecond;
  };
  var unsecond = function (dict) {
      return dict.unsecond;
  };
  var unfirst = function (dict) {
      return dict.unfirst;
  };
  exports["Costrong"] = Costrong;
  exports["unfirst"] = unfirst;
  exports["unsecond"] = unsecond;
})(PS["Data.Profunctor.Costrong"] = PS["Data.Profunctor.Costrong"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];        
  var Strong = function (__superclass_Data$dotProfunctor$dotProfunctor_0, first, second) {
      this["__superclass_Data.Profunctor.Profunctor_0"] = __superclass_Data$dotProfunctor$dotProfunctor_0;
      this.first = first;
      this.second = second;
  };
  var strongFn = new Strong(function () {
      return Data_Profunctor.profunctorFn;
  }, function (a2b) {
      return function (v) {
          return new Data_Tuple.Tuple(a2b(v.value0), v.value1);
      };
  }, Data_Functor.map(Data_Tuple.functorTuple));
  var second = function (dict) {
      return dict.second;
  };
  var first = function (dict) {
      return dict.first;
  };
  var splitStrong = function (dictCategory) {
      return function (dictStrong) {
          return function (l) {
              return function (r) {
                  return Control_Semigroupoid.composeFlipped(dictCategory["__superclass_Control.Semigroupoid.Semigroupoid_0"]())(first(dictStrong)(l))(second(dictStrong)(r));
              };
          };
      };
  };
  var fanout = function (dictCategory) {
      return function (dictStrong) {
          return function (l) {
              return function (r) {
                  var split = Data_Profunctor.dimap(dictStrong["__superclass_Data.Profunctor.Profunctor_0"]())(Control_Category.id(Control_Category.categoryFn))(function (a) {
                      return new Data_Tuple.Tuple(a, a);
                  })(Control_Category.id(dictCategory));
                  return Control_Semigroupoid.composeFlipped(dictCategory["__superclass_Control.Semigroupoid.Semigroupoid_0"]())(split)(splitStrong(dictCategory)(dictStrong)(l)(r));
              };
          };
      };
  };
  exports["Strong"] = Strong;
  exports["fanout"] = fanout;
  exports["first"] = first;
  exports["second"] = second;
  exports["splitStrong"] = splitStrong;
  exports["strongFn"] = strongFn;
})(PS["Data.Profunctor.Strong"] = PS["Data.Profunctor.Strong"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Closed = PS["Data.Profunctor.Closed"];
  var Data_Profunctor_Cochoice = PS["Data.Profunctor.Cochoice"];
  var Data_Profunctor_Costrong = PS["Data.Profunctor.Costrong"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Function = PS["Data.Function"];        
  var Costar = function (x) {
      return x;
  };
  var unCostar = function (v) {
      return v;
  };
  var semigroupoidCostar = function (dictExtend) {
      return new Control_Semigroupoid.Semigroupoid(function (v) {
          return function (v1) {
              return Control_Extend.composeCoKleisliFlipped(dictExtend)(v)(v1);
          };
      });
  };
  var profunctorCostar = function (dictFunctor) {
      return new Data_Profunctor.Profunctor(function (f) {
          return function (g) {
              return function (v) {
                  return function ($48) {
                      return g(v(Data_Functor.map(dictFunctor)(f)($48)));
                  };
              };
          };
      });
  };
  var strongCostar = function (dictComonad) {
      return new Data_Profunctor_Strong.Strong(function () {
          return profunctorCostar((dictComonad["__superclass_Control.Extend.Extend_0"]())["__superclass_Data.Functor.Functor_0"]());
      }, function (v) {
          return function (x) {
              return new Data_Tuple.Tuple(v(Data_Functor.map((dictComonad["__superclass_Control.Extend.Extend_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Tuple.fst)(x)), Data_Tuple.snd(Control_Comonad.extract(dictComonad)(x)));
          };
      }, function (v) {
          return function (x) {
              return new Data_Tuple.Tuple(Data_Tuple.fst(Control_Comonad.extract(dictComonad)(x)), v(Data_Functor.map((dictComonad["__superclass_Control.Extend.Extend_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Tuple.snd)(x)));
          };
      });
  };
  var functorCostar = new Data_Functor.Functor(function (f) {
      return function (v) {
          return function ($49) {
              return f(v($49));
          };
      };
  });
  var invariantCostar = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorCostar));
  var distributiveCostar = function (dictDistributive) {
      return new Data_Distributive.Distributive(function () {
          return functorCostar;
      }, function (dictFunctor) {
          return function (f) {
              return function ($50) {
                  return Data_Distributive.distribute(distributiveCostar(dictDistributive))(dictFunctor)(Data_Functor.map(dictFunctor)(f)($50));
              };
          };
      }, function (dictFunctor) {
          return function (f) {
              return function (g) {
                  return Data_Functor.map(dictFunctor)(function ($51) {
                      return (function (v) {
                          return Data_Function.apply(v)(g);
                      })(unCostar($51));
                  })(f);
              };
          };
      });
  };
  var costrongCostar = function (dictFunctor) {
      return new Data_Profunctor_Costrong.Costrong(function () {
          return profunctorCostar(dictFunctor);
      }, function (v) {
          return function (fb) {
              var bd = v(Data_Functor.map(dictFunctor)(function (a) {
                  return new Data_Tuple.Tuple(a, Data_Tuple.snd(bd));
              })(fb));
              return Data_Tuple.fst(bd);
          };
      }, function (v) {
          return function (fb) {
              var db = v(Data_Functor.map(dictFunctor)(function (a) {
                  return new Data_Tuple.Tuple(Data_Tuple.fst(db), a);
              })(fb));
              return Data_Tuple.snd(db);
          };
      });
  };
  var cochoiceCostar = function (dictApplicative) {
      return new Data_Profunctor_Cochoice.Cochoice(function () {
          return profunctorCostar((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]());
      }, function (v) {
          var g = function ($52) {
              return Data_Either.either(Control_Category.id(Control_Category.categoryFn))(function (r) {
                  return g(Control_Applicative.pure(dictApplicative)(new Data_Either.Right(r)));
              })(v($52));
          };
          return function ($53) {
              return g(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Either.Left.create)($53));
          };
      }, function (v) {
          var g = function ($54) {
              return Data_Either.either(function (l) {
                  return g(Control_Applicative.pure(dictApplicative)(new Data_Either.Left(l)));
              })(Control_Category.id(Control_Category.categoryFn))(v($54));
          };
          return function ($55) {
              return g(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Either.Right.create)($55));
          };
      });
  };
  var closedCostar = function (dictFunctor) {
      return new Data_Profunctor_Closed.Closed(function () {
          return profunctorCostar(dictFunctor);
      }, function (v) {
          return function (g) {
              return function (x) {
                  return v(Data_Functor.map(dictFunctor)(function (v1) {
                      return Data_Function.apply(v1)(x);
                  })(g));
              };
          };
      });
  };
  var categoryCostar = function (dictComonad) {
      return new Control_Category.Category(function () {
          return semigroupoidCostar(dictComonad["__superclass_Control.Extend.Extend_0"]());
      }, Control_Comonad.extract(dictComonad));
  };
  var applyCostar = new Control_Apply.Apply(function () {
      return functorCostar;
  }, function (v) {
      return function (v1) {
          return function (a) {
              return v(a)(v1(a));
          };
      };
  });
  var bindCostar = new Control_Bind.Bind(function () {
      return applyCostar;
  }, function (v) {
      return function (f) {
          return function (x) {
              return unCostar(f(v(x)))(x);
          };
      };
  });
  var applicativeCostar = new Control_Applicative.Applicative(function () {
      return applyCostar;
  }, function (a) {
      return function (v) {
          return a;
      };
  });
  var monadCostar = new Control_Monad.Monad(function () {
      return applicativeCostar;
  }, function () {
      return bindCostar;
  });
  exports["Costar"] = Costar;
  exports["unCostar"] = unCostar;
  exports["semigroupoidCostar"] = semigroupoidCostar;
  exports["categoryCostar"] = categoryCostar;
  exports["functorCostar"] = functorCostar;
  exports["invariantCostar"] = invariantCostar;
  exports["applyCostar"] = applyCostar;
  exports["applicativeCostar"] = applicativeCostar;
  exports["bindCostar"] = bindCostar;
  exports["monadCostar"] = monadCostar;
  exports["distributiveCostar"] = distributiveCostar;
  exports["profunctorCostar"] = profunctorCostar;
  exports["strongCostar"] = strongCostar;
  exports["costrongCostar"] = costrongCostar;
  exports["cochoiceCostar"] = cochoiceCostar;
  exports["closedCostar"] = closedCostar;
})(PS["Data.Profunctor.Costar"] = PS["Data.Profunctor.Costar"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Choice = PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Closed = PS["Data.Profunctor.Closed"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Function = PS["Data.Function"];        
  var Star = function (x) {
      return x;
  };
  var unStar = function (v) {
      return v;
  };
  var semigroupoidStar = function (dictBind) {
      return new Control_Semigroupoid.Semigroupoid(function (v) {
          return function (v1) {
              return function (x) {
                  return Control_Bind.bind(dictBind)(v1(x))(v);
              };
          };
      });
  };
  var profunctorStar = function (dictFunctor) {
      return new Data_Profunctor.Profunctor(function (f) {
          return function (g) {
              return function (v) {
                  return function ($72) {
                      return Data_Functor.map(dictFunctor)(g)(v(f($72)));
                  };
              };
          };
      });
  };
  var strongStar = function (dictFunctor) {
      return new Data_Profunctor_Strong.Strong(function () {
          return profunctorStar(dictFunctor);
      }, function (v) {
          return function (v1) {
              return Data_Functor.map(dictFunctor)(function (v2) {
                  return new Data_Tuple.Tuple(v2, v1.value1);
              })(v(v1.value0));
          };
      }, function (v) {
          return function (v1) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.Tuple.create(v1.value0))(v(v1.value1));
          };
      });
  };
  var invariantStar = function (dictInvariant) {
      return new Data_Functor_Invariant.Invariant(function (f) {
          return function (g) {
              return function (v) {
                  return function ($73) {
                      return Data_Functor_Invariant.imap(dictInvariant)(f)(g)(v($73));
                  };
              };
          };
      });
  };
  var functorStar = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function ($74) {
                  return Data_Functor.map(dictFunctor)(f)(v($74));
              };
          };
      });
  };
  var distributiveStar = function (dictDistributive) {
      return new Data_Distributive.Distributive(function () {
          return functorStar(dictDistributive["__superclass_Data.Functor.Functor_0"]());
      }, function (dictFunctor) {
          return function (f) {
              return function ($75) {
                  return Data_Distributive.distribute(distributiveStar(dictDistributive))(dictFunctor)(Data_Functor.map(dictFunctor)(f)($75));
              };
          };
      }, function (dictFunctor) {
          return function (f) {
              return function (a) {
                  return Data_Distributive.collect(dictDistributive)(dictFunctor)(function ($76) {
                      return (function (v) {
                          return Data_Function.apply(v)(a);
                      })(unStar($76));
                  })(f);
              };
          };
      });
  };
  var closedStar = function (dictDistributive) {
      return new Data_Profunctor_Closed.Closed(function () {
          return profunctorStar(dictDistributive["__superclass_Data.Functor.Functor_0"]());
      }, function (v) {
          return function (g) {
              return Data_Distributive.distribute(dictDistributive)(Data_Functor.functorFn)(function ($77) {
                  return v(g($77));
              });
          };
      });
  };
  var choiceStar = function (dictApplicative) {
      return new Data_Profunctor_Choice.Choice(function () {
          return profunctorStar((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]());
      }, function (v) {
          return Data_Function.apply(Star)(Data_Either.either(function ($78) {
              return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Either.Left.create)(v($78));
          })(function ($79) {
              return Control_Applicative.pure(dictApplicative)(Data_Either.Right.create($79));
          }));
      }, function (v) {
          return Data_Function.apply(Star)(Data_Either.either(function ($80) {
              return Control_Applicative.pure(dictApplicative)(Data_Either.Left.create($80));
          })(function ($81) {
              return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Either.Right.create)(v($81));
          }));
      });
  };
  var categoryStar = function (dictMonad) {
      return new Control_Category.Category(function () {
          return semigroupoidStar(dictMonad["__superclass_Control.Bind.Bind_1"]());
      }, Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]()));
  };
  var applyStar = function (dictApply) {
      return new Control_Apply.Apply(function () {
          return functorStar(dictApply["__superclass_Data.Functor.Functor_0"]());
      }, function (v) {
          return function (v1) {
              return function (a) {
                  return Control_Apply.apply(dictApply)(v(a))(v1(a));
              };
          };
      });
  };
  var bindStar = function (dictBind) {
      return new Control_Bind.Bind(function () {
          return applyStar(dictBind["__superclass_Control.Apply.Apply_0"]());
      }, function (v) {
          return function (f) {
              return function (x) {
                  return Control_Bind.bind(dictBind)(v(x))(function (a) {
                      return unStar(f(a))(x);
                  });
              };
          };
      });
  };
  var applicativeStar = function (dictApplicative) {
      return new Control_Applicative.Applicative(function () {
          return applyStar(dictApplicative["__superclass_Control.Apply.Apply_0"]());
      }, function (a) {
          return function (v) {
              return Control_Applicative.pure(dictApplicative)(a);
          };
      });
  };
  var monadStar = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStar(dictMonad["__superclass_Control.Applicative.Applicative_0"]());
      }, function () {
          return bindStar(dictMonad["__superclass_Control.Bind.Bind_1"]());
      });
  };
  var altStar = function (dictAlt) {
      return new Control_Alt.Alt(function () {
          return functorStar(dictAlt["__superclass_Data.Functor.Functor_0"]());
      }, function (v) {
          return function (v1) {
              return function (a) {
                  return Control_Alt.alt(dictAlt)(v(a))(v1(a));
              };
          };
      });
  };
  var plusStar = function (dictPlus) {
      return new Control_Plus.Plus(function () {
          return altStar(dictPlus["__superclass_Control.Alt.Alt_0"]());
      }, function (v) {
          return Control_Plus.empty(dictPlus);
      });
  };
  var alternativeStar = function (dictAlternative) {
      return new Control_Alternative.Alternative(function () {
          return applicativeStar(dictAlternative["__superclass_Control.Applicative.Applicative_0"]());
      }, function () {
          return plusStar(dictAlternative["__superclass_Control.Plus.Plus_1"]());
      });
  };
  var monadZeroStar = function (dictMonadZero) {
      return new Control_MonadZero.MonadZero(function () {
          return alternativeStar(dictMonadZero["__superclass_Control.Alternative.Alternative_1"]());
      }, function () {
          return monadStar(dictMonadZero["__superclass_Control.Monad.Monad_0"]());
      });
  };
  var monadPlusStar = function (dictMonadPlus) {
      return new Control_MonadPlus.MonadPlus(function () {
          return monadZeroStar(dictMonadPlus["__superclass_Control.MonadZero.MonadZero_0"]());
      });
  };
  exports["Star"] = Star;
  exports["unStar"] = unStar;
  exports["semigroupoidStar"] = semigroupoidStar;
  exports["categoryStar"] = categoryStar;
  exports["functorStar"] = functorStar;
  exports["invariantStar"] = invariantStar;
  exports["applyStar"] = applyStar;
  exports["applicativeStar"] = applicativeStar;
  exports["bindStar"] = bindStar;
  exports["monadStar"] = monadStar;
  exports["altStar"] = altStar;
  exports["plusStar"] = plusStar;
  exports["alternativeStar"] = alternativeStar;
  exports["monadZeroStar"] = monadZeroStar;
  exports["monadPlusStar"] = monadPlusStar;
  exports["distributiveStar"] = distributiveStar;
  exports["profunctorStar"] = profunctorStar;
  exports["strongStar"] = strongStar;
  exports["choiceStar"] = choiceStar;
  exports["closedStar"] = closedStar;
})(PS["Data.Profunctor.Star"] = PS["Data.Profunctor.Star"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_List = PS["Data.List"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Free = function (x) {
      return x;
  };
  var showFree = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(Free " + (Data_Show.show(Data_List.showList(Data_List.showList(dictShow)))(v) + ")");
      });
  };
  var semiringFree = new Data_Semiring.Semiring(function (v) {
      return function (v1) {
          return Data_Semigroup.append(Data_List.semigroupList)(v)(v1);
      };
  }, function (v) {
      return function (v1) {
          return Control_Bind.bind(Data_List.bindList)(v)(function (v2) {
              return Control_Bind.bind(Data_List.bindList)(v1)(function (v3) {
                  return Control_Applicative.pure(Data_List.applicativeList)(Data_Semigroup.append(Data_List.semigroupList)(v2)(v3));
              });
          });
      };
  }, Data_List.singleton(Data_List.Nil.value), Data_List.Nil.value);
  var runFree = function (v) {
      return v;
  };
  var liftFree = function (dictSemiring) {
      return function (f) {
          return function (v) {
              return Data_Foldable.sum(Data_List.foldableList)(dictSemiring)(Data_Functor.map(Data_List.functorList)(function ($59) {
                  return Data_Foldable.product(Data_List.foldableList)(dictSemiring)(Data_Functor.map(Data_List.functorList)(f)($59));
              })(v));
          };
      };
  };
  var functorFree = new Data_Functor.Functor(function (fn) {
      return function (v) {
          return Data_Function.apply(Free)(Data_Functor.map(Data_List.functorList)(Data_Functor.map(Data_List.functorList)(fn))(v));
      };
  });
  var free = function (a) {
      return Data_List.singleton(Data_List.singleton(a));
  };
  var lowerFree = function (dictSemiring) {
      return function (f) {
          return function (a) {
              return f(free(a));
          };
      };
  };
  var foldableFree = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (fn) {
          return function (v) {
              return Data_Function.apply(Data_Foldable.fold(Data_List.foldableList)(dictMonoid))(Data_Foldable.foldMap(Data_List.foldableList)(Data_List.monoidList)(Data_Functor.map(Data_List.functorList)(fn))(v));
          };
      };
  }, function (fn) {
      return function (accum) {
          return function (v) {
              return Data_Foldable.foldl(Data_List.foldableList)(Data_Foldable.foldl(Data_List.foldableList)(fn))(accum)(v);
          };
      };
  }, function (fn) {
      return function (accum) {
          return function (v) {
              return Data_Foldable.foldr(Data_List.foldableList)(Data_Function.apply(Data_Function.flip)(Data_Foldable.foldr(Data_List.foldableList)(fn)))(accum)(v);
          };
      };
  });
  var traversableFree = new Data_Traversable.Traversable(function () {
      return foldableFree;
  }, function () {
      return functorFree;
  }, function (dictApplicative) {
      return function (v) {
          return Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Free)(Data_Function.apply(Data_Traversable.sequence(Data_List.traversableList)(dictApplicative))(Data_Functor.map(Data_List.functorList)(Data_Traversable.sequence(Data_List.traversableList)(dictApplicative))(v)));
      };
  }, function (dictApplicative) {
      return function (fn) {
          return function (freeA) {
              return Data_Traversable.sequence(traversableFree)(dictApplicative)(Data_Functor.map(functorFree)(fn)(freeA));
          };
      };
  });
  var eqFree = function (dictEq) {
      return new Data_Eq.Eq(function (v) {
          return function (v1) {
              return Data_Eq.eq(Data_List.eqList(Data_List.eqList(dictEq)))(v)(v1);
          };
      });
  };
  var ordFree = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqFree(dictOrd["__superclass_Data.Eq.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Data_Ord.compare(Data_List.ordList(Data_List.ordList(dictOrd)))(v)(v1);
          };
      });
  };
  var applyFree = new Control_Apply.Apply(function () {
      return functorFree;
  }, function (v) {
      return function (v1) {
          return Data_Function.apply(Free)(Control_Bind.bind(Data_List.bindList)(v)(function (v2) {
              return Control_Bind.bind(Data_List.bindList)(v1)(function (v3) {
                  return Data_Function.apply(Control_Applicative.pure(Data_List.applicativeList))(Control_Apply.apply(Data_List.applyList)(v2)(v3));
              });
          }));
      };
  });
  var applicativeFree = new Control_Applicative.Applicative(function () {
      return applyFree;
  }, free);
  exports["free"] = free;
  exports["liftFree"] = liftFree;
  exports["lowerFree"] = lowerFree;
  exports["runFree"] = runFree;
  exports["showFree"] = showFree;
  exports["eqFree"] = eqFree;
  exports["ordFree"] = ordFree;
  exports["semiringFree"] = semiringFree;
  exports["functorFree"] = functorFree;
  exports["applyFree"] = applyFree;
  exports["applicativeFree"] = applicativeFree;
  exports["foldableFree"] = foldableFree;
  exports["traversableFree"] = traversableFree;
})(PS["Data.Semiring.Free"] = PS["Data.Semiring.Free"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_Partial = PS["Data.Array.Partial"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List_1 = PS["Data.List"];
  var Data_List_1 = PS["Data.List"];
  var Data_Map = PS["Data.Map"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Ord = PS["Data.Ord"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Unit = PS["Data.Unit"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ordering = PS["Data.Ordering"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Semiring = PS["Data.Semiring"];        
  var $$Set = (function () {
      function Set(value0) {
          this.value0 = value0;
      };
      Set.create = function (value0) {
          return new Set(value0);
      };
      return Set;
  })();
  var union = function (dictOrd) {
      return function (v) {
          return function (v1) {
              return new $$Set(Data_Map.union(dictOrd)(v.value0)(v1.value0));
          };
      };
  };
  var toList = function (v) {
      return Data_Map.keys(v.value0);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function ($59) {
          return Data_List_1.toUnfoldable(dictUnfoldable)(toList($59));
      };
  };
  var size = function (v) {
      return Data_Map.size(v.value0);
  };
  var singleton = function (a) {
      return new $$Set(Data_Map.singleton(a)(Data_Unit.unit));
  };
  var showSet = function (dictShow) {
      return new Data_Show.Show(function (s) {
          return "(fromFoldable " + (Data_Show.show(Data_List_1.showList(dictShow))(toList(s)) + ")");
      });
  };
  var semigroupSet = function (dictOrd) {
      return new Data_Semigroup.Semigroup(union(dictOrd));
  };
  var member = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map.member(dictOrd)(a)(v.value0);
          };
      };
  };
  var isEmpty = function (v) {
      return Data_Map.isEmpty(v.value0);
  };
  var insert = function (dictOrd) {
      return function (a) {
          return function (v) {
              return new $$Set(Data_Map.insert(dictOrd)(a)(Data_Unit.unit)(v.value0));
          };
      };
  };
  var foldableSet = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function ($60) {
              return Data_Foldable.foldMap(Data_List_1.foldableList)(dictMonoid)(f)(toList($60));
          };
      };
  }, function (f) {
      return function (x) {
          return function ($61) {
              return Data_Foldable.foldl(Data_List_1.foldableList)(f)(x)(toList($61));
          };
      };
  }, function (f) {
      return function (x) {
          return function ($62) {
              return Data_Foldable.foldr(Data_List_1.foldableList)(f)(x)(toList($62));
          };
      };
  });
  var eqSet = function (dictEq) {
      return new Data_Eq.Eq(function (v) {
          return function (v1) {
              return Data_Eq.eq(Data_Map.eqMap(dictEq)(Data_Eq.eqUnit))(v.value0)(v1.value0);
          };
      });
  };
  var ordSet = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqSet(dictOrd["__superclass_Data.Eq.Eq_0"]());
      }, function (s1) {
          return function (s2) {
              return Data_Ord.compare(Data_List_1.ordList(dictOrd))(toList(s1))(toList(s2));
          };
      });
  };
  var empty = new $$Set(Data_Map.empty);
  var fromFoldable = function (dictFoldable) {
      return function (dictOrd) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (a) {
                  return insert(dictOrd)(a)(m);
              };
          })(empty);
      };
  };
  var intersection = function (dictOrd) {
      return function (s1) {
          return function (s2) {
              var toArray = function ($63) {
                  return Data_Array.fromFoldable(Data_List_1.foldableList)(toList($63));
              };
              var rs = toArray(s2);
              var rl = Data_Array.length(rs);
              var ls = toArray(s1);
              var ll = Data_Array.length(ls);
              var intersect = function (acc) {
                  var go = Partial_Unsafe.unsafePartial(function (dictPartial) {
                      return function (l) {
                          return function (r) {
                              var $52 = l < ll && r < rl;
                              if ($52) {
                                  var $53 = Data_Ord.compare(dictOrd)(Data_Array_Partial.unsafeIndex(dictPartial)(ls)(l))(Data_Array_Partial.unsafeIndex(dictPartial)(rs)(r));
                                  if ($53 instanceof Data_Ordering.EQ) {
                                      return function __do() {
                                          Data_Array_ST.pushSTArray(acc)(Data_Array_Partial.unsafeIndex(dictPartial)(ls)(l))();
                                          return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(new Data_Either.Left({
                                              a: l + 1 | 0, 
                                              b: r + 1 | 0
                                          }))();
                                      };
                                  };
                                  if ($53 instanceof Data_Ordering.LT) {
                                      return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(new Data_Either.Left({
                                          a: l + 1 | 0, 
                                          b: r
                                      }));
                                  };
                                  if ($53 instanceof Data_Ordering.GT) {
                                      return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(new Data_Either.Left({
                                          a: l, 
                                          b: r + 1 | 0
                                      }));
                                  };
                                  throw new Error("Failed pattern match at Data.Set line 160, column 12 - line 165, column 43: " + [ $53.constructor.name ]);
                              };
                              if (!$52) {
                                  return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(new Data_Either.Right(acc));
                              };
                              throw new Error("Failed pattern match at Data.Set line 159, column 7 - line 166, column 25: " + [ $52.constructor.name ]);
                          };
                      };
                  });
                  return Control_Monad_Rec_Class.tailRecM2(Control_Monad_Rec_Class.monadRecEff)(go)(0)(0);
              };
              return Data_Function.apply(fromFoldable(Data_Foldable.foldableArray)(dictOrd))(Control_Monad_Eff.runPure(Data_Array_ST.runSTArray(Control_Bind.bind(Control_Monad_Eff.bindEff)(Data_Array_ST.emptySTArray)(intersect))));
          };
      };
  };
  var map = function (dictOrd) {
      return function (f) {
          return Data_Foldable.foldl(foldableSet)(function (m) {
              return function (a) {
                  return insert(dictOrd)(f(a))(m);
              };
          })(empty);
      };
  };
  var monoidSet = function (dictOrd) {
      return new Data_Monoid.Monoid(function () {
          return semigroupSet(dictOrd);
      }, empty);
  };
  var unions = function (dictFoldable) {
      return function (dictOrd) {
          return Data_Foldable.foldl(dictFoldable)(union(dictOrd))(empty);
      };
  };
  var $$delete = function (dictOrd) {
      return function (a) {
          return function (v) {
              return new $$Set(Data_Map["delete"](dictOrd)(a)(v.value0));
          };
      };
  };
  var difference = function (dictOrd) {
      return function (s1) {
          return function (s2) {
              return Data_Foldable.foldl(Data_List_1.foldableList)(Data_Function.flip($$delete(dictOrd)))(s1)(toList(s2));
          };
      };
  };
  var subset = function (dictOrd) {
      return function (s1) {
          return function (s2) {
              return Data_Function.apply(isEmpty)(difference(dictOrd)(s1)(s2));
          };
      };
  };
  var properSubset = function (dictOrd) {
      return function (s1) {
          return function (s2) {
              return subset(dictOrd)(s1)(s2) && Data_Eq.notEq(eqSet(dictOrd["__superclass_Data.Eq.Eq_0"]()))(s1)(s2);
          };
      };
  };
  var checkValid = function (v) {
      return Data_Map.checkValid(v.value0);
  };
  exports["checkValid"] = checkValid;
  exports["delete"] = $$delete;
  exports["difference"] = difference;
  exports["empty"] = empty;
  exports["fromFoldable"] = fromFoldable;
  exports["insert"] = insert;
  exports["intersection"] = intersection;
  exports["isEmpty"] = isEmpty;
  exports["map"] = map;
  exports["member"] = member;
  exports["properSubset"] = properSubset;
  exports["singleton"] = singleton;
  exports["size"] = size;
  exports["subset"] = subset;
  exports["toUnfoldable"] = toUnfoldable;
  exports["union"] = union;
  exports["unions"] = unions;
  exports["eqSet"] = eqSet;
  exports["showSet"] = showSet;
  exports["ordSet"] = ordSet;
  exports["monoidSet"] = monoidSet;
  exports["semigroupSet"] = semigroupSet;
  exports["foldableSet"] = foldableSet;
})(PS["Data.Set"] = PS["Data.Set"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.StrMap

  exports._copy = function (m) {
    var r = {};
    for (var k in m) {
      if (m.hasOwnProperty(k)) {
        r[k] = m[k];
      }
    }
    return r;
  };

  exports._copyEff = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (m.hasOwnProperty(k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f;
  };

  // jshint maxparams: 2
  exports._fmapStrMap = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (m0.hasOwnProperty(k)) {
        m[k] = f(m0[k]);
      }
    }
    return m;
  };

  // jshint maxparams: 1
  exports._foldM = function (bind) {
    return function (f) {
      return function (mz) {
        return function (m) {
          var acc = mz;
          function g(k) {
            return function (z) {
              return f(z)(k)(m[k]);
            };
          }
          for (var k in m) {
            if (m.hasOwnProperty(k)) {
              acc = bind(acc)(g(k));
            }
          }
          return acc;
        };
      };
    };
  };

  // jshint maxparams: 4
  exports._foldSCStrMap = function (m, z, f, fromMaybe) {
    for (var k in m) {
      if (m.hasOwnProperty(k)) {
        var maybeR = f(z)(k)(m[k]);
        var r = fromMaybe(null)(maybeR);
        if (r === null) return z;
        else z = r;
      }
    }
    return z;
  };

  // jshint maxparams: 1
  exports.all = function (f) {
    return function (m) {
      for (var k in m) {
        if (m.hasOwnProperty(k) && !f(k)(m[k])) return false;
      }
      return true;
    };
  };

  exports.size = function (m) {
    var s = 0;
    for (var k in m) {
      if (m.hasOwnProperty(k)) {
        ++s;
      }
    }
    return s;
  };

  // jshint maxparams: 4
  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  // jshint maxparams: 2
  exports._unsafeDeleteStrMap = function (m, k) {
    delete m[k];
    return m;
  };

  // jshint maxparams: 4
  exports._lookupST = function (no, yes, k, m) {
    return function () {
      return k in m ? yes(m[k]) : no;
    };
  };

  function _collect(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (m.hasOwnProperty(k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }

  exports._collect = _collect;

  exports.keys = Object.keys || _collect(function (k) {
    return function () { return k; };
  });
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.StrMap.ST

  exports["new"] = function () {
    return {};
  };

  exports.peekImpl = function (just) {
    return function (nothing) {
      return function (m) {
        return function (k) {
          return function () {
            return {}.hasOwnProperty.call(m, k) ? just(m[k]) : nothing;
          };
        };
      };
    };
  };

  exports.poke = function (m) {
    return function (k) {
      return function (v) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };

  exports["delete"] = function (m) {
    return function (k) {
      return function () {
        delete m[k];
        return m;
      };
    };
  };
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.StrMap.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];        
  var peek = $foreign.peekImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["peek"] = peek;
  exports["delete"] = $foreign["delete"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.StrMap"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_StrMap_ST = PS["Data.StrMap.ST"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Bind = PS["Control.Bind"];        
  var values = function ($38) {
      return Data_List.fromFoldable(Data_Foldable.foldableArray)($foreign._collect(function (v) {
          return function (v1) {
              return v1;
          };
      })($38));
  };
  var toList = function ($39) {
      return Data_List.fromFoldable(Data_Foldable.foldableArray)($foreign._collect(Data_Tuple.Tuple.create)($39));
  };
  var thawST = $foreign._copyEff;
  var showStrMap = function (dictShow) {
      return new Data_Show.Show(function (m) {
          return "fromList " + Data_Show.show(Data_List.showList(Data_Tuple.showTuple(Data_Show.showString)(dictShow)))(toList(m));
      });
  };
  var pureST = function (f) {
      return Control_Monad_Eff.runPure($foreign.runST(f));
  };
  var singleton = function (k) {
      return function (v) {
          return pureST(function __do() {
              var v1 = Data_StrMap_ST["new"]();
              Data_StrMap_ST.poke(v1)(k)(v)();
              return v1;
          });
      };
  };
  var mutate = function (f) {
      return function (m) {
          return pureST(function __do() {
              var v = thawST(m)();
              f(v)();
              return v;
          });
      };
  };
  var member = Data_Function_Uncurried.runFn4($foreign._lookup)(false)(Data_Function["const"](true));
  var lookup = Data_Function_Uncurried.runFn4($foreign._lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var isSubmap = function (dictEq) {
      return function (m1) {
          return function (m2) {
              var f = function (k) {
                  return function (v) {
                      return Data_Function_Uncurried.runFn4($foreign._lookup)(false)(Data_Eq.eq(dictEq)(v))(k)(m2);
                  };
              };
              return $foreign.all(f)(m1);
          };
      };
  };
  var isEmpty = $foreign.all(function (v) {
      return function (v1) {
          return false;
      };
  });
  var insert = function (k) {
      return function (v) {
          return mutate(function (s) {
              return Data_StrMap_ST.poke(s)(k)(v);
          });
      };
  };
  var functorStrMap = new Data_Functor.Functor(function (f) {
      return function (m) {
          return Data_Function_Uncurried.runFn2($foreign._fmapStrMap)(m)(f);
      };
  });
  var fromFoldableWith = function (dictFoldable) {
      return function (f) {
          return function (l) {
              return pureST(function __do() {
                  var v = Data_StrMap_ST["new"]();
                  Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(dictFoldable)(l)(function (v1) {
                      return Control_Bind.bind(Control_Monad_Eff.bindEff)(Data_Function_Uncurried.runFn4($foreign._lookupST)(v1.value1)(f(v1.value1))(v1.value0)(v))(Data_StrMap_ST.poke(v)(v1.value0));
                  })();
                  return v;
              });
          };
      };
  };
  var fromListWith = fromFoldableWith(Data_List.foldableList);
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return pureST(function __do() {
              var v = Data_StrMap_ST["new"]();
              Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(dictFoldable)(l)(function (v1) {
                  return Data_StrMap_ST.poke(v)(v1.value0)(v1.value1);
              })();
              return v;
          });
      };
  };
  var fromList = fromFoldable(Data_List.foldableList);
  var freezeST = $foreign._copyEff;
  var foldMaybe = function (f) {
      return function (z) {
          return function (m) {
              return Data_Function_Uncurried.runFn4($foreign._foldSCStrMap)(m)(z)(f)(Data_Maybe.fromMaybe);
          };
      };
  };
  var foldM = function (dictMonad) {
      return function (f) {
          return function (z) {
              return $foreign._foldM(Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]()))(f)(Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(z));
          };
      };
  };
  var semigroupStrMap = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (m1) {
          return function (m2) {
              return mutate(function (s1) {
                  return foldM(Control_Monad_Eff.monadEff)(function (s2) {
                      return function (k) {
                          return function (v2) {
                              return Data_StrMap_ST.poke(s2)(k)(Data_Function_Uncurried.runFn4($foreign._lookup)(v2)(function (v1) {
                                  return Data_Semigroup.append(dictSemigroup)(v1)(v2);
                              })(k)(m2));
                          };
                      };
                  })(s1)(m1);
              })(m2);
          };
      });
  };
  var monoidStrMap = function (dictSemigroup) {
      return new Data_Monoid.Monoid(function () {
          return semigroupStrMap(dictSemigroup);
      }, $foreign.empty);
  };
  var union = function (m) {
      return mutate(function (s) {
          return foldM(Control_Monad_Eff.monadEff)(Data_StrMap_ST.poke)(s)(m);
      });
  };
  var unions = Data_Foldable.foldl(Data_List.foldableList)(union)($foreign.empty);
  var fold = $foreign._foldM(Data_Function.applyFlipped);
  var foldMap = function (dictMonoid) {
      return function (f) {
          return fold(function (acc) {
              return function (k) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(acc)(f(k)(v));
                  };
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  };
  var foldableStrMap = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return foldMap(dictMonoid)(Data_Function["const"](f));
      };
  }, function (f) {
      return fold(function (z) {
          return function (v) {
              return f(z);
          };
      });
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List.foldableList)(f)(z)(values(m));
          };
      };
  });
  var traversableStrMap = new Data_Traversable.Traversable(function () {
      return foldableStrMap;
  }, function () {
      return functorStrMap;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableStrMap)(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          return function (ms) {
              return Data_Foldable.foldr(Data_List.foldableList)(function (x) {
                  return function (acc) {
                      return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(union)(x))(acc);
                  };
              })(Control_Applicative.pure(dictApplicative)($foreign.empty))(Data_Functor.map(Data_List.functorList)(Data_Functor.map((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Data_Tuple.uncurry(singleton)))(Data_Functor.map(Data_List.functorList)(Data_Traversable.traverse(Data_Tuple.traversableTuple)(dictApplicative)(f))(toList(ms))));
          };
      };
  });
  var eqStrMap = function (dictEq) {
      return new Data_Eq.Eq(function (m1) {
          return function (m2) {
              return isSubmap(dictEq)(m1)(m2) && isSubmap(dictEq)(m2)(m1);
          };
      });
  };
  var $$delete = function (k) {
      return mutate(function (s) {
          return Data_StrMap_ST["delete"](s)(k);
      });
  };
  var pop = function (k) {
      return function (m) {
          return Data_Functor.mapFlipped(Data_Maybe.functorMaybe)(lookup(k)(m))(function (a) {
              return new Data_Tuple.Tuple(a, $$delete(k)(m));
          });
      };
  };
  var alter = function (f) {
      return function (k) {
          return function (m) {
              var $36 = f(lookup(k)(m));
              if ($36 instanceof Data_Maybe.Nothing) {
                  return $$delete(k)(m);
              };
              if ($36 instanceof Data_Maybe.Just) {
                  return insert(k)($36.value0)(m);
              };
              throw new Error("Failed pattern match at Data.StrMap line 185, column 15 - line 187, column 25: " + [ $36.constructor.name ]);
          };
      };
  };
  var update = function (f) {
      return function (k) {
          return function (m) {
              return alter(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
          };
      };
  };
  exports["alter"] = alter;
  exports["delete"] = $$delete;
  exports["fold"] = fold;
  exports["foldM"] = foldM;
  exports["foldMap"] = foldMap;
  exports["foldMaybe"] = foldMaybe;
  exports["freezeST"] = freezeST;
  exports["fromFoldable"] = fromFoldable;
  exports["fromFoldableWith"] = fromFoldableWith;
  exports["fromList"] = fromList;
  exports["fromListWith"] = fromListWith;
  exports["insert"] = insert;
  exports["isEmpty"] = isEmpty;
  exports["isSubmap"] = isSubmap;
  exports["lookup"] = lookup;
  exports["member"] = member;
  exports["pop"] = pop;
  exports["pureST"] = pureST;
  exports["singleton"] = singleton;
  exports["thawST"] = thawST;
  exports["toList"] = toList;
  exports["union"] = union;
  exports["unions"] = unions;
  exports["update"] = update;
  exports["values"] = values;
  exports["functorStrMap"] = functorStrMap;
  exports["foldableStrMap"] = foldableStrMap;
  exports["traversableStrMap"] = traversableStrMap;
  exports["eqStrMap"] = eqStrMap;
  exports["showStrMap"] = showStrMap;
  exports["semigroupStrMap"] = semigroupStrMap;
  exports["monoidStrMap"] = monoidStrMap;
  exports["all"] = $foreign.all;
  exports["empty"] = $foreign.empty;
  exports["keys"] = $foreign.keys;
  exports["runST"] = $foreign.runST;
  exports["size"] = $foreign.size;
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.StrMap.ST.Unsafe

  exports.unsafeGet = function (m) {
    return function () {
      return m;
    };
  };
})(PS["Data.StrMap.ST.Unsafe"] = PS["Data.StrMap.ST.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.StrMap.ST.Unsafe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_StrMap_ST = PS["Data.StrMap.ST"];
  exports["unsafeGet"] = $foreign.unsafeGet;
})(PS["Data.StrMap.ST.Unsafe"] = PS["Data.StrMap.ST.Unsafe"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.StrMap.Unsafe

  exports.unsafeIndex = function (m) {
    return function (k) {
      return m[k];
    };
  };
})(PS["Data.StrMap.Unsafe"] = PS["Data.StrMap.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.StrMap.Unsafe"];
  var Data_StrMap = PS["Data.StrMap"];
  exports["unsafeIndex"] = $foreign.unsafeIndex;
})(PS["Data.StrMap.Unsafe"] = PS["Data.StrMap.Unsafe"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.String.Regex

  exports["showRegex'"] = function (r) {
    return "" + r;
  };

  exports["regex'"] = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports.source = function (r) {
    return r.source;
  };

  exports.flags = function (r) {
    return {
      multiline: r.multiline,
      ignoreCase: r.ignoreCase,
      global: r.global,
      sticky: !!r.sticky,
      unicode: !!r.unicode
    };
  };

  exports.test = function (r) {
    return function (s) {
      var lastIndex = r.lastIndex;
      var result = r.test(s);
      r.lastIndex = lastIndex;
      return result;
    };
  };

  exports._match = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var m = s.match(r);
          if (m == null) {
            return nothing;
          } else {
            var list = [];
            for (var i = 0; i < m.length; i++) {
              list.push(m[i] == null ? nothing : just(m[i]));
            }
            return just(list);
          }
        };
      };
    };
  };

  exports.replace = function (r) {
    return function (s1) {
      return function (s2) {
        return s2.replace(r, s1);
      };
    };
  };

  exports["replace'"] = function (r) {
    return function (f) {
      return function (s2) {
        return s2.replace(r, function (match) {
          return f(match)(Array.prototype.splice.call(arguments, 1, arguments.length - 3));
        });
      };
    };
  };

  exports._search = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var result = s.search(r);
          return result === -1 ? nothing : just(result);
        };
      };
    };
  };

  exports.split = function (r) {
    return function (s) {
      return s.split(r);
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Data.String.Regex"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Function = PS["Data.Function"];        
  var showRegex = new Data_Show.Show($foreign["showRegex'"]);
  var search = $foreign._search(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var renderFlags = function (f) {
      return (function () {
          if (f.global) {
              return "g";
          };
          if (!f.global) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 72, column 4 - line 72, column 32: " + [ f.global.constructor.name ]);
      })() + ((function () {
          if (f.ignoreCase) {
              return "i";
          };
          if (!f.ignoreCase) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 73, column 4 - line 73, column 36: " + [ f.ignoreCase.constructor.name ]);
      })() + ((function () {
          if (f.multiline) {
              return "m";
          };
          if (!f.multiline) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 74, column 4 - line 74, column 35: " + [ f.multiline.constructor.name ]);
      })() + ((function () {
          if (f.sticky) {
              return "y";
          };
          if (!f.sticky) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 75, column 4 - line 75, column 32: " + [ f.sticky.constructor.name ]);
      })() + (function () {
          if (f.unicode) {
              return "u";
          };
          if (!f.unicode) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 76, column 4 - line 76, column 33: " + [ f.unicode.constructor.name ]);
      })())));
  };
  var regex = function (s) {
      return function (f) {
          return Data_Function.apply($foreign["regex'"](Data_Either.Left.create)(Data_Either.Right.create)(s))(renderFlags(f));
      };
  };
  var parseFlags = function (s) {
      return {
          global: Data_String.contains("g")(s), 
          ignoreCase: Data_String.contains("i")(s), 
          multiline: Data_String.contains("m")(s), 
          sticky: Data_String.contains("y")(s), 
          unicode: Data_String.contains("u")(s)
      };
  };
  var noFlags = {
      global: false, 
      ignoreCase: false, 
      multiline: false, 
      sticky: false, 
      unicode: false
  };
  var match = $foreign._match(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["match"] = match;
  exports["noFlags"] = noFlags;
  exports["parseFlags"] = parseFlags;
  exports["regex"] = regex;
  exports["renderFlags"] = renderFlags;
  exports["search"] = search;
  exports["showRegex"] = showRegex;
  exports["flags"] = $foreign.flags;
  exports["replace"] = $foreign.replace;
  exports["replace'"] = $foreign["replace'"];
  exports["source"] = $foreign.source;
  exports["split"] = $foreign.split;
  exports["test"] = $foreign.test;
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Data_Tuple = PS["Data.Tuple"];        
  var uncurry9 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0.value0.value0.value0.value0.value0.value0.value0)(v.value0.value0.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value1)(v.value0.value0.value0.value1)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var uncurry8 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0.value0.value0.value0.value0.value0.value0)(v.value0.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value1)(v.value0.value0.value0.value1)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var uncurry7 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0.value0.value0.value0.value0.value0)(v.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value1)(v.value0.value0.value0.value1)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var uncurry6 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0.value0.value0.value0.value0)(v.value0.value0.value0.value0.value1)(v.value0.value0.value0.value1)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var uncurry5 = function (f) {
      return function (v) {
          return f(v.value0.value0.value0.value0)(v.value0.value0.value0.value1)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var uncurry4 = function (f) {
      return function (v) {
          return f(v.value0.value0.value0)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var uncurry3 = function (f) {
      return function (v) {
          return f(v.value0.value0)(v.value0.value1)(v.value1);
      };
  };
  var uncurry2 = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var uncurry10 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0.value0.value0.value0.value0.value0.value0.value0.value0)(v.value0.value0.value0.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value1)(v.value0.value0.value0.value1)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var tuple9 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h), i);
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple8 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h);
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple7 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g);
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple6 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f);
                      };
                  };
              };
          };
      };
  };
  var tuple5 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e);
                  };
              };
          };
      };
  };
  var tuple4 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d);
              };
          };
      };
  };
  var tuple3 = function (a) {
      return function (b) {
          return function (c) {
              return new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c);
          };
      };
  };
  var tuple2 = Data_Tuple.Tuple.create;
  var tuple10 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return function (j) {
                                          return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h), i), j);
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry9 = function (f$prime) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return function (e) {
                          return function (f) {
                              return function (g) {
                                  return function (h) {
                                      return function (i) {
                                          return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h), i));
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry8 = function (f$prime) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return function (e) {
                          return function (f) {
                              return function (g) {
                                  return function (h) {
                                      return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h));
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry7 = function (f$prime) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return function (e) {
                          return function (f) {
                              return function (g) {
                                  return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry6 = function (f$prime) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return function (e) {
                          return function (f) {
                              return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f));
                          };
                      };
                  };
              };
          };
      };
  };
  var curry5 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return function (e) {
                          return f(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e));
                      };
                  };
              };
          };
      };
  };
  var curry4 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return f(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d));
                  };
              };
          };
      };
  };
  var curry3 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return f(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c));
              };
          };
      };
  };
  var curry2 = function (f) {
      return function (a) {
          return function (b) {
              return f(new Data_Tuple.Tuple(a, b));
          };
      };
  };
  var curry10 = function (f$prime) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return function (e) {
                          return function (f) {
                              return function (g) {
                                  return function (h) {
                                      return function (i) {
                                          return function (j) {
                                              return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h), i), j));
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  exports["curry10"] = curry10;
  exports["curry2"] = curry2;
  exports["curry3"] = curry3;
  exports["curry4"] = curry4;
  exports["curry5"] = curry5;
  exports["curry6"] = curry6;
  exports["curry7"] = curry7;
  exports["curry8"] = curry8;
  exports["curry9"] = curry9;
  exports["tuple10"] = tuple10;
  exports["tuple2"] = tuple2;
  exports["tuple3"] = tuple3;
  exports["tuple4"] = tuple4;
  exports["tuple5"] = tuple5;
  exports["tuple6"] = tuple6;
  exports["tuple7"] = tuple7;
  exports["tuple8"] = tuple8;
  exports["tuple9"] = tuple9;
  exports["uncurry10"] = uncurry10;
  exports["uncurry2"] = uncurry2;
  exports["uncurry3"] = uncurry3;
  exports["uncurry4"] = uncurry4;
  exports["uncurry5"] = uncurry5;
  exports["uncurry6"] = uncurry6;
  exports["uncurry7"] = uncurry7;
  exports["uncurry8"] = uncurry8;
  exports["uncurry9"] = uncurry9;
})(PS["Data.Tuple.Nested"] = PS["Data.Tuple.Nested"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];        
  var Invalid = (function () {
      function Invalid(value0) {
          this.value0 = value0;
      };
      Invalid.create = function (value0) {
          return new Invalid(value0);
      };
      return Invalid;
  })();
  var Valid = (function () {
      function Valid(value0) {
          this.value0 = value0;
      };
      Valid.create = function (value0) {
          return new Valid(value0);
      };
      return Valid;
  })();
  var unV = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Invalid) {
                  return v(v2.value0);
              };
              if (v2 instanceof Valid) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Validation.Semigroup line 35, column 1 - line 35, column 30: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var showV = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              if (v instanceof Invalid) {
                  return "(Invalid " + (Data_Show.show(dictShow)(v.value0) + ")");
              };
              if (v instanceof Valid) {
                  return "(Valid " + (Data_Show.show(dictShow1)(v.value0) + ")");
              };
              throw new Error("Failed pattern match at Data.Validation.Semigroup line 59, column 3 - line 60, column 3: " + [ v.constructor.name ]);
          });
      };
  };
  var isValid = function (v) {
      if (v instanceof Valid) {
          return true;
      };
      return false;
  };
  var invalid = Invalid.create;
  var functorV = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Invalid) {
              return new Invalid(v1.value0);
          };
          if (v1 instanceof Valid) {
              return new Valid(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Validation.Semigroup line 63, column 3 - line 63, column 36: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var eqV = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (v) {
              return function (v1) {
                  if (v instanceof Invalid && v1 instanceof Invalid) {
                      return Data_Eq.eq(dictEq)(v.value0)(v1.value0);
                  };
                  if (v instanceof Valid && v1 instanceof Valid) {
                      return Data_Eq.eq(dictEq1)(v.value0)(v1.value0);
                  };
                  return false;
              };
          });
      };
  };
  var ordV = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqV(dictOrd["__superclass_Data.Eq.Eq_0"]())(dictOrd1["__superclass_Data.Eq.Eq_0"]());
          }, function (v) {
              return function (v1) {
                  if (v instanceof Invalid && v1 instanceof Invalid) {
                      return Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                  };
                  if (v instanceof Invalid) {
                      return Data_Ordering.LT.value;
                  };
                  if (v instanceof Valid && v1 instanceof Valid) {
                      return Data_Ord.compare(dictOrd1)(v.value0)(v1.value0);
                  };
                  if (v instanceof Valid) {
                      return Data_Ordering.GT.value;
                  };
                  throw new Error("Failed pattern match at Data.Validation.Semigroup line 53, column 3 - line 53, column 60: " + [ v.constructor.name, v1.constructor.name ]);
              };
          });
      };
  };
  var applyV = function (dictSemigroup) {
      return new Control_Apply.Apply(function () {
          return functorV;
      }, function (v) {
          return function (v1) {
              if (v instanceof Invalid && v1 instanceof Invalid) {
                  return new Invalid(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
              };
              if (v instanceof Invalid) {
                  return new Invalid(v.value0);
              };
              if (v1 instanceof Invalid) {
                  return new Invalid(v1.value0);
              };
              if (v instanceof Valid && v1 instanceof Valid) {
                  return new Valid(v.value0(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Validation.Semigroup line 67, column 3 - line 67, column 63: " + [ v.constructor.name, v1.constructor.name ]);
          };
      });
  };
  var applicativeV = function (dictSemigroup) {
      return new Control_Applicative.Applicative(function () {
          return applyV(dictSemigroup);
      }, Valid.create);
  };
  exports["invalid"] = invalid;
  exports["isValid"] = isValid;
  exports["unV"] = unV;
  exports["eqV"] = eqV;
  exports["ordV"] = ordV;
  exports["showV"] = showV;
  exports["functorV"] = functorV;
  exports["applyV"] = applyV;
  exports["applicativeV"] = applicativeV;
})(PS["Data.Validation.Semigroup"] = PS["Data.Validation.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Alternative = PS["Control.Alternative"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Applicative = PS["Control.Applicative"];        
  var Valid = (function () {
      function Valid(value0) {
          this.value0 = value0;
      };
      Valid.create = function (value0) {
          return new Valid(value0);
      };
      return Valid;
  })();
  var Invalid = (function () {
      function Invalid(value0) {
          this.value0 = value0;
      };
      Invalid.create = function (value0) {
          return new Invalid(value0);
      };
      return Invalid;
  })();
  var unV = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Invalid) {
                  return v(v2.value0);
              };
              if (v2 instanceof Valid) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Validation.Semiring line 41, column 1 - line 41, column 30: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var showV = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              if (v instanceof Invalid) {
                  return "Invalid (" + (Data_Show.show(dictShow)(v.value0) + ")");
              };
              if (v instanceof Valid) {
                  return "Valid (" + (Data_Show.show(dictShow1)(v.value0) + ")");
              };
              throw new Error("Failed pattern match at Data.Validation.Semiring line 65, column 3 - line 66, column 3: " + [ v.constructor.name ]);
          });
      };
  };
  var isValid = function (v) {
      if (v instanceof Valid) {
          return true;
      };
      return false;
  };
  var invalid = Invalid.create;
  var functorV = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Invalid) {
              return new Invalid(v1.value0);
          };
          if (v1 instanceof Valid) {
              return new Valid(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Validation.Semiring line 69, column 3 - line 69, column 36: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var eqV = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (v) {
              return function (v1) {
                  if (v instanceof Invalid && v1 instanceof Invalid) {
                      return Data_Eq.eq(dictEq)(v.value0)(v1.value0);
                  };
                  if (v instanceof Valid && v1 instanceof Valid) {
                      return Data_Eq.eq(dictEq1)(v.value0)(v1.value0);
                  };
                  return false;
              };
          });
      };
  };
  var ordV = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqV(dictOrd["__superclass_Data.Eq.Eq_0"]())(dictOrd1["__superclass_Data.Eq.Eq_0"]());
          }, function (v) {
              return function (v1) {
                  if (v instanceof Invalid && v1 instanceof Invalid) {
                      return Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                  };
                  if (v instanceof Invalid) {
                      return Data_Ordering.LT.value;
                  };
                  if (v instanceof Valid && v1 instanceof Valid) {
                      return Data_Ord.compare(dictOrd1)(v.value0)(v1.value0);
                  };
                  if (v instanceof Valid) {
                      return Data_Ordering.GT.value;
                  };
                  throw new Error("Failed pattern match at Data.Validation.Semiring line 59, column 3 - line 59, column 60: " + [ v.constructor.name, v1.constructor.name ]);
              };
          });
      };
  };
  var applyV = function (dictSemiring) {
      return new Control_Apply.Apply(function () {
          return functorV;
      }, function (v) {
          return function (v1) {
              if (v instanceof Invalid && v1 instanceof Invalid) {
                  return new Invalid(Data_Semiring.mul(dictSemiring)(v.value0)(v1.value0));
              };
              if (v instanceof Invalid) {
                  return new Invalid(v.value0);
              };
              if (v1 instanceof Invalid) {
                  return new Invalid(v1.value0);
              };
              if (v instanceof Valid && v1 instanceof Valid) {
                  return new Valid(v.value0(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Validation.Semiring line 73, column 3 - line 73, column 62: " + [ v.constructor.name, v1.constructor.name ]);
          };
      });
  };
  var applicativeV = function (dictSemiring) {
      return new Control_Applicative.Applicative(function () {
          return applyV(dictSemiring);
      }, Valid.create);
  };
  var altV = function (dictSemiring) {
      return new Control_Alt.Alt(function () {
          return functorV;
      }, function (v) {
          return function (v1) {
              if (v instanceof Invalid && v1 instanceof Invalid) {
                  return new Invalid(Data_Semiring.add(dictSemiring)(v.value0)(v1.value0));
              };
              if (v instanceof Invalid) {
                  return v1;
              };
              if (v instanceof Valid) {
                  return new Valid(v.value0);
              };
              throw new Error("Failed pattern match at Data.Validation.Semiring line 82, column 3 - line 82, column 60: " + [ v.constructor.name, v1.constructor.name ]);
          };
      });
  };
  var plusV = function (dictSemiring) {
      return new Control_Plus.Plus(function () {
          return altV(dictSemiring);
      }, new Invalid(Data_Semiring.zero(dictSemiring)));
  };
  var alernativeV = function (dictSemiring) {
      return new Control_Alternative.Alternative(function () {
          return applicativeV(dictSemiring);
      }, function () {
          return plusV(dictSemiring);
      });
  };
  exports["invalid"] = invalid;
  exports["isValid"] = isValid;
  exports["unV"] = unV;
  exports["eqV"] = eqV;
  exports["ordV"] = ordV;
  exports["showV"] = showV;
  exports["functorV"] = functorV;
  exports["applyV"] = applyV;
  exports["applicativeV"] = applicativeV;
  exports["altV"] = altV;
  exports["plusV"] = plusV;
  exports["alernativeV"] = alernativeV;
})(PS["Data.Validation.Semiring"] = PS["Data.Validation.Semiring"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];        
  var Yoneda = function (x) {
      return x;
  };
  var runYoneda = function (v) {
      return function (k) {
          return v(k);
      };
  };
  var lowerYoneda = function (v) {
      return v(Control_Category.id(Control_Category.categoryFn));
  };
  var liftYoneda = function (dictFunctor) {
      return function (m) {
          return function (k) {
              return Data_Functor.map(dictFunctor)(k)(m);
          };
      };
  };
  var monadTransYoneda = new Control_Monad_Trans.MonadTrans(function (dictMonad) {
      return liftYoneda(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]());
  });
  var hoistYoneda = function (nat) {
      return function (v) {
          return Data_Functor.map(Data_Functor.functorFn)(nat)(v);
      };
  };
  var functorYoneda = new Data_Functor.Functor(function (f) {
      return function (m) {
          return function (k) {
              return runYoneda(m)(function ($26) {
                  return k(f($26));
              });
          };
      };
  });
  var extendYoneda = function (dictExtend) {
      return new Control_Extend.Extend(function () {
          return functorYoneda;
      }, function (f) {
          return function (v) {
              return function (k) {
                  return Control_Extend.extend(dictExtend)(function ($27) {
                      return k(f(liftYoneda(dictExtend["__superclass_Data.Functor.Functor_0"]())($27)));
                  })(v(Control_Category.id(Control_Category.categoryFn)));
              };
          };
      });
  };
  var comonadYoneda = function (dictComonad) {
      return new Control_Comonad.Comonad(function () {
          return extendYoneda(dictComonad["__superclass_Control.Extend.Extend_0"]());
      }, function ($28) {
          return Control_Comonad.extract(dictComonad)(lowerYoneda($28));
      });
  };
  var applyYoneda = function (dictApply) {
      return new Control_Apply.Apply(function () {
          return functorYoneda;
      }, function (v) {
          return function (v1) {
              return function (k) {
                  return Control_Apply.apply(dictApply)(v(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)(k)))(v1(Control_Category.id(Control_Category.categoryFn)));
              };
          };
      });
  };
  var bindYoneda = function (dictBind) {
      return new Control_Bind.Bind(function () {
          return applyYoneda(dictBind["__superclass_Control.Apply.Apply_0"]());
      }, function (v) {
          return function (g) {
              return function (k) {
                  return Control_Bind.bind(dictBind)(v(Control_Category.id(Control_Category.categoryFn)))(function (a) {
                      return runYoneda(g(a))(k);
                  });
              };
          };
      });
  };
  var applicativeYoneda = function (dictApplicative) {
      return new Control_Applicative.Applicative(function () {
          return applyYoneda(dictApplicative["__superclass_Control.Apply.Apply_0"]());
      }, function ($29) {
          return liftYoneda((dictApplicative["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(Control_Applicative.pure(dictApplicative)($29));
      });
  };
  var monadYoneda = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeYoneda(dictMonad["__superclass_Control.Applicative.Applicative_0"]());
      }, function () {
          return bindYoneda(dictMonad["__superclass_Control.Bind.Bind_1"]());
      });
  };
  exports["Yoneda"] = Yoneda;
  exports["hoistYoneda"] = hoistYoneda;
  exports["liftYoneda"] = liftYoneda;
  exports["lowerYoneda"] = lowerYoneda;
  exports["runYoneda"] = runYoneda;
  exports["functorYoneda"] = functorYoneda;
  exports["applyYoneda"] = applyYoneda;
  exports["applicativeYoneda"] = applicativeYoneda;
  exports["bindYoneda"] = bindYoneda;
  exports["monadYoneda"] = monadYoneda;
  exports["monadTransYoneda"] = monadTransYoneda;
  exports["extendYoneda"] = extendYoneda;
  exports["comonadYoneda"] = comonadYoneda;
})(PS["Data.Yoneda"] = PS["Data.Yoneda"] || {});
(function(exports) {
  /* globals exports */
  "use strict";

  // module Global

  exports.nan = NaN;

  exports.isNaN = isNaN;

  exports.infinity = Infinity;

  exports.isFinite = isFinite;

  exports.readInt = function (radix) {
    return function (n) {
      return parseInt(n, radix);
    };
  };

  exports.readFloat = parseFloat;

  exports.decodeURI = decodeURI;
  exports.encodeURI = encodeURI;
  exports.decodeURIComponent = decodeURIComponent;
  exports.encodeURIComponent = encodeURIComponent;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Global"];
  exports["decodeURI"] = $foreign["decodeURI"];
  exports["decodeURIComponent"] = $foreign["decodeURIComponent"];
  exports["encodeURI"] = $foreign["encodeURI"];
  exports["encodeURIComponent"] = $foreign["encodeURIComponent"];
  exports["infinity"] = $foreign.infinity;
  exports["isFinite"] = $foreign["isFinite"];
  exports["isNaN"] = $foreign["isNaN"];
  exports["nan"] = $foreign.nan;
  exports["readFloat"] = $foreign.readFloat;
  exports["readInt"] = $foreign.readInt;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  /* globals exports, JSON */
  "use strict";

  // module Global.Unsafe

  exports.unsafeStringify = function (x) {
    return JSON.stringify(x);
  };
})(PS["Global.Unsafe"] = PS["Global.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Global.Unsafe"];
  exports["unsafeStringify"] = $foreign.unsafeStringify;
})(PS["Global.Unsafe"] = PS["Global.Unsafe"] || {});
(function(exports) {
  /* global exports, ArrayBuffer, Float32Array, Int32Array */
  "use strict";

  // module Test.QuickCheck.Gen

  exports.float32ToInt32 = function (n) {
    var arr = new ArrayBuffer(4);
    var fv = new Float32Array(arr);
    var iv = new Int32Array(arr);
    fv[0] = n;
    return iv[0];
  };
})(PS["Test.QuickCheck.Gen"] = PS["Test.QuickCheck.Gen"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Ring = PS["Data.Ring"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Functor = PS["Data.Functor"];        
  var Seed = function (x) {
      return x;
  };
  var showSeed = new Data_Show.Show(function (v) {
      return "Seed " + Data_Show.show(Data_Show.showInt)(v);
  });
  var seedMin = 1;
  var runSeed = function (v) {
      return v;
  };
  var lcgN = 2147483647;
  var lcgM = 48271;
  var lcgPerturb = function (d) {
      var go = function (n) {
          return Data_Function.apply(Partial_Unsafe.unsafePartial)(function (dictPartial) {
              return Data_Function.apply(Data_Maybe.fromJust(dictPartial))(Data_Function.apply(Data_Int.fromNumber)($$Math.remainder(Data_Int.toNumber(lcgM) * Data_Int.toNumber(n) + d)(Data_Int.toNumber(lcgN))));
          });
      };
      return function ($9) {
          return Seed(go(runSeed($9)));
      };
  };
  var seedMax = lcgM - 1;
  var lcgC = 0;
  var lcgNext = lcgPerturb(Data_Int.toNumber(lcgC));
  var eqSeed = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return v === v1;
      };
  });
  var ensureBetween = function (min) {
      return function (max) {
          return function (n) {
              var rangeSize = max - min;
              return (n % rangeSize + rangeSize | 0) % rangeSize + min | 0;
          };
      };
  };
  var mkSeed = function (x) {
      return ensureBetween(seedMin)(seedMax)(x);
  };
  var randomSeed = Data_Functor.map(Control_Monad_Eff.functorEff)(mkSeed)(Control_Monad_Eff_Random.randomInt(seedMin)(seedMax));
  exports["lcgC"] = lcgC;
  exports["lcgM"] = lcgM;
  exports["lcgN"] = lcgN;
  exports["lcgNext"] = lcgNext;
  exports["lcgPerturb"] = lcgPerturb;
  exports["mkSeed"] = mkSeed;
  exports["randomSeed"] = randomSeed;
  exports["runSeed"] = runSeed;
  exports["showSeed"] = showSeed;
  exports["eqSeed"] = eqSeed;
})(PS["Test.QuickCheck.LCG"] = PS["Test.QuickCheck.LCG"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var $foreign = PS["Test.QuickCheck.Gen"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Tuple = PS["Data.Tuple"];
  var $$Math = PS["Math"];
  var Test_QuickCheck_LCG = PS["Test.QuickCheck.LCG"];
  var Data_Function = PS["Data.Function"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Ord = PS["Data.Ord"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ring = PS["Data.Ring"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var runGen = Control_Monad_State.runState;
  var stateful = function (f) {
      return Data_Function.apply(Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (s) {
          return runGen(f(s))(s);
      });
  };
  var sized = function (f) {
      return stateful(function (s) {
          return f(s.size);
      });
  };
  var variant = function (n) {
      return function (g) {
          return Data_Function.apply(Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (s) {
              return runGen(g)((function () {
                  var $12 = {};
                  for (var $13 in s) {
                      if (s.hasOwnProperty($13)) {
                          $12[$13] = s[$13];
                      };
                  };
                  $12.newSeed = n;
                  return $12;
              })());
          });
      };
  };
  var resize = function (sz) {
      return function (g) {
          return Data_Function.apply(Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (s) {
              return runGen(g)((function () {
                  var $14 = {};
                  for (var $15 in s) {
                      if (s.hasOwnProperty($15)) {
                          $14[$15] = s[$15];
                      };
                  };
                  $14.size = sz;
                  return $14;
              })());
          });
      };
  };
  var replicateMRec = function (dictMonadRec) {
      return function (k) {
          return function (v) {
              if (k <= 0) {
                  return Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]())(Data_List.Nil.value);
              };
              var go = function (v1) {
                  if (v1.value1 === 0) {
                      return Data_Function.apply(Control_Applicative.pure((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Applicative.Applicative_0"]()))(new Data_Either.Right(v1.value0));
                  };
                  return Data_Functor.mapFlipped((((dictMonadRec["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]())(v)(function (x) {
                      return new Data_Either.Left(new Data_Tuple.Tuple(new Data_List.Cons(x, v1.value0), v1.value1 - 1));
                  });
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(new Data_Tuple.Tuple(Data_List.Nil.value, k));
          };
      };
  };
  var repeatable = function (f) {
      return Data_Function.apply(Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity)))(function (s) {
          return new Data_Tuple.Tuple(function (a) {
              return Data_Tuple.fst(runGen(f(a))(s));
          }, (function () {
              var $23 = {};
              for (var $24 in s) {
                  if (s.hasOwnProperty($24)) {
                      $23[$24] = s[$24];
                  };
              };
              $23.newSeed = Test_QuickCheck_LCG.lcgNext(s.newSeed);
              return $23;
          })());
      });
  };
  var perturbGen = function (n) {
      return function (gen) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.modify(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (s) {
              var $25 = {};
              for (var $26 in s) {
                  if (s.hasOwnProperty($26)) {
                      $25[$26] = s[$26];
                  };
              };
              $25.newSeed = Test_QuickCheck_LCG.lcgPerturb(Data_Int.toNumber($foreign.float32ToInt32(n)))(s.newSeed);
              return $25;
          }))(function () {
              return gen;
          });
      };
  };
  var listOf = replicateMRec(Control_Monad_State_Trans.monadRecStateT(Control_Monad_Rec_Class.monadRecIdentity));
  var vectorOf = function (k) {
      return function (g) {
          return Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray))(listOf(k)(g));
      };
  };
  var lcgStep = (function () {
      var f = function (s) {
          return new Data_Tuple.Tuple(Test_QuickCheck_LCG.runSeed(s.newSeed), (function () {
              var $27 = {};
              for (var $28 in s) {
                  if (s.hasOwnProperty($28)) {
                      $27[$28] = s[$28];
                  };
              };
              $27.newSeed = Test_QuickCheck_LCG.lcgNext(s.newSeed);
              return $27;
          })());
      };
      return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(f);
  })();
  var uniform = Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(function (n) {
      return Data_Int.toNumber(n) / Data_Int.toNumber(Test_QuickCheck_LCG.lcgN);
  })(lcgStep);
  var evalGen = Control_Monad_State.evalState;
  var sample = function (seed) {
      return function (sz) {
          return function (g) {
              return evalGen(vectorOf(sz)(g))({
                  newSeed: seed, 
                  size: sz
              });
          };
      };
  };
  var randomSample$prime = function (n) {
      return function (g) {
          return function __do() {
              var v = Test_QuickCheck_LCG.randomSeed();
              return Data_Function.apply(Control_Applicative.pure(Control_Monad_Eff.applicativeEff))(sample(v)(n)(g))();
          };
      };
  };
  var randomSample = randomSample$prime(10);
  var chooseInt = function (a) {
      return function (b) {
          var clamp = function (x) {
              var $30 = x % ((b - a) + 1 | 0);
              if ($30 >= 0) {
                  return a + $30 | 0;
              };
              if (Data_Boolean.otherwise) {
                  return (b + $30 | 0) + 1 | 0;
              };
              throw new Error("Failed pattern match at Test.QuickCheck.Gen line 96, column 13 - line 98, column 43: " + [ $30.constructor.name ]);
          };
          return Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(clamp)(lcgStep);
      };
  };
  var elements = function (x) {
      return function (xs) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(chooseInt(0)(Data_Array.length(xs)))(function (v) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))((function () {
                  var $32 = v === 0;
                  if ($32) {
                      return x;
                  };
                  if (!$32) {
                      return Data_Maybe.fromMaybe(x)(Data_Array.index(xs)(v - 1));
                  };
                  throw new Error("Failed pattern match at Test.QuickCheck.Gen line 154, column 3 - line 154, column 62: " + [ $32.constructor.name ]);
              })());
          });
      };
  };
  var oneOf = function (x) {
      return function (xs) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(chooseInt(0)(Data_Array.length(xs)))(function (v) {
              var $34 = v < 1;
              if ($34) {
                  return x;
              };
              if (!$34) {
                  return Data_Maybe.fromMaybe(x)(Data_Array.index(xs)(v - 1));
              };
              throw new Error("Failed pattern match at Test.QuickCheck.Gen line 105, column 3 - line 105, column 55: " + [ $34.constructor.name ]);
          });
      };
  };
  var choose = function (a) {
      return function (b) {
          var min = $$Math.min(a)(b);
          var max = $$Math.max(a)(b);
          return Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(function ($48) {
              return min + (max - min) * $48;
          })(uniform);
      };
  };
  var frequency = function (x) {
      return function (xs) {
          var xxs = new Data_List.Cons(x, xs);
          var total = Data_Function.apply(Data_Monoid_Additive.runAdditive)(Data_Foldable.fold(Data_List.foldableList)(Data_Monoid_Additive.monoidAdditive(Data_Semiring.semiringNumber))(Data_Functor.map(Data_List.functorList)(function ($49) {
              return Data_Monoid_Additive.Additive(Data_Tuple.fst($49));
          })(xxs)));
          var pick = function (__copy_n) {
              return function (__copy_d) {
                  return function (__copy_v) {
                      var n = __copy_n;
                      var d = __copy_d;
                      var v = __copy_v;
                      tco: while (true) {
                          if (v instanceof Data_List.Nil) {
                              return d;
                          };
                          if (v instanceof Data_List.Cons) {
                              var $38 = n <= v.value0.value0;
                              if ($38) {
                                  return v.value0.value1;
                              };
                              if (!$38) {
                                  var __tco_n = n - v.value0.value0;
                                  var __tco_d = d;
                                  var __tco_v = v.value1;
                                  n = __tco_n;
                                  d = __tco_d;
                                  v = __tco_v;
                                  continue tco;
                              };
                              throw new Error("Failed pattern match at Test.QuickCheck.Gen line 114, column 38 - line 114, column 77: " + [ $38.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Test.QuickCheck.Gen line 110, column 18 - line 117, column 23: " + [ n.constructor.name, d.constructor.name, v.constructor.name ]);
                      };
                  };
              };
          };
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(choose(0)(total))(function (v) {
              return pick(v)(Data_Tuple.snd(x))(xxs);
          });
      };
  };
  var arrayOf1 = function (g) {
      return Data_Function.apply(sized)(function (n) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(chooseInt(0)(n))(function (v) {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(g)(function (v1) {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(vectorOf(v - 1)(g))(function (v2) {
                      return Data_Function.apply(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)))(new Data_Tuple.Tuple(v1, v2));
                  });
              });
          });
      });
  };
  var arrayOf = function (g) {
      return Data_Function.apply(sized)(function (n) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(chooseInt(0)(n))(function (v) {
              return vectorOf(v)(g);
          });
      });
  };
  exports["arrayOf"] = arrayOf;
  exports["arrayOf1"] = arrayOf1;
  exports["choose"] = choose;
  exports["chooseInt"] = chooseInt;
  exports["elements"] = elements;
  exports["evalGen"] = evalGen;
  exports["frequency"] = frequency;
  exports["listOf"] = listOf;
  exports["oneOf"] = oneOf;
  exports["perturbGen"] = perturbGen;
  exports["randomSample"] = randomSample;
  exports["randomSample'"] = randomSample$prime;
  exports["repeatable"] = repeatable;
  exports["resize"] = resize;
  exports["runGen"] = runGen;
  exports["sample"] = sample;
  exports["sized"] = sized;
  exports["stateful"] = stateful;
  exports["uniform"] = uniform;
  exports["variant"] = variant;
  exports["vectorOf"] = vectorOf;
})(PS["Test.QuickCheck.Gen"] = PS["Test.QuickCheck.Gen"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Char = PS["Data.Char"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_Tuple = PS["Data.Tuple"];
  var Test_QuickCheck_Gen = PS["Test.QuickCheck.Gen"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Ordering = PS["Data.Ordering"];
  var Control_Category = PS["Control.Category"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];        
  var Arbitrary = function (arbitrary) {
      this.arbitrary = arbitrary;
  };
  var Coarbitrary = function (coarbitrary) {
      this.coarbitrary = coarbitrary;
  };
  var coarbitrary = function (dict) {
      return dict.coarbitrary;
  };
  var coarbUnit = new Coarbitrary(function (v) {
      return Test_QuickCheck_Gen.perturbGen(1.0);
  });
  var coarbTuple = function (dictCoarbitrary) {
      return function (dictCoarbitrary1) {
          return new Coarbitrary(function (v) {
              return function ($50) {
                  return coarbitrary(dictCoarbitrary1)(v.value1)(coarbitrary(dictCoarbitrary)(v.value0)($50));
              };
          });
      };
  };
  var coarbOrdering = new Coarbitrary(function (v) {
      if (v instanceof Data_Ordering.LT) {
          return Test_QuickCheck_Gen.perturbGen(1.0);
      };
      if (v instanceof Data_Ordering.EQ) {
          return Test_QuickCheck_Gen.perturbGen(2.0);
      };
      if (v instanceof Data_Ordering.GT) {
          return Test_QuickCheck_Gen.perturbGen(3.0);
      };
      throw new Error("Failed pattern match at Test.QuickCheck.Arbitrary line 81, column 3 - line 82, column 3: " + [ v.constructor.name ]);
  });
  var coarbNumber = new Coarbitrary(Test_QuickCheck_Gen.perturbGen);
  var coarbMaybe = function (dictCoarbitrary) {
      return new Coarbitrary(function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Test_QuickCheck_Gen.perturbGen(1.0);
          };
          if (v instanceof Data_Maybe.Just) {
              return coarbitrary(dictCoarbitrary)(v.value0);
          };
          throw new Error("Failed pattern match at Test.QuickCheck.Arbitrary line 111, column 3 - line 112, column 3: " + [ v.constructor.name ]);
      });
  };
  var coarbList = function (dictCoarbitrary) {
      return new Coarbitrary(Data_Foldable.foldl(Data_List.foldableList)(function (f) {
          return function (x) {
              return function ($51) {
                  return f(coarbitrary(dictCoarbitrary)(x)($51));
              };
          };
      })(Control_Category.id(Control_Category.categoryFn)));
  };
  var coarbLazy = function (dictCoarbitrary) {
      return new Coarbitrary(function (a) {
          return coarbitrary(dictCoarbitrary)(Data_Lazy.force(a));
      });
  };
  var coarbInt = new Coarbitrary(function ($52) {
      return Test_QuickCheck_Gen.perturbGen(Data_Int.toNumber($52));
  });
  var coarbIdentity = function (dictCoarbitrary) {
      return new Coarbitrary(function (v) {
          return coarbitrary(dictCoarbitrary)(v);
      });
  };
  var coarbEither = function (dictCoarbitrary) {
      return function (dictCoarbitrary1) {
          return new Coarbitrary(function (v) {
              if (v instanceof Data_Either.Left) {
                  return coarbitrary(dictCoarbitrary)(v.value0);
              };
              if (v instanceof Data_Either.Right) {
                  return coarbitrary(dictCoarbitrary1)(v.value0);
              };
              throw new Error("Failed pattern match at Test.QuickCheck.Arbitrary line 120, column 3 - line 120, column 40: " + [ v.constructor.name ]);
          });
      };
  };
  var coarbChar = new Coarbitrary(function (c) {
      return Data_Function.apply(coarbitrary(coarbInt))(Data_Char.toCharCode(c));
  });
  var coarbBoolean = new Coarbitrary(function (v) {
      if (v) {
          return Test_QuickCheck_Gen.perturbGen(1.0);
      };
      if (!v) {
          return Test_QuickCheck_Gen.perturbGen(2.0);
      };
      throw new Error("Failed pattern match at Test.QuickCheck.Arbitrary line 44, column 3 - line 45, column 3: " + [ v.constructor.name ]);
  });
  var coarbArray = function (dictCoarbitrary) {
      return new Coarbitrary(Data_Foldable.foldl(Data_Foldable.foldableArray)(function (f) {
          return function (x) {
              return function ($53) {
                  return f(coarbitrary(dictCoarbitrary)(x)($53));
              };
          };
      })(Control_Category.id(Control_Category.categoryFn)));
  };
  var coarbString = new Coarbitrary(function (s) {
      return Data_Function.apply(coarbitrary(coarbArray(coarbMaybe(coarbInt))))(Data_Functor.map(Data_Functor.functorArray)(Data_String.charCodeAt(0))(Data_String.split("")(s)));
  });
  var arbitrary = function (dict) {
      return dict.arbitrary;
  };
  var arbitraryIdentity = function (dictArbitrary) {
      return new Arbitrary(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(Data_Identity.Identity)(arbitrary(dictArbitrary)));
  };
  var arbitraryLazy = function (dictArbitrary) {
      return new Arbitrary(Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(arbitrary(dictArbitrary))(function ($54) {
          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Lazy.defer(Data_Function["const"]($54)));
      }));
  };
  var arbitraryList = function (dictArbitrary) {
      return new Arbitrary(Test_QuickCheck_Gen.sized(function (n) {
          return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Test_QuickCheck_Gen.chooseInt(0)(n))(Data_Function.flip(Test_QuickCheck_Gen.listOf)(arbitrary(dictArbitrary)));
      }));
  };
  var arbUnit = new Arbitrary(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Unit.unit));
  var arbTuple = function (dictArbitrary) {
      return function (dictArbitrary1) {
          return new Arbitrary(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity))(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(Data_Tuple.Tuple.create)(arbitrary(dictArbitrary)))(arbitrary(dictArbitrary1)));
      };
  };
  var arbOrdering = new Arbitrary(Test_QuickCheck_Gen.oneOf(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Ordering.LT.value))([ Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Ordering.EQ.value), Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Ordering.GT.value) ]));
  var arbNumber = new Arbitrary(Test_QuickCheck_Gen.uniform);
  var arbInt = new Arbitrary(Test_QuickCheck_Gen.chooseInt(-1000000)(1000000));
  var arbFunction = function (dictCoarbitrary) {
      return function (dictArbitrary) {
          return new Arbitrary(Test_QuickCheck_Gen.repeatable(function (a) {
              return coarbitrary(dictCoarbitrary)(a)(arbitrary(dictArbitrary));
          }));
      };
  };
  var arbChar = new Arbitrary(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(Data_Char.fromCharCode)(Test_QuickCheck_Gen.chooseInt(0)(65536)));
  var arbBoolean = new Arbitrary(Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Test_QuickCheck_Gen.uniform)(function (v) {
      return Data_Function.apply(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)))(v * 2.0 < 1.0);
  }));
  var arbEither = function (dictArbitrary) {
      return function (dictArbitrary1) {
          return new Arbitrary(Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(arbitrary(arbBoolean))(function (v) {
              if (v) {
                  return Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(Data_Either.Left.create)(arbitrary(dictArbitrary));
              };
              if (!v) {
                  return Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(Data_Either.Right.create)(arbitrary(dictArbitrary1));
              };
              throw new Error("Failed pattern match at Test.QuickCheck.Arbitrary line 117, column 5 - line 117, column 58: " + [ v.constructor.name ]);
          }));
      };
  };
  var arbMaybe = function (dictArbitrary) {
      return new Arbitrary(Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(arbitrary(arbBoolean))(function (v) {
          if (v) {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
          };
          if (!v) {
              return Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(Data_Maybe.Just.create)(arbitrary(dictArbitrary));
          };
          throw new Error("Failed pattern match at Test.QuickCheck.Arbitrary line 108, column 5 - line 108, column 51: " + [ v.constructor.name ]);
      }));
  };
  var arbArray = function (dictArbitrary) {
      return new Arbitrary(Test_QuickCheck_Gen.arrayOf(arbitrary(dictArbitrary)));
  };
  var arbString = new Arbitrary(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(Data_String.fromCharArray)(arbitrary(arbArray(arbChar))));
  var coarbFunction = function (dictArbitrary) {
      return function (dictCoarbitrary) {
          return new Coarbitrary(function (f) {
              return function (gen) {
                  return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(arbitrary(arbArray(dictArbitrary)))(function (v) {
                      return coarbitrary(coarbArray(dictCoarbitrary))(Data_Functor.map(Data_Functor.functorArray)(f)(v))(gen);
                  });
              };
          });
      };
  };
  exports["Arbitrary"] = Arbitrary;
  exports["Coarbitrary"] = Coarbitrary;
  exports["arbitrary"] = arbitrary;
  exports["coarbitrary"] = coarbitrary;
  exports["arbBoolean"] = arbBoolean;
  exports["coarbBoolean"] = coarbBoolean;
  exports["arbNumber"] = arbNumber;
  exports["coarbNumber"] = coarbNumber;
  exports["arbInt"] = arbInt;
  exports["coarbInt"] = coarbInt;
  exports["arbString"] = arbString;
  exports["coarbString"] = coarbString;
  exports["arbChar"] = arbChar;
  exports["coarbChar"] = coarbChar;
  exports["arbUnit"] = arbUnit;
  exports["coarbUnit"] = coarbUnit;
  exports["arbOrdering"] = arbOrdering;
  exports["coarbOrdering"] = coarbOrdering;
  exports["arbArray"] = arbArray;
  exports["coarbArray"] = coarbArray;
  exports["arbFunction"] = arbFunction;
  exports["coarbFunction"] = coarbFunction;
  exports["arbTuple"] = arbTuple;
  exports["coarbTuple"] = coarbTuple;
  exports["arbMaybe"] = arbMaybe;
  exports["coarbMaybe"] = coarbMaybe;
  exports["arbEither"] = arbEither;
  exports["coarbEither"] = coarbEither;
  exports["arbitraryList"] = arbitraryList;
  exports["coarbList"] = coarbList;
  exports["arbitraryIdentity"] = arbitraryIdentity;
  exports["coarbIdentity"] = coarbIdentity;
  exports["arbitraryLazy"] = arbitraryLazy;
  exports["coarbLazy"] = coarbLazy;
})(PS["Test.QuickCheck.Arbitrary"] = PS["Test.QuickCheck.Arbitrary"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Data_List = PS["Data.List"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Test_QuickCheck_Arbitrary = PS["Test.QuickCheck.Arbitrary"];
  var Test_QuickCheck_Gen = PS["Test.QuickCheck.Gen"];
  var Test_QuickCheck_LCG = PS["Test.QuickCheck.LCG"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Eq = PS["Data.Eq"];        
  var Success = (function () {
      function Success() {

      };
      Success.value = new Success();
      return Success;
  })();
  var Failed = (function () {
      function Failed(value0) {
          this.value0 = value0;
      };
      Failed.create = function (value0) {
          return new Failed(value0);
      };
      return Failed;
  })();
  var Testable = function (test) {
      this.test = test;
  };
  var withHelp = function (v) {
      return function (v1) {
          if (v) {
              return Success.value;
          };
          if (!v) {
              return new Failed(v1);
          };
          throw new Error("Failed pattern match at Test.QuickCheck line 107, column 1 - line 107, column 26: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var testableResult = new Testable(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)));
  var testableBoolean = new Testable(function (v) {
      if (v) {
          return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Success.value);
      };
      if (!v) {
          return Data_Function.apply(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)))(new Failed("Test returned false"));
      };
      throw new Error("Failed pattern match at Test.QuickCheck line 86, column 3 - line 86, column 27: " + [ v.constructor.name ]);
  });
  var test = function (dict) {
      return dict.test;
  };
  var testableFunction = function (dictArbitrary) {
      return function (dictTestable) {
          return new Testable(function (f) {
              return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Test_QuickCheck_Arbitrary.arbitrary(dictArbitrary))(function ($35) {
                  return test(dictTestable)(f($35));
              });
          });
      };
  };
  var showResult = new Data_Show.Show(function (v) {
      if (v instanceof Success) {
          return "Success";
      };
      if (v instanceof Failed) {
          return "Failed: " + v.value0;
      };
      throw new Error("Failed pattern match at Test.QuickCheck line 96, column 3 - line 97, column 3: " + [ v.constructor.name ]);
  });
  var quickCheckPure = function (dictTestable) {
      return function (s) {
          return function (n) {
              return function (prop) {
                  return Test_QuickCheck_Gen.evalGen(Data_Unfoldable.replicateA(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_List.unfoldableList)(Data_List.traversableList)(n)(test(dictTestable)(prop)))({
                      newSeed: s, 
                      size: 10
                  });
              };
          };
      };
  };
  var quickCheck$prime = function (dictTestable) {
      return function (n) {
          return function (prop) {
              var throwOnFirstFailure = function (__copy_v) {
                  return function (__copy_v1) {
                      var v = __copy_v;
                      var v1 = __copy_v1;
                      tco: while (true) {
                          if (v1 instanceof Data_List.Nil) {
                              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                          };
                          if (v1 instanceof Data_List.Cons && v1.value0 instanceof Failed) {
                              return Data_Function.apply(Control_Monad_Eff_Exception.throwException)(Data_Function.apply(Control_Monad_Eff_Exception.error)("Test " + (Data_Show.show(Data_Show.showInt)(v) + (" failed: \n" + v1.value0.value0))));
                          };
                          if (v1 instanceof Data_List.Cons) {
                              var __tco_v = v + 1 | 0;
                              var __tco_v1 = v1.value1;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Test.QuickCheck line 57, column 3 - line 57, column 40: " + [ v.constructor.name, v1.constructor.name ]);
                      };
                  };
              };
              var countSuccesses = function (v) {
                  if (v instanceof Data_List.Nil) {
                      return 0;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof Success) {
                      return 1 + countSuccesses(v.value1) | 0;
                  };
                  if (v instanceof Data_List.Cons) {
                      return countSuccesses(v.value1);
                  };
                  throw new Error("Failed pattern match at Test.QuickCheck line 62, column 3 - line 62, column 28: " + [ v.constructor.name ]);
              };
              return function __do() {
                  var v = Test_QuickCheck_LCG.randomSeed();
                  var results = quickCheckPure(dictTestable)(v)(n)(prop);
                  var successes = countSuccesses(results);
                  Data_Function.apply(Control_Monad_Eff_Console.log)(Data_Show.show(Data_Show.showInt)(successes) + ("/" + (Data_Show.show(Data_Show.showInt)(n) + " test(s) passed.")))();
                  return throwOnFirstFailure(1)(results)();
              };
          };
      };
  };
  var quickCheck = function (dictTestable) {
      return function (prop) {
          return quickCheck$prime(dictTestable)(100)(prop);
      };
  };
  var assertNotEquals = function (dictEq) {
      return function (dictShow) {
          return function (a) {
              return function (b) {
                  return withHelp(Data_Eq.notEq(dictEq)(a)(b))(Data_Show.show(dictShow)(a) + (" == " + Data_Show.show(dictShow)(b)));
              };
          };
      };
  };
  var assertEquals = function (dictEq) {
      return function (dictShow) {
          return function (a) {
              return function (b) {
                  return withHelp(Data_Eq.eq(dictEq)(a)(b))(Data_Show.show(dictShow)(a) + (" /= " + Data_Show.show(dictShow)(b)));
              };
          };
      };
  };
  exports["Success"] = Success;
  exports["Failed"] = Failed;
  exports["Testable"] = Testable;
  exports["assertEquals"] = assertEquals;
  exports["assertNotEquals"] = assertNotEquals;
  exports["quickCheck"] = quickCheck;
  exports["quickCheck'"] = quickCheck$prime;
  exports["quickCheckPure"] = quickCheckPure;
  exports["test"] = test;
  exports["withHelp"] = withHelp;
  exports["testableResult"] = testableResult;
  exports["testableBoolean"] = testableBoolean;
  exports["testableFunction"] = testableFunction;
  exports["showResult"] = showResult;
})(PS["Test.QuickCheck"] = PS["Test.QuickCheck"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_String = PS["Data.String"];
  var Test_QuickCheck_Gen = PS["Test.QuickCheck.Gen"];
  var Test_QuickCheck_Arbitrary = PS["Test.QuickCheck.Arbitrary"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Data_Identity = PS["Data.Identity"];        
  var AlphaNumString = function (x) {
      return x;
  };
  var runAlphaNumString = function (v) {
      return v;
  };
  var coarbAlphaNumString = new Test_QuickCheck_Arbitrary.Coarbitrary(function (v) {
      return Test_QuickCheck_Arbitrary.coarbitrary(Test_QuickCheck_Arbitrary.coarbString)(v);
  });
  var arbAlphaNumString = new Test_QuickCheck_Arbitrary.Arbitrary((function () {
      var rest = Data_String.toCharArray("bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789");
      var anyChar = Test_QuickCheck_Gen.oneOf(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))("a"))(Data_Functor.map(Data_Functor.functorArray)(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)))(rest));
      return Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(function ($4) {
          return AlphaNumString(Data_String.fromCharArray($4));
      })(Test_QuickCheck_Gen.arrayOf(anyChar));
  })());
  exports["AlphaNumString"] = AlphaNumString;
  exports["runAlphaNumString"] = runAlphaNumString;
  exports["arbAlphaNumString"] = arbAlphaNumString;
  exports["coarbAlphaNumString"] = coarbAlphaNumString;
})(PS["Test.QuickCheck.Data.AlphaNumString"] = PS["Test.QuickCheck.Data.AlphaNumString"] || {});
(function(exports) {
  // Generated by psc version 0.9.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Test_QuickCheck_Arbitrary = PS["Test.QuickCheck.Arbitrary"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];        
  var ApproxNumber = function (x) {
      return x;
  };
  var semiringApproxNumber = new Data_Semiring.Semiring(function (v) {
      return function (v1) {
          return v + v1;
      };
  }, function (v) {
      return function (v1) {
          return v * v1;
      };
  }, 1, 0);
  var ringApproxNumber = new Data_Ring.Ring(function () {
      return semiringApproxNumber;
  }, function (v) {
      return function (v1) {
          return v - v1;
      };
  });
  var commutativeRingApproxNumber = new Data_CommutativeRing.CommutativeRing(function () {
      return ringApproxNumber;
  });
  var euclideanRingApproxNumber = new Data_EuclideanRing.EuclideanRing(function () {
      return commutativeRingApproxNumber;
  }, function (v) {
      return Data_EuclideanRing.degree(Data_EuclideanRing.euclideanRingNumber)(v);
  }, function (v) {
      return function (v1) {
          return v / v1;
      };
  }, function (v) {
      return function (v1) {
          return Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingNumber)(v)(v1);
      };
  });
  var fieldApproxNumber = new Data_Field.Field(function () {
      return euclideanRingApproxNumber;
  });
  var coarbitraryApproxNumber = new Test_QuickCheck_Arbitrary.Coarbitrary(function (v) {
      return Test_QuickCheck_Arbitrary.coarbitrary(Test_QuickCheck_Arbitrary.coarbNumber)(v);
  });
  var arbitraryApproxNumber = new Test_QuickCheck_Arbitrary.Arbitrary(Data_Functor.map(Control_Monad_State_Trans.functorStateT(Data_Identity.functorIdentity))(ApproxNumber)(Test_QuickCheck_Arbitrary.arbitrary(Test_QuickCheck_Arbitrary.arbNumber)));
  var approximateEqual = function (x) {
      return function (y) {
          return y - x <= 1.0e-8 && y - x >= -1.0e-8;
      };
  };
  var eqApproxNumber = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return approximateEqual(v)(v1);
      };
  });
  var ordApproxNumber = new Data_Ord.Ord(function () {
      return eqApproxNumber;
  }, function (v) {
      return function (v1) {
          return Data_Ord.compare(Data_Ord.ordNumber)(v)(v1);
      };
  });
  exports["ApproxNumber"] = ApproxNumber;
  exports["approximateEqual"] = approximateEqual;
  exports["arbitraryApproxNumber"] = arbitraryApproxNumber;
  exports["coarbitraryApproxNumber"] = coarbitraryApproxNumber;
  exports["eqApproxNumber"] = eqApproxNumber;
  exports["ordApproxNumber"] = ordApproxNumber;
  exports["semiringApproxNumber"] = semiringApproxNumber;
  exports["ringApproxNumber"] = ringApproxNumber;
  exports["commutativeRingApproxNumber"] = commutativeRingApproxNumber;
  exports["euclideanRingApproxNumber"] = euclideanRingApproxNumber;
  exports["fieldApproxNumber"] = fieldApproxNumber;
})(PS["Test.QuickCheck.Data.ApproxNumber"] = PS["Test.QuickCheck.Data.ApproxNumber"] || {});
